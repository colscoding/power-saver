function getStravaClientId(){return localStorage.getItem("stravaClientId")}function setStravaClientId(e){localStorage.setItem("stravaClientId",e)}function showStravaConfigDialog(){return new Promise(e=>{let t=document.createElement("div");t.className="modal-backdrop";let a=document.createElement("div");a.className="modal strava-config-modal",a.innerHTML=`
            <h3>\u{1F6B4} Configure Strava Integration</h3>
            <div class="config-instructions">
                <p><strong>To enable Strava sync functionality:</strong></p>
                <ol>
                    <li>Go to <a href="https://www.strava.com/settings/api" target="_blank" rel="noopener">https://www.strava.com/settings/api</a></li>
                    <li>Click "Create & Manage Your App"</li>
                    <li>Fill in the required information:
                        <ul>
                            <li><strong>Application Name:</strong> Your app name (e.g., "Power Meter")</li>
                            <li><strong>Category:</strong> Choose appropriate category</li>
                            <li><strong>Website:</strong> Your website URL</li>
                            <li><strong>Authorization Callback Domain:</strong> <code>${window.location.hostname}</code></li>
                        </ul>
                    </li>
                    <li>After creating the app, copy your <strong>Client ID</strong> and paste it below</li>
                </ol>
            </div>
            <div class="config-input">
                <label for="clientIdInput">Strava Client ID:</label>
                <input type="text" id="clientIdInput" placeholder="Enter your Strava Client ID" />
                <div class="input-hint">This will be stored securely in your browser</div>
            </div>
            <div class="modal-buttons">
                <button id="cancelConfig" class="modal-button secondary">Cancel</button>
                <button id="saveConfig" class="modal-button primary">Save & Connect</button>
            </div>
        `,t.appendChild(a),document.body.appendChild(t);let n=a.querySelector("#clientIdInput"),o=a.querySelector("#saveConfig"),r=a.querySelector("#cancelConfig");n.focus(),o.addEventListener("click",()=>{let a=n.value.trim();return a?/^\d+$/.test(a)?void(setStravaClientId(a),document.body.removeChild(t),e(a)):void alert("Client ID should be a numeric value"):void alert("Please enter a valid Client ID")}),r.addEventListener("click",()=>{document.body.removeChild(t),e(null)}),n.addEventListener("keypress",e=>{"Enter"===e.key&&o.click()}),document.addEventListener("keydown",function a(n){"Escape"===n.key&&(document.removeEventListener("keydown",a),document.body.removeChild(t),e(null))}),t.addEventListener("click",a=>{a.target===t&&(document.body.removeChild(t),e(null))})})}let wakeLock=null;async function requestWakeLock(){if("wakeLock"in navigator)try{(wakeLock=await navigator.wakeLock.request("screen")).addEventListener("release",()=>{})}catch(e){console.error(`${e.name}, ${e.message}`)}}async function releaseWakeLock(){null!==wakeLock&&(await wakeLock.release(),wakeLock=null)}function createTrackpoint(e){let t={time:e=>`<Time>${new Date(e).toISOString()}</Time>`,heartRate:e=>`
<HeartRateBpm>
  <Value>${e}</Value>
</HeartRateBpm>
            `.trim(),cadence:e=>`<Cadence>${e}</Cadence>`,power:e=>`
<Extensions>
  <ns2:TPX>
    <ns2:Watts>${e}</ns2:Watts>
  </ns2:TPX>
</Extensions>
            `.trim()},a=Object.keys(t).map(a=>void 0===e[a]?"":t[a](e[a])).filter(e=>e).join("\n");return`
<Trackpoint>
  ${a}
</Trackpoint>
`.trim()}function generateTcxString(e){if(!Array.isArray(e)||0===e.length)throw Error("Input power data array is empty or invalid");let t=e.filter(e=>e&&"object"==typeof e&&void 0!==e.timestamp&&!isNaN(new Date(e.timestamp).getTime()));if(0===t.length)throw Error("No valid data points found");let a=t.map(e=>({time:e.timestamp,...void 0!==e.power&&{power:e.power},...void 0!==e.heartRate&&{heartRate:e.heartRate},...void 0!==e.cadence&&{cadence:e.cadence}})).sort((e,t)=>e.time-t.time),n=e=>!e.power||e.power<=0;for(;a.length>0&&n(a[0]);)a.shift();for(;a.length>0&&n(a[a.length-1]);)a.pop();if(0===a.length)throw Error("No valid power data found after processing");let o=a.filter(e=>e.power&&e.power>0).map(e=>parseFloat(e.power)),r=o.length>0?Math.round(o.reduce((e,t)=>e+t,0)/o.length):0,s=o.length>0?Math.max(...o):0,c=a[0].time,i=Math.round((a[a.length-1].time-c)/1e3/60),l="";if(void 0!==powerAverages&&powerAverages){let e=[];powerAverages["10s"]&&powerAverages["10s"].best>0&&e.push(`10s: ${powerAverages["10s"].best}W`),powerAverages["30s"]&&powerAverages["30s"].best>0&&e.push(`30s: ${powerAverages["30s"].best}W`),powerAverages["1m"]&&powerAverages["1m"].best>0&&e.push(`1min: ${powerAverages["1m"].best}W`),powerAverages["2m"]&&powerAverages["2m"].best>0&&e.push(`2min: ${powerAverages["2m"].best}W`),powerAverages["4m"]&&powerAverages["4m"].best>0&&e.push(`4min: ${powerAverages["4m"].best}W`),powerAverages["8m"]&&powerAverages["8m"].best>0&&e.push(`8min: ${powerAverages["8m"].best}W`),e.length>0&&(l=`

Best Power Averages: ${e.join(", ")}`)}let d=`Indoor cycling session recorded with Power Saver app.
Session Stats: Duration: ${i} min, Avg Power: ${r}W, Max Power: ${s}W`+l,u=a.map(createTrackpoint).join("\n"),g=new Date(c).toISOString();return`<?xml version="1.0" encoding="UTF-8"?>
<TrainingCenterDatabase
  xmlns="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd"
  xmlns:ns2="http://www.garmin.com/xmlschemas/ActivityExtension/v2">
  <Activities>
    <Activity Sport="Biking">
      <Id>${g}</Id>
      <Name>E Bike Indoor Cycling Trainer</Name>
      <Notes>${d.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}</Notes>
      <Lap StartTime="${g}">
        <Track>
        ${u}
        </Track>
      </Lap>
    </Activity>
  </Activities>
</TrainingCenterDatabase>`}let SESSION_STORAGE_KEY="powerMeterSession",SESSION_TIMEOUT=864e5;function saveSessionData(){try{let e={timestamp:Date.now(),powerData:powerData,heartData:heartData,cadenceData:cadenceData,rawPowerMeasurements:rawPowerMeasurements,powerReadings:powerReadings,powerAverages:powerAverages,lastPowerValue:lastPowerValue,lastHeartRateValue:lastHeartRateValue,lastCadenceValue:lastCadenceValue,sessionStartTime:sessionStartTime};localStorage.setItem(SESSION_STORAGE_KEY,JSON.stringify(e))}catch(e){console.warn("Failed to save session data:",e)}}function loadSessionData(){try{let e=localStorage.getItem(SESSION_STORAGE_KEY);if(!e)return null;let t=JSON.parse(e);if(Date.now()-t.timestamp>864e5)return localStorage.removeItem(SESSION_STORAGE_KEY),null;return t}catch(e){return console.warn("Failed to load session data:",e),localStorage.removeItem(SESSION_STORAGE_KEY),null}}function restoreSessionData(e){try{return e.powerData&&(powerData.length=0,powerData.push(...e.powerData)),e.heartData&&(heartData.length=0,heartData.push(...e.heartData)),e.cadenceData&&(cadenceData.length=0,cadenceData.push(...e.cadenceData)),e.rawPowerMeasurements&&(rawPowerMeasurements.length=0,rawPowerMeasurements.push(...e.rawPowerMeasurements)),e.powerReadings&&(powerReadings.length=0,powerReadings.push(...e.powerReadings)),e.powerAverages&&Object.assign(powerAverages,e.powerAverages),void 0!==e.lastPowerValue&&(lastPowerValue=e.lastPowerValue),void 0!==e.lastHeartRateValue&&(lastHeartRateValue=e.lastHeartRateValue),void 0!==e.lastCadenceValue&&(lastCadenceValue=e.lastCadenceValue),void 0!==e.sessionStartTime&&(sessionStartTime=e.sessionStartTime),updateDisplaysFromRestoredData(),!0}catch(e){return console.warn("Failed to restore session data:",e),!1}}function updateDisplaysFromRestoredData(){powerValueElement.textContent=lastPowerValue||"--",hrValueElement.textContent=lastHeartRateValue||"--",cadenceValueElement.textContent=lastCadenceValue||"--",updatePowerAveragesDisplay(),powerData.length>0&&showSessionRestoredNotification()}function showSessionRestoredNotification(){let e=document.createElement("div");e.style.cssText=`
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        z-index: 1000;
        font-size: 0.9rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease-out;
    `,e.textContent=`Session restored! ${powerData.length} data points recovered.`;let t=document.createElement("style");t.textContent=`
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `,document.head.appendChild(t),document.body.appendChild(e),setTimeout(()=>{e.style.animation="slideIn 0.3s ease-out reverse",setTimeout(()=>{e.parentNode&&e.parentNode.removeChild(e),t.parentNode&&t.parentNode.removeChild(t)},300)},5e3)}function clearSessionData(){localStorage.removeItem(SESSION_STORAGE_KEY)}let connectButton=document.getElementById("connectButton"),statusText=document.getElementById("status"),powerValueElement=document.getElementById("power-value"),hrValueElement=document.getElementById("hr-value"),cadenceValueElement=document.getElementById("cadence-value"),deviceNameElement=document.getElementById("device-name"),exportJsonButton=document.getElementById("exportJsonButton"),exportCsvButton=document.getElementById("exportCsvButton"),exportTcxButton=document.getElementById("exportTcxButton"),exportRawJsonButton=document.getElementById("exportRawJsonButton"),exportRawCsvButton=document.getElementById("exportRawCsvButton"),syncToStravaButton=document.getElementById("syncToStravaButton"),clearSessionButton=document.getElementById("clearSessionButton"),avg10sCurrentElement=document.getElementById("avg10s-current"),avg10sBestElement=document.getElementById("avg10s-best"),avg30sCurrentElement=document.getElementById("avg30s-current"),avg30sBestElement=document.getElementById("avg30s-best"),avg1mCurrentElement=document.getElementById("avg1m-current"),avg1mBestElement=document.getElementById("avg1m-best"),avg2mCurrentElement=document.getElementById("avg2m-current"),avg2mBestElement=document.getElementById("avg2m-best"),avg4mCurrentElement=document.getElementById("avg4m-current"),avg4mBestElement=document.getElementById("avg4m-best"),avg8mCurrentElement=document.getElementById("avg8m-current"),avg8mBestElement=document.getElementById("avg8m-best"),toggleConnectSection=document.getElementById("toggleConnectSection"),toggleExportSection=document.getElementById("toggleExportSection"),connectSection=document.getElementById("connectSection"),exportSection=document.getElementById("exportSection"),powerAveragesSection=document.getElementById("powerAveragesSection"),connectToggleText=document.getElementById("connectToggleText"),exportToggleText=document.getElementById("exportToggleText"),hamburgerBtn=document.getElementById("hamburgerButton"),menuDropdown=document.getElementById("menuDropdown"),powerAveragesToggle=document.getElementById("powerAveragesToggle"),powerMetricToggle=document.getElementById("powerMetricToggle"),heartRateMetricToggle=document.getElementById("heartRateMetricToggle"),cadenceMetricToggle=document.getElementById("cadenceMetricToggle"),connectSectionToggle=document.getElementById("connectSectionToggle"),exportSectionToggle=document.getElementById("exportSectionToggle"),stravaSettingsMenuItem=document.getElementById("stravaSettingsMenuItem"),powerCard=document.querySelector(".power-card"),heartRateCard=document.querySelector(".hr-card"),cadenceCard=document.querySelector(".cadence-card"),powerStatusIndicator=document.getElementById("power-status-indicator"),hrStatusIndicator=document.getElementById("hr-status-indicator"),cadenceStatusIndicator=document.getElementById("cadence-status-indicator");if(powerStatusIndicator.className="status-indicator",hrStatusIndicator.className="status-indicator",cadenceStatusIndicator.className="status-indicator",hamburgerBtn&&menuDropdown?(hamburgerBtn.addEventListener("click",function(){menuDropdown.classList.contains("active")?menuDropdown.classList.remove("active"):menuDropdown.classList.add("active")}),document.addEventListener("click",function(e){e.target.closest(".hamburger-menu")||menuDropdown.classList.remove("active")})):console.error("Hamburger menu elements not found:",{hamburgerBtn:!!hamburgerBtn,menuDropdown:!!menuDropdown}),powerAveragesToggle&&powerAveragesSection){let e=!1;powerAveragesToggle.addEventListener("click",function(){(e=!e)?(powerAveragesSection.style.display="block",powerAveragesToggle.classList.add("active")):(powerAveragesSection.style.display="none",powerAveragesToggle.classList.remove("active")),manageCollapsedSectionsLayout()})}else console.error("Power averages toggle elements not found:",{powerAveragesToggle:!!powerAveragesToggle,powerAveragesSection:!!powerAveragesSection});if(powerMetricToggle&&powerCard){let e=!0;powerMetricToggle.classList.add("active"),powerMetricToggle.addEventListener("click",function(){(e=!e)?(powerCard.style.display="block",powerMetricToggle.classList.add("active")):(powerCard.style.display="none",powerMetricToggle.classList.remove("active"))})}else console.error("Power metric toggle elements not found:",{powerMetricToggle:!!powerMetricToggle,powerCard:!!powerCard});if(heartRateMetricToggle&&heartRateCard){let e=!0;heartRateMetricToggle.classList.add("active"),heartRateMetricToggle.addEventListener("click",function(){(e=!e)?(heartRateCard.style.display="block",heartRateMetricToggle.classList.add("active")):(heartRateCard.style.display="none",heartRateMetricToggle.classList.remove("active"))})}else console.error("Heart rate metric toggle elements not found:",{heartRateMetricToggle:!!heartRateMetricToggle,heartRateCard:!!heartRateCard});if(cadenceMetricToggle&&cadenceCard){let e=!0;cadenceMetricToggle.classList.add("active"),cadenceMetricToggle.addEventListener("click",function(){(e=!e)?(cadenceCard.style.display="block",cadenceMetricToggle.classList.add("active")):(cadenceCard.style.display="none",cadenceMetricToggle.classList.remove("active"))})}else console.error("Cadence metric toggle elements not found:",{cadenceMetricToggle:!!cadenceMetricToggle,cadenceCard:!!cadenceCard});if(connectSectionToggle&&connectSection){let e=!0;connectSectionToggle.classList.add("active"),connectSectionToggle.addEventListener("click",function(){(e=!e)?(connectSection.style.display="block",connectSectionToggle.classList.add("active")):(connectSection.style.display="none",connectSectionToggle.classList.remove("active"))})}else console.error("Connect section toggle elements not found:",{connectSectionToggle:!!connectSectionToggle,connectSection:!!connectSection});if(exportSectionToggle&&exportSection){let e=!1;exportSectionToggle.addEventListener("click",function(){(e=!e)?(exportSection.style.display="block",exportSectionToggle.classList.add("active")):(exportSection.style.display="none",exportSectionToggle.classList.remove("active"))})}else console.error("Export section toggle elements not found:",{exportSectionToggle:!!exportSectionToggle,exportSection:!!exportSection});function updateDashboardLayout(){let e=document.querySelector(".dashboard");powerAveragesSection&&"none"===powerAveragesSection.style.display?e.classList.add("maximized"):e.classList.remove("maximized"),manageCollapsedSectionsLayout()}function manageCollapsedSectionsLayout(){let e=document.querySelector(".dashboard"),t=document.querySelector(".collapsed-sections-row");t&&(t.querySelectorAll(".power-averages-section").forEach(t=>{e.parentNode.insertBefore(t,e.nextSibling)}),t.remove()),e.classList.remove("has-collapsed-sections")}toggleConnectSection.addEventListener("click",()=>{let e=connectSection.querySelectorAll("button:not(.section-toggle-button)"),t=connectSection.querySelector(".section-header");"none"===e[0].style.display?(e.forEach(e=>e.style.display="block"),connectToggleText.textContent="Hide Connect Devices",toggleConnectSection.classList.remove("collapsed"),connectSection.classList.remove("collapsed"),t.classList.remove("collapsed")):(e.forEach(e=>e.style.display="none"),connectToggleText.textContent="Show Connect Devices",toggleConnectSection.classList.add("collapsed"),connectSection.classList.add("collapsed"),t.classList.add("collapsed"))}),toggleExportSection.addEventListener("click",()=>{let e=document.getElementById("export-buttons"),t=exportSection.querySelector(".section-header");"none"===e.style.display?(exportSection.style.display="block",e.style.display="flex",exportToggleText.textContent="Hide Export Data",toggleExportSection.classList.remove("collapsed"),exportSection.classList.remove("collapsed"),t.classList.remove("collapsed")):(e.style.display="none",exportToggleText.textContent="Show Export Data",toggleExportSection.classList.add("collapsed"),exportSection.classList.add("collapsed"),t.classList.add("collapsed"))}),stravaSettingsMenuItem?stravaSettingsMenuItem.addEventListener("click",async()=>{await showStravaConfigDialog(),updateStravaButtonStatus(),menuDropdown.classList.remove("active")}):console.error("Strava settings menu item not found");let connectButtons=connectSection.querySelectorAll("button:not(.section-toggle-button)");connectButtons.forEach(e=>e.style.display="block"),exportSection.style.display="none",powerAveragesSection.style.display="none",updateDashboardLayout();let powerData=[],rawPowerMeasurements=[],lastPowerValue=0,sessionStartTime=null,powerReadings=[],powerAverages={"10s":{current:0,best:0},"30s":{current:0,best:0},"1m":{current:0,best:0},"2m":{current:0,best:0},"4m":{current:0,best:0},"8m":{current:0,best:0}};function addPowerReading(e){let t=Date.now();powerReadings.push({timestamp:t,power:e});let a=t-54e4;powerReadings=powerReadings.filter(e=>e.timestamp>a),calculatePowerAverages(),updatePowerAveragesDisplay()}function calculatePowerAverages(){let e=Date.now();for(let[t,a]of Object.entries({"10s":1e4,"30s":3e4,"1m":6e4,"2m":12e4,"4m":24e4,"8m":48e4})){let n=e-a,o=powerReadings.filter(e=>e.timestamp>=n);if(o.length>0){let e=Math.round(o.reduce((e,t)=>e+t.power,0)/o.length);powerAverages[t].current=e,e>powerAverages[t].best&&(powerAverages[t].best=e)}else powerAverages[t].current=0}}function updatePowerAveragesDisplay(){avg10sCurrentElement.textContent=powerAverages["10s"].current||"--",avg10sBestElement.textContent=powerAverages["10s"].best||"--",avg30sCurrentElement.textContent=powerAverages["30s"].current||"--",avg30sBestElement.textContent=powerAverages["30s"].best||"--",avg1mCurrentElement.textContent=powerAverages["1m"].current||"--",avg1mBestElement.textContent=powerAverages["1m"].best||"--",avg2mCurrentElement.textContent=powerAverages["2m"].current||"--",avg2mBestElement.textContent=powerAverages["2m"].best||"--",avg4mCurrentElement.textContent=powerAverages["4m"].current||"--",avg4mBestElement.textContent=powerAverages["4m"].best||"--",avg8mCurrentElement.textContent=powerAverages["8m"].current||"--",avg8mBestElement.textContent=powerAverages["8m"].best||"--"}function resetPowerAverages(){for(let e of(powerReadings=[],Object.keys(powerAverages)))powerAverages[e].current=0,powerAverages[e].best=0;updatePowerAveragesDisplay()}function resetAllSessionData(){for(let e of(powerData.length=0,heartData.length=0,cadenceData.length=0,rawPowerMeasurements.length=0,powerReadings.length=0,Object.keys(powerAverages)))powerAverages[e].current=0,powerAverages[e].best=0;lastPowerValue=0,lastHeartRateValue=0,lastCadenceValue=0,sessionStartTime=null,updatePowerAveragesDisplay(),powerValueElement.textContent="--",hrValueElement.textContent="--",cadenceValueElement.textContent="--",clearSessionData()}let lastHeartRateValue=0,lastCadenceValue=0,dataLoggerInterval=null,powerMeterDevice=null,CYCLING_POWER_SERVICE_UUID="cycling_power",CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID="cycling_power_measurement",CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID="cycling_power_feature",CYCLING_CADENCE_SERVICE_UUID="cycling_speed_and_cadence",CSC_MEASUREMENT_CHARACTERISTIC_UUID="csc_measurement";function handlePowerMeasurement(e){let t=e.target.value,a={timestamp:Date.now(),flags:t.getUint16(0,!0),rawBytes:Array.from(new Uint8Array(t.buffer)).map(e=>e.toString(16).padStart(2,"0")).join(" "),dataLength:t.byteLength};t.getUint16(0,!0);let n=t.getInt16(2,!0);a.instantaneousPower=n,powerValueElement.textContent=n,lastPowerValue=n,addPowerReading(n),rawPowerMeasurements.push(a)}function parsePowerMeasurement(e){return e.getInt16(2,!0)}function onDisconnected(){statusText.textContent="Device disconnected.",powerStatusIndicator.className="status-indicator",deviceNameElement.textContent="",powerValueElement.textContent="--",resetPowerAverages(),connectButton.disabled=!1,dataLoggerInterval&&(clearInterval(dataLoggerInterval),dataLoggerInterval=null),powerMeterDevice&&(powerMeterDevice.removeEventListener("gattserverdisconnected",onDisconnected),powerMeterDevice=null),lastPowerValue=0}connectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){statusText.textContent="Web Bluetooth API is not available.";return}powerData=[],rawPowerMeasurements=[],lastPowerValue=0,resetPowerAverages(),dataLoggerInterval&&clearInterval(dataLoggerInterval);try{statusText.textContent="Scanning for power meters...",powerStatusIndicator.className="status-indicator connecting",powerMeterDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_POWER_SERVICE_UUID]}]}),statusText.textContent="Connecting to device...",deviceNameElement.textContent=`Device: ${powerMeterDevice.name||"Unknown Device"}`,powerMeterDevice.addEventListener("gattserverdisconnected",onDisconnected);let e=await powerMeterDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_POWER_SERVICE_UUID),a=await t.getCharacteristic("cycling_power_measurement");try{let e=await t.getCharacteristic("cycling_power_feature");await e.readValue()}catch{}await a.startNotifications(),a.addEventListener("characteristicvaluechanged",handlePowerMeasurement),statusText.textContent="Connected and receiving data!",powerStatusIndicator.className="status-indicator connected",connectButton.disabled=!0,sessionStartTime||(sessionStartTime=Date.now()),dataLoggerInterval=setInterval(()=>{powerData.push({timestamp:Date.now(),power:lastPowerValue,heartRate:lastHeartRateValue,cadence:lastCadenceValue}),powerData.length%100==0&&saveSessionData()},100)}catch(e){statusText.textContent=`Error: ${e.message}`,powerStatusIndicator.className="status-indicator",console.error("Connection failed:",e),powerMeterDevice&&powerMeterDevice.removeEventListener("gattserverdisconnected",onDisconnected)}}),exportJsonButton.addEventListener("click",()=>{let e=new Blob([JSON.stringify(powerData,null,2)],{type:"application/json"}),t=URL.createObjectURL(e),a=document.createElement("a");a.href=t;let n=new Date,o=n.getFullYear(),r=String(n.getMonth()+1).padStart(2,"0"),s=String(n.getDate()).padStart(2,"0"),c=`${o}-${r}-${s}`;a.download=`power_data_${c}.json`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(t)}),exportCsvButton.addEventListener("click",()=>{let e="timestamp,power,heartRate,cadence\n";powerData.forEach(t=>{e+=`${t.timestamp},${t.power},${t.heartRate},${t.cadence}
`});let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a;let o=new Date,r=o.getFullYear(),s=String(o.getMonth()+1).padStart(2,"0"),c=String(o.getDate()).padStart(2,"0"),i=`${r}-${s}-${c}`;n.download=`power_data_${i}.csv`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(a)}),exportRawJsonButton.addEventListener("click",()=>{let e=new Blob([JSON.stringify(rawPowerMeasurements,null,2)],{type:"application/json"}),t=URL.createObjectURL(e),a=document.createElement("a");a.href=t;let n=new Date,o=n.getFullYear(),r=String(n.getMonth()+1).padStart(2,"0"),s=String(n.getDate()).padStart(2,"0"),c=`${o}-${r}-${s}`;a.download=`raw_power_measurements_${c}.json`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(t)}),exportRawCsvButton.addEventListener("click",()=>{let e="timestamp,flags,dataLength,instantaneousPower,rawBytes\n";rawPowerMeasurements.forEach(t=>{e+=`${t.timestamp},${t.flags},${t.dataLength},${t.instantaneousPower},"${t.rawBytes}"
`});let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a;let o=new Date,r=o.getFullYear(),s=String(o.getMonth()+1).padStart(2,"0"),c=String(o.getDate()).padStart(2,"0"),i=`${r}-${s}-${c}`;n.download=`raw_power_measurements_${i}.csv`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(a)}),exportTcxButton.addEventListener("click",()=>{try{if(0===powerData.length)return void alert("No power data available to export.");let e=generateTcxString(powerData),t=new Blob([e],{type:"application/xml;charset=utf-8;"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a;let o=new Date,r=o.getFullYear(),s=String(o.getMonth()+1).padStart(2,"0"),c=String(o.getDate()).padStart(2,"0"),i=`${r}-${s}-${c}`;n.download=`power_data_${i}.tcx`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(a)}catch(e){console.error("Error generating TCX:",e),alert(`Error generating TCX file: ${e.message}`)}}),syncToStravaButton.addEventListener("click",async()=>{try{if(0===powerData.length)return void alert("No power data available to sync to Strava.");let e=getStravaAuthFromStorage();if(!e||!e.access_token)return void await initiateStravaAuth();syncToStravaButton.disabled=!0,syncToStravaButton.textContent="Syncing...";let t=generateTcxString(powerData);await uploadToStrava(t,e.access_token),alert("Successfully synced to Strava!")}catch(e){console.error("Error syncing to Strava:",e),alert(`Error syncing to Strava: ${e.message}`)}finally{syncToStravaButton.disabled=!1,updateStravaButtonStatus()}}),clearSessionButton.addEventListener("click",()=>{confirm("Are you sure you want to clear all session data? This action cannot be undone.")&&(resetAllSessionData(),alert("Session data cleared successfully!"))});let heartData=[],cadenceData=[],hrDataLoggerInterval=null,hrConnectButton=document.getElementById("hrConnectButton"),hrStatusText=document.getElementById("hrStatus"),hrValue=document.getElementById("hr-value"),hrDeviceName=document.getElementById("hrDeviceName"),hrBluetoothDevice=null;function handleHeartRateChanged(e){let t=parseHeartRate(e.target.value);hrValue.textContent=t,lastHeartRateValue=t}function parseHeartRate(e){return 1&e.getUint8(0)?e.getUint16(1,!0):e.getUint8(1)}function onDisconnectedHr(){hrStatusText.textContent="Device disconnected.",hrStatusIndicator.className="status-indicator",hrDeviceName.textContent="",hrValue.textContent="--",hrConnectButton.disabled=!1,hrBluetoothDevice=null,lastHeartRateValue=0}hrConnectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){hrStatusText.textContent="Web Bluetooth API is not available.";return}try{hrStatusText.textContent="Scanning for devices...",hrStatusIndicator.className="status-indicator connecting",hrBluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:["heart_rate"]}]}),hrStatusText.textContent="Connecting to device...",hrDeviceName.textContent=`Device: ${hrBluetoothDevice.name}`,hrBluetoothDevice.addEventListener("gattserverdisconnected",onDisconnectedHr);let e=await hrBluetoothDevice.gatt.connect(),t=await e.getPrimaryService("heart_rate"),a=await t.getCharacteristic("heart_rate_measurement");await a.startNotifications(),a.addEventListener("characteristicvaluechanged",handleHeartRateChanged),hrStatusText.textContent="Connected!",hrStatusIndicator.className="status-indicator connected",hrConnectButton.disabled=!0}catch(e){hrStatusText.textContent=`Error: ${e.message}`,hrStatusIndicator.className="status-indicator",console.error("Connection failed:",e)}});let speedCadenceConnectButton=document.getElementById("speedCadenceConnectButton"),cadenceStatusText=document.getElementById("cadenceStatus"),cadenceDeviceName=document.getElementById("cadenceDeviceName"),speedCadenceBluetoothDevice=null;speedCadenceConnectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){cadenceStatusText.textContent="Web Bluetooth API is not available.";return}try{cadenceStatusText.textContent="Scanning for sensors...",cadenceStatusIndicator.className="status-indicator connecting",cadenceResetTimer&&(clearTimeout(cadenceResetTimer),cadenceResetTimer=null),lastCrankRevs=0,lastCrankTime=0,lastCadenceValue=0,speedCadenceBluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_CADENCE_SERVICE_UUID]}]}),cadenceStatusText.textContent="Connecting to device...",cadenceDeviceName.textContent=`Device: ${speedCadenceBluetoothDevice.name}`,speedCadenceBluetoothDevice.addEventListener("gattserverdisconnected",onDisconnectedSpeedCadence);let e=await speedCadenceBluetoothDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID),a=await t.getCharacteristic("csc_measurement");await a.startNotifications(),a.addEventListener("characteristicvaluechanged",handleSpeedCadenceMeasurement),cadenceStatusText.textContent="Connected!",cadenceStatusIndicator.className="status-indicator connected",speedCadenceConnectButton.disabled=!0}catch(e){cadenceStatusText.textContent=`Error: ${e.message}`,cadenceStatusIndicator.className="status-indicator",console.error("Speed/Cadence connection failed:",e)}});let lastCrankRevs=0,lastCrankTime=0,cadenceResetTimer=null;function handleSpeedCadenceMeasurement(e){let t=e.target.value,a=t.getUint8(0),n=1;if(1&a&&(n+=6),2&a){let e=t.getUint16(n,!0),a=t.getUint16(n+2,!0);if(lastCrankRevs>0){let t=e-lastCrankRevs,n=(a-lastCrankTime)/1024;if(n>0){let e=t/n*60;cadenceValueElement.textContent=Math.round(e),lastCadenceValue=Math.round(e),cadenceResetTimer&&clearTimeout(cadenceResetTimer),cadenceResetTimer=setTimeout(()=>{cadenceValueElement.textContent="0",lastCadenceValue=0,cadenceResetTimer=null},3e3)}}lastCrankRevs=e,lastCrankTime=a}}function onDisconnectedSpeedCadence(){cadenceStatusText.textContent="Device disconnected.",cadenceStatusIndicator.className="status-indicator",cadenceDeviceName.textContent="",cadenceValueElement.textContent="--",speedCadenceConnectButton.disabled=!1,speedCadenceBluetoothDevice=null,lastCadenceValue=0,cadenceResetTimer&&(clearTimeout(cadenceResetTimer),cadenceResetTimer=null),lastCrankRevs=0,lastCrankTime=0}function showRestorationDialog(e){return new Promise(t=>{let a=document.createElement("div");a.className="modal-backdrop";let n=document.createElement("div");n.className="modal";let o=Math.round((Date.now()-e.timestamp)/6e4),r=(e.powerData?.length||0)+(e.heartData?.length||0)+(e.cadenceData?.length||0);n.innerHTML=`
            <h3>Previous Session Found</h3>
            <p>
                A previous session was found from ${o} minutes ago with ${r} data points.
            </p>
            <p>
                Would you like to restore this session or start fresh?
            </p>
            <div class="modal-buttons">
                <button id="startFresh" class="modal-button secondary">Start Fresh</button>
                <button id="restoreSession" class="modal-button primary">Restore Session</button>
            </div>
        `,a.appendChild(n),document.body.appendChild(a),n.querySelector("#startFresh").addEventListener("click",()=>{document.body.removeChild(a),localStorage.removeItem(SESSION_STORAGE_KEY),t(!1)}),n.querySelector("#restoreSession").addEventListener("click",()=>{document.body.removeChild(a),t(!0)}),a.addEventListener("click",e=>{e.target===a&&(document.body.removeChild(a),t(!1))})})}function getStravaAuthFromStorage(){try{let e=localStorage.getItem("stravaAuth");if(e){let t=JSON.parse(e);if(t.expires_at&&Date.now()>1e3*t.expires_at)return localStorage.removeItem("stravaAuth"),null;return t}}catch(e){console.error("Error reading Strava auth from storage:",e)}return null}async function initiateStravaAuth(){if(!getStravaClientId()&&!await showStravaConfigDialog())return;let e=getStravaClientId(),t=encodeURIComponent(window.location.origin+window.location.pathname),a=`https://www.strava.com/oauth/authorize?client_id=${e}&response_type=token&redirect_uri=${t}&approval_prompt=force&scope=activity:write`;localStorage.setItem("stravaAuthPending","true"),window.location.href=a}async function uploadToStrava(e,t){try{let a=new FormData,n=new Blob([e],{type:"application/xml"}),o=new Date,r=`power_data_${o.getFullYear()}-${String(o.getMonth()+1).padStart(2,"0")}-${String(o.getDate()).padStart(2,"0")}.tcx`;a.append("file",n,r),a.append("data_type","tcx"),a.append("name",`Power Meter Session - ${o.toLocaleDateString()}`),a.append("description","Cycling session data from Web Bluetooth Power Meter");let s=await fetch("https://www.strava.com/api/v3/uploads",{method:"POST",headers:{Authorization:`Bearer ${t}`},body:a});if(!s.ok){let e=await s.json();throw Error(e.message||"Failed to upload to Strava")}return await s.json()}catch(e){throw console.error("Error uploading to Strava:",e),e}}function updateStravaButtonStatus(){let e=document.getElementById("syncToStravaButton");if(!e)return;let t=getStravaAuthFromStorage();t&&t.access_token?(e.textContent="\uD83D\uDEB4 Sync to Strava",e.title="Connected to Strava - Click to sync your session"):(e.textContent="\uD83D\uDEB4 Connect to Strava",e.title="Click to connect to Strava first")}function checkStravaCallback(){let e=new URLSearchParams(window.location.hash.substring(1)),t=e.get("access_token"),a=e.get("expires_in"),n=e.get("scope");if(t&&localStorage.getItem("stravaAuthPending")){let e={access_token:t,expires_at:Math.floor(Date.now()/1e3)+parseInt(a||"21600"),scope:n};localStorage.setItem("stravaAuth",JSON.stringify(e)),localStorage.removeItem("stravaAuthPending"),alert("Successfully connected to Strava!"),updateStravaButtonStatus(),window.history.replaceState({},document.title,window.location.pathname)}}document.addEventListener("DOMContentLoaded",async function(){let e=loadSessionData();e&&await showRestorationDialog(e)?restoreSessionData(e):sessionStartTime=Date.now(),checkStravaCallback(),updateStravaButtonStatus(),window.addEventListener("beforeunload",function(){powerData.length>0&&saveSessionData()}),setInterval(()=>{powerData.length>0&&saveSessionData()},3e4)});
//# sourceMappingURL=power-saver.de843bf5.js.map
