let wakeLock=null;async function requestWakeLock(){if("wakeLock"in navigator)try{(wakeLock=await navigator.wakeLock.request("screen")).addEventListener("release",()=>{})}catch(e){console.error(`${e.name}, ${e.message}`)}}async function releaseWakeLock(){null!==wakeLock&&(await wakeLock.release(),wakeLock=null)}function createTrackpoint(e){let t={time:e=>`<Time>${new Date(e).toISOString()}</Time>`,heartRate:e=>`
<HeartRateBpm>
  <Value>${e}</Value>
</HeartRateBpm>
            `.trim(),cadence:e=>`<Cadence>${e}</Cadence>`,power:e=>`
<Extensions>
  <ns2:TPX>
    <ns2:Watts>${e}</ns2:Watts>
  </ns2:TPX>
</Extensions>
            `.trim()},a=Object.keys(t).map(a=>void 0===e[a]?"":t[a](e[a])).filter(e=>e).join("\n");return`
<Trackpoint>
  ${a}
</Trackpoint>
`.trim()}function generateTcxString(e){if(!Array.isArray(e)||0===e.length)throw Error("Input power data array is empty or invalid");let t=e.filter(e=>e&&"object"==typeof e&&void 0!==e.timestamp&&!isNaN(new Date(e.timestamp).getTime()));if(0===t.length)throw Error("No valid data points found");let a=t.map(e=>({time:e.timestamp,...void 0!==e.power&&{power:e.power},...void 0!==e.heartRate&&{heartRate:e.heartRate},...void 0!==e.cadence&&{cadence:e.cadence}})).sort((e,t)=>e.time-t.time),n=e=>!e.power||e.power<=0;for(;a.length>0&&n(a[0]);)a.shift();for(;a.length>0&&n(a[a.length-1]);)a.pop();if(0===a.length)throw Error("No valid power data found after processing");let o=a.filter(e=>e.power&&e.power>0).map(e=>parseFloat(e.power)),r=o.length>0?Math.round(o.reduce((e,t)=>e+t,0)/o.length):0,s=o.length>0?Math.max(...o):0,l=a[0].time,c=Math.round((a[a.length-1].time-l)/1e3/60),i="";if(void 0!==powerAverages&&powerAverages){let e=[];powerAverages["10s"]&&powerAverages["10s"].best>0&&e.push(`10s: ${powerAverages["10s"].best}W`),powerAverages["30s"]&&powerAverages["30s"].best>0&&e.push(`30s: ${powerAverages["30s"].best}W`),powerAverages["1m"]&&powerAverages["1m"].best>0&&e.push(`1min: ${powerAverages["1m"].best}W`),powerAverages["2m"]&&powerAverages["2m"].best>0&&e.push(`2min: ${powerAverages["2m"].best}W`),powerAverages["4m"]&&powerAverages["4m"].best>0&&e.push(`4min: ${powerAverages["4m"].best}W`),powerAverages["8m"]&&powerAverages["8m"].best>0&&e.push(`8min: ${powerAverages["8m"].best}W`),e.length>0&&(i=`

Best Power Averages: ${e.join(", ")}`)}let d=`Indoor cycling session recorded with Power Saver app.
Session Stats: Duration: ${c} min, Avg Power: ${r}W, Max Power: ${s}W`+i,m=a.map(createTrackpoint).join("\n"),g=new Date(l).toISOString();return`<?xml version="1.0" encoding="UTF-8"?>
<TrainingCenterDatabase
  xmlns="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd"
  xmlns:ns2="http://www.garmin.com/xmlschemas/ActivityExtension/v2">
  <Activities>
    <Activity Sport="Biking">
      <Id>${g}</Id>
      <Name>E Bike Indoor Cycling Trainer</Name>
      <Notes>${d.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}</Notes>
      <Lap StartTime="${g}">
        <Track>
        ${m}
        </Track>
      </Lap>
    </Activity>
  </Activities>
</TrainingCenterDatabase>`}async function generateSummaryImage(){let e=document.createElement("canvas"),t=e.getContext("2d"),a=200;Object.values(powerAverages).some(e=>e.current>0||e.best>0)&&(a+=200),powerData.length>0&&(a+=350),heartData.length>0&&(a+=350),cadenceData.length>0&&(a+=350);let n=Math.max(600,a);e.width=1200,e.height=n,t.fillStyle="#1a1a2e",t.fillRect(0,0,1200,n),t.fillStyle="#ffffff",t.font="bold 36px Arial, sans-serif",t.textAlign="center",t.fillText("Power Meter Summary",600,50),t.font="18px Arial, sans-serif",t.fillStyle="#cccccc";let o=new Date;if(t.fillText(o.toLocaleDateString()+" "+o.toLocaleTimeString(),600,80),powerData.length>0){let e=Math.round(Math.round((powerData[powerData.length-1].timestamp-powerData[0].timestamp)/1e3)/60);t.fillText(`Session Duration: ${e} minutes`,600,105)}let r=130;if(Object.values(powerAverages).some(e=>e.current>0||e.best>0)){t.fillStyle="#ffffff",t.font="bold 24px Arial, sans-serif",t.textAlign="left",t.fillText("Power Averages",50,r),r+=40;let e=[{label:"10s",data:powerAverages["10s"]},{label:"30s",data:powerAverages["30s"]},{label:"1m",data:powerAverages["1m"]},{label:"2m",data:powerAverages["2m"]},{label:"4m",data:powerAverages["4m"]},{label:"8m",data:powerAverages["8m"]}];t.font="16px Arial, sans-serif",t.fillStyle="#cccccc",t.fillText("Duration",70,r),t.fillText("Best",220,r),t.fillText("Duration",470,r),t.fillText("Best",620,r),r+=30;for(let a=0;a<e.length;a++){let n=e[a],o=a<3?70:470,s=r+25*(a<3?a:a-3);t.fillStyle="#ffffff",t.fillText(n.label,o,s),t.fillStyle=n.data.best>0?"#e74c3c":"#666666",t.fillText(n.data.best+"W",o+150,s)}r+=100}return powerData.length>0||heartData.length>0||cadenceData.length>0?(powerData.length>0&&(r+=20,t.fillStyle="#ffffff",t.font="bold 20px Arial, sans-serif",t.fillText("Power Timeline",50,r),r+=30,drawTimelineChart(t,powerData,"power",50,r,1100,300,"#3498db","W"),r+=350),heartData.length>0&&(t.fillStyle="#ffffff",t.font="bold 20px Arial, sans-serif",t.fillText("Heart Rate Timeline",50,r),drawTimelineChart(t,heartData,"heartRate",50,r+=30,1100,300,"#e74c3c","BPM"),r+=350),cadenceData.length>0&&(t.fillStyle="#ffffff",t.font="bold 20px Arial, sans-serif",t.fillText("Cadence Timeline",50,r),drawTimelineChart(t,cadenceData,"cadence",50,r+=30,1100,300,"#f39c12","RPM"),r+=350),e):(t.fillStyle="#cccccc",t.font="24px Arial, sans-serif",t.textAlign="center",t.fillText("No data recorded yet",600,n/2),t.font="16px Arial, sans-serif",t.fillText("Start recording to see your activity summary",600,n/2+40),e)}function drawTimelineChart(e,t,a,n,o,r,s,l,c){if(0===t.length)return;e.fillStyle="rgba(255, 255, 255, 0.05)",e.fillRect(n,o,r,s),e.strokeStyle="rgba(255, 255, 255, 0.2)",e.lineWidth=1,e.strokeRect(n,o,r,s);let i=t.map(e=>e[a]).filter(e=>e>0);if(0===i.length)return;let d=Math.min(...i),m=Math.max(...i),g=m-d||1;e.fillStyle="#cccccc",e.font="12px Arial, sans-serif",e.textAlign="right";for(let t=0;t<=4;t++){let a=Math.round(d+g*t/4),r=o+s-s*t/4;e.fillText(a+c,n-10,r+4)}e.strokeStyle=l,e.lineWidth=2,e.beginPath();let u=!0;for(let l=0;l<t.length;l++){let c=t[l][a];if(c>0){let a=n+l/(t.length-1)*r,i=o+s-(c-d)/g*s;u?(e.moveTo(a,i),u=!1):e.lineTo(a,i)}}e.stroke(),e.fillStyle=l;for(let l=0;l<t.length;l+=Math.max(1,Math.floor(t.length/50))){let c=t[l][a];if(c>0){let a=n+l/(t.length-1)*r,i=o+s-(c-d)/g*s;e.beginPath(),e.arc(a,i,3,0,2*Math.PI),e.fill()}}e.strokeStyle="rgba(255, 255, 255, 0.1)",e.lineWidth=1;for(let t=1;t<4;t++){let a=o+s*t/4;e.beginPath(),e.moveTo(n,a),e.lineTo(n+r,a),e.stroke()}if(t.length>1){e.fillStyle="#cccccc",e.font="12px Arial, sans-serif",e.textAlign="center";let a=new Date(t[0].timestamp),l=new Date(t[t.length-1].timestamp);if(e.fillText(a.toLocaleTimeString(),n,o+s+20),e.fillText(l.toLocaleTimeString(),n+r,o+s+20),t.length>10){let a=new Date(t[Math.floor(t.length/2)].timestamp);e.fillText(a.toLocaleTimeString(),n+r/2,o+s+20)}}e.fillStyle="#ffffff",e.font="12px Arial, sans-serif",e.textAlign="left",e.fillText(`Max: ${m}${c}`,n+10,o+20),e.fillText(`Min: ${d}${c}`,n+10,o+35),e.fillText(`Avg: ${Math.round(i.reduce((e,t)=>e+t,0)/i.length)}${c}`,n+10,o+50)}let SESSION_STORAGE_KEY="powerMeterSession",SESSION_TIMEOUT=864e5;function saveSessionData(){try{let e={timestamp:Date.now(),powerData:powerData,heartData:heartData,cadenceData:cadenceData,rawPowerMeasurements:rawPowerMeasurements,powerReadings:powerReadings,powerAverages:powerAverages,lastPowerValue:lastPowerValue,lastHeartRateValue:lastHeartRateValue,lastCadenceValue:lastCadenceValue,sessionStartTime:sessionStartTime};localStorage.setItem(SESSION_STORAGE_KEY,JSON.stringify(e))}catch(e){console.warn("Failed to save session data:",e)}}function loadSessionData(){try{let e=localStorage.getItem(SESSION_STORAGE_KEY);if(!e)return null;let t=JSON.parse(e);if(Date.now()-t.timestamp>864e5)return localStorage.removeItem(SESSION_STORAGE_KEY),null;return t}catch(e){return console.warn("Failed to load session data:",e),localStorage.removeItem(SESSION_STORAGE_KEY),null}}function restoreSessionData(e){try{return e.powerData&&(powerData.length=0,powerData.push(...e.powerData)),e.heartData&&(heartData.length=0,heartData.push(...e.heartData)),e.cadenceData&&(cadenceData.length=0,cadenceData.push(...e.cadenceData)),e.rawPowerMeasurements&&(rawPowerMeasurements.length=0,rawPowerMeasurements.push(...e.rawPowerMeasurements)),e.powerReadings&&(powerReadings.length=0,powerReadings.push(...e.powerReadings)),e.powerAverages&&Object.assign(powerAverages,e.powerAverages),void 0!==e.lastPowerValue&&(lastPowerValue=e.lastPowerValue),void 0!==e.lastHeartRateValue&&(lastHeartRateValue=e.lastHeartRateValue),void 0!==e.lastCadenceValue&&(lastCadenceValue=e.lastCadenceValue),void 0!==e.sessionStartTime&&(sessionStartTime=e.sessionStartTime),updateDisplaysFromRestoredData(),!0}catch(e){return console.warn("Failed to restore session data:",e),!1}}function updateDisplaysFromRestoredData(){powerValueElement.textContent=lastPowerValue||"--",hrValueElement.textContent=lastHeartRateValue||"--",cadenceValueElement.textContent=lastCadenceValue||"--",updatePowerAveragesDisplay(),powerData.length>0&&showSessionRestoredNotification()}function showSessionRestoredNotification(){let e=document.createElement("div");e.style.cssText=`
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        z-index: 1000;
        font-size: 0.9rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease-out;
    `,e.textContent=`Session restored! ${powerData.length} data points recovered.`;let t=document.createElement("style");t.textContent=`
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `,document.head.appendChild(t),document.body.appendChild(e),setTimeout(()=>{e.style.animation="slideIn 0.3s ease-out reverse",setTimeout(()=>{e.parentNode&&e.parentNode.removeChild(e),t.parentNode&&t.parentNode.removeChild(t)},300)},5e3)}function clearSessionData(){localStorage.removeItem(SESSION_STORAGE_KEY)}let connectButton=document.getElementById("connectButton"),statusText=document.getElementById("status"),powerValueElement=document.getElementById("power-value"),hrValueElement=document.getElementById("hr-value"),cadenceValueElement=document.getElementById("cadence-value"),deviceNameElement=document.getElementById("device-name"),exportJsonButton=document.getElementById("exportJsonButton"),exportCsvButton=document.getElementById("exportCsvButton"),exportTcxButton=document.getElementById("exportTcxButton"),exportRawJsonButton=document.getElementById("exportRawJsonButton"),exportRawCsvButton=document.getElementById("exportRawCsvButton"),exportImageButton=document.getElementById("exportImageButton"),clearSessionButton=document.getElementById("clearSessionButton"),avg10sCurrentElement=document.getElementById("avg10s-current"),avg10sBestElement=document.getElementById("avg10s-best"),avg30sCurrentElement=document.getElementById("avg30s-current"),avg30sBestElement=document.getElementById("avg30s-best"),avg1mCurrentElement=document.getElementById("avg1m-current"),avg1mBestElement=document.getElementById("avg1m-best"),avg2mCurrentElement=document.getElementById("avg2m-current"),avg2mBestElement=document.getElementById("avg2m-best"),avg4mCurrentElement=document.getElementById("avg4m-current"),avg4mBestElement=document.getElementById("avg4m-best"),avg8mCurrentElement=document.getElementById("avg8m-current"),avg8mBestElement=document.getElementById("avg8m-best"),toggleConnectSection=document.getElementById("toggleConnectSection"),toggleExportSection=document.getElementById("toggleExportSection"),connectSection=document.getElementById("connectSection"),exportSection=document.getElementById("exportSection"),powerAveragesSection=document.getElementById("powerAveragesSection"),connectToggleText=document.getElementById("connectToggleText"),exportToggleText=document.getElementById("exportToggleText"),hamburgerBtn=document.getElementById("hamburgerButton"),menuDropdown=document.getElementById("menuDropdown"),powerAveragesToggle=document.getElementById("powerAveragesToggle"),powerMetricToggle=document.getElementById("powerMetricToggle"),heartRateMetricToggle=document.getElementById("heartRateMetricToggle"),cadenceMetricToggle=document.getElementById("cadenceMetricToggle"),connectSectionToggle=document.getElementById("connectSectionToggle"),exportSectionToggle=document.getElementById("exportSectionToggle"),loadDebugDataMenuItem=document.getElementById("loadDebugDataMenuItem"),showInfoMenuItem=document.getElementById("showInfoMenuItem"),showQrCodeMenuItem=document.getElementById("showQrCodeMenuItem"),powerCard=document.querySelector(".power-card"),heartRateCard=document.querySelector(".hr-card"),cadenceCard=document.querySelector(".cadence-card"),powerStatusIndicator=document.getElementById("power-status-indicator"),hrStatusIndicator=document.getElementById("hr-status-indicator"),cadenceStatusIndicator=document.getElementById("cadence-status-indicator");if(powerStatusIndicator.className="status-indicator",hrStatusIndicator.className="status-indicator",cadenceStatusIndicator.className="status-indicator",hamburgerBtn&&menuDropdown?(hamburgerBtn.addEventListener("click",function(){menuDropdown.classList.contains("active")?menuDropdown.classList.remove("active"):menuDropdown.classList.add("active")}),document.addEventListener("click",function(e){e.target.closest(".hamburger-menu")||menuDropdown.classList.remove("active")})):console.error("Hamburger menu elements not found:",{hamburgerBtn:!!hamburgerBtn,menuDropdown:!!menuDropdown}),powerAveragesToggle&&powerAveragesSection){let e=!1;powerAveragesToggle.addEventListener("click",function(){(e=!e)?(powerAveragesSection.style.display="block",powerAveragesToggle.classList.add("active")):(powerAveragesSection.style.display="none",powerAveragesToggle.classList.remove("active")),manageCollapsedSectionsLayout()})}else console.error("Power averages toggle elements not found:",{powerAveragesToggle:!!powerAveragesToggle,powerAveragesSection:!!powerAveragesSection});if(powerMetricToggle&&powerCard){let e=!0;powerMetricToggle.classList.add("active"),powerMetricToggle.addEventListener("click",function(){(e=!e)?(powerCard.style.display="block",powerMetricToggle.classList.add("active")):(powerCard.style.display="none",powerMetricToggle.classList.remove("active"))})}else console.error("Power metric toggle elements not found:",{powerMetricToggle:!!powerMetricToggle,powerCard:!!powerCard});if(heartRateMetricToggle&&heartRateCard){let e=!0;heartRateMetricToggle.classList.add("active"),heartRateMetricToggle.addEventListener("click",function(){(e=!e)?(heartRateCard.style.display="block",heartRateMetricToggle.classList.add("active")):(heartRateCard.style.display="none",heartRateMetricToggle.classList.remove("active"))})}else console.error("Heart rate metric toggle elements not found:",{heartRateMetricToggle:!!heartRateMetricToggle,heartRateCard:!!heartRateCard});if(cadenceMetricToggle&&cadenceCard){let e=!0;cadenceMetricToggle.classList.add("active"),cadenceMetricToggle.addEventListener("click",function(){(e=!e)?(cadenceCard.style.display="block",cadenceMetricToggle.classList.add("active")):(cadenceCard.style.display="none",cadenceMetricToggle.classList.remove("active"))})}else console.error("Cadence metric toggle elements not found:",{cadenceMetricToggle:!!cadenceMetricToggle,cadenceCard:!!cadenceCard});if(connectSectionToggle&&connectSection){let e=!0;connectSectionToggle.classList.add("active"),connectSectionToggle.addEventListener("click",function(){(e=!e)?(connectSection.style.display="block",connectSectionToggle.classList.add("active")):(connectSection.style.display="none",connectSectionToggle.classList.remove("active"))})}else console.error("Connect section toggle elements not found:",{connectSectionToggle:!!connectSectionToggle,connectSection:!!connectSection});if(exportSectionToggle&&exportSection){let e=!1;exportSectionToggle.addEventListener("click",function(){(e=!e)?(exportSection.style.display="block",exportSectionToggle.classList.add("active")):(exportSection.style.display="none",exportSectionToggle.classList.remove("active"))})}else console.error("Export section toggle elements not found:",{exportSectionToggle:!!exportSectionToggle,exportSection:!!exportSection});function updateDashboardLayout(){let e=document.querySelector(".dashboard");powerAveragesSection&&"none"===powerAveragesSection.style.display?e.classList.add("maximized"):e.classList.remove("maximized"),manageCollapsedSectionsLayout()}function manageCollapsedSectionsLayout(){let e=document.querySelector(".dashboard"),t=document.querySelector(".collapsed-sections-row");t&&(t.querySelectorAll(".power-averages-section").forEach(t=>{e.parentNode.insertBefore(t,e.nextSibling)}),t.remove()),e.classList.remove("has-collapsed-sections")}loadDebugDataMenuItem?loadDebugDataMenuItem.addEventListener("click",function(){loadDebugData(),menuDropdown&&menuDropdown.classList.remove("active")}):console.error("Load debug data menu item not found"),showInfoMenuItem?showInfoMenuItem.addEventListener("click",function(){showAppInfo(),menuDropdown&&menuDropdown.classList.remove("active")}):console.error("Show info menu item not found"),showQrCodeMenuItem?showQrCodeMenuItem.addEventListener("click",function(){showQrCodeModal(),menuDropdown&&menuDropdown.classList.remove("active")}):console.error("Show QR code menu item not found"),toggleConnectSection.addEventListener("click",()=>{let e=connectSection.querySelectorAll("button:not(.section-toggle-button)"),t=connectSection.querySelector(".section-header");"none"===e[0].style.display?(e.forEach(e=>e.style.display="block"),connectToggleText.textContent="Hide Connect Devices",toggleConnectSection.classList.remove("collapsed"),connectSection.classList.remove("collapsed"),t.classList.remove("collapsed")):(e.forEach(e=>e.style.display="none"),connectToggleText.textContent="Show Connect Devices",toggleConnectSection.classList.add("collapsed"),connectSection.classList.add("collapsed"),t.classList.add("collapsed"))}),toggleExportSection.addEventListener("click",()=>{let e=document.getElementById("export-buttons"),t=exportSection.querySelector(".section-header");"none"===e.style.display?(exportSection.style.display="block",e.style.display="flex",exportToggleText.textContent="Hide Export Data",toggleExportSection.classList.remove("collapsed"),exportSection.classList.remove("collapsed"),t.classList.remove("collapsed")):(e.style.display="none",exportToggleText.textContent="Show Export Data",toggleExportSection.classList.add("collapsed"),exportSection.classList.add("collapsed"),t.classList.add("collapsed"))});let connectButtons=connectSection.querySelectorAll("button:not(.section-toggle-button)");connectButtons.forEach(e=>e.style.display="block"),exportSection.style.display="none",powerAveragesSection.style.display="none",updateDashboardLayout();let powerData=[],rawPowerMeasurements=[],lastPowerValue=0,sessionStartTime=null,powerReadings=[],powerAverages={"10s":{current:0,best:0},"30s":{current:0,best:0},"1m":{current:0,best:0},"2m":{current:0,best:0},"4m":{current:0,best:0},"8m":{current:0,best:0}};function addPowerReading(e){let t=Date.now();powerReadings.push({timestamp:t,power:e});let a=t-54e4;powerReadings=powerReadings.filter(e=>e.timestamp>a),calculatePowerAverages(),updatePowerAveragesDisplay()}function calculatePowerAverages(){let e=Date.now();for(let[t,a]of Object.entries({"10s":1e4,"30s":3e4,"1m":6e4,"2m":12e4,"4m":24e4,"8m":48e4})){let n=e-a,o=powerReadings.filter(e=>e.timestamp>=n);if(o.length>0){let e=Math.round(o.reduce((e,t)=>e+t.power,0)/o.length);powerAverages[t].current=e,e>powerAverages[t].best&&(powerAverages[t].best=e)}else powerAverages[t].current=0}}function updatePowerAveragesDisplay(){avg10sCurrentElement.textContent=powerAverages["10s"].current||"--",avg10sBestElement.textContent=powerAverages["10s"].best||"--",avg30sCurrentElement.textContent=powerAverages["30s"].current||"--",avg30sBestElement.textContent=powerAverages["30s"].best||"--",avg1mCurrentElement.textContent=powerAverages["1m"].current||"--",avg1mBestElement.textContent=powerAverages["1m"].best||"--",avg2mCurrentElement.textContent=powerAverages["2m"].current||"--",avg2mBestElement.textContent=powerAverages["2m"].best||"--",avg4mCurrentElement.textContent=powerAverages["4m"].current||"--",avg4mBestElement.textContent=powerAverages["4m"].best||"--",avg8mCurrentElement.textContent=powerAverages["8m"].current||"--",avg8mBestElement.textContent=powerAverages["8m"].best||"--"}function resetPowerAverages(){for(let e of(powerReadings=[],Object.keys(powerAverages)))powerAverages[e].current=0,powerAverages[e].best=0;updatePowerAveragesDisplay()}function resetAllSessionData(){for(let e of(powerData.length=0,heartData.length=0,cadenceData.length=0,rawPowerMeasurements.length=0,powerReadings.length=0,Object.keys(powerAverages)))powerAverages[e].current=0,powerAverages[e].best=0;lastPowerValue=0,lastHeartRateValue=0,lastCadenceValue=0,sessionStartTime=null,updatePowerAveragesDisplay(),powerValueElement.textContent="--",hrValueElement.textContent="--",cadenceValueElement.textContent="--",clearSessionData()}function loadDebugData(){console.log("Loading debug data..."),resetAllSessionData(),sessionStartTime=Date.now()-36e5;for(let e=0;e<1e3;e++){let t=sessionStartTime+3600*e,a=Math.max(0,Math.round(250+150*Math.sin(e/100)+(Math.random()-.5)*50)),n=Math.max(60,Math.min(200,Math.round(150+30*Math.sin(e/150)+(Math.random()-.5)*10))),o=Math.max(0,Math.round(90+20*Math.sin(e/80)+(Math.random()-.5)*8));powerData.push({timestamp:t,power:a,heartRate:n,cadence:o}),heartData.push({timestamp:t,heartRate:n}),cadenceData.push({timestamp:t,cadence:o}),powerReadings.push({timestamp:t,power:a}),rawPowerMeasurements.push({timestamp:t,flags:0,rawBytes:"00 00 "+a.toString(16).padStart(4,"0"),dataLength:4,instantaneousPower:a})}let e=powerData[powerData.length-1];lastPowerValue=e.power,lastHeartRateValue=e.heartRate,lastCadenceValue=e.cadence,calculateAllPowerAverages(),powerValueElement.textContent=lastPowerValue,hrValueElement.textContent=lastHeartRateValue,cadenceValueElement.textContent=lastCadenceValue,updatePowerAveragesDisplay(),saveSessionData(),alert(`Debug data loaded successfully!
1000 data points generated over 1 hour.
Power: ${lastPowerValue}W, HR: ${lastHeartRateValue}BPM, Cadence: ${lastCadenceValue}RPM`),console.log("Debug data loaded:",{powerDataPoints:powerData.length,heartDataPoints:heartData.length,cadenceDataPoints:cadenceData.length})}function calculateAllPowerAverages(){let e=Date.now();for(let[t,a]of Object.entries({"10s":1e4,"30s":3e4,"1m":6e4,"2m":12e4,"4m":24e4,"8m":48e4})){let n=e-a,o=powerReadings.filter(e=>e.timestamp>=n);if(o.length>0){let e=Math.round(o.reduce((e,t)=>e+t.power,0)/o.length);powerAverages[t].current=e,e>powerAverages[t].best&&(powerAverages[t].best=e)}}}function showAppInfo(){let e=document.createElement("div");e.className="modal-backdrop",e.style.cssText=`
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;let t=document.createElement("div");t.className="modal",t.style.cssText=`
        background: #1a1a2e;
        border-radius: 12px;
        padding: 2rem;
        max-width: 600px;
        max-height: 80vh;
        overflow-y: auto;
        margin: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    `,t.innerHTML=`
        <div style="text-align: center; margin-bottom: 1.5rem;">
            <h2 style="color: #3498db; margin: 0 0 0.5rem 0; font-size: 1.8rem;">\u{1F6B4} Web Bluetooth Power Meter</h2>
            <p style="color: #cccccc; margin: 0; font-size: 1rem;">Real-time cycling data analysis</p>
        </div>

        <div style="color: #ffffff; line-height: 1.6;">
            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{1F4F1} What is this app?</h3>
            <p style="margin-bottom: 1rem;">
                This is a web-based power meter application that connects to Bluetooth cycling devices 
                to provide real-time power, heart rate, and cadence data analysis. Perfect for indoor 
                training, data logging, and performance tracking.
            </p>

            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{1F517} How to connect devices:</h3>
            <ol style="margin-bottom: 1rem; padding-left: 1.5rem;">
                <li><strong>Power Meter:</strong> Click "Connect Power Meter" and select your cycling power device</li>
                <li><strong>Heart Rate:</strong> Click "Connect Heart Rate" to pair your HR monitor</li>
                <li><strong>Cadence:</strong> Click "Connect Cadence" for speed/cadence sensors</li>
            </ol>

            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{1F4CA} Features:</h3>
            <ul style="margin-bottom: 1rem; padding-left: 1.5rem;">
                <li><strong>Real-time Metrics:</strong> Live power, heart rate, and cadence display</li>
                <li><strong>Power Averages:</strong> 10s, 30s, 1m, 2m, 4m, and 8m rolling averages</li>
                <li><strong>Data Export:</strong> JSON, CSV, TCX, and visual summary image formats</li>
                <li><strong>Session Persistence:</strong> Data automatically saved and restored</li>
                <li><strong>Custom Dashboard:</strong> Toggle metrics and sections via hamburger menu</li>
            </ul>

            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{2699}\u{FE0F} Using the hamburger menu:</h3>
            <ul style="margin-bottom: 1rem; padding-left: 1.5rem;">
                <li><strong>Toggle Sections:</strong> Show/hide different parts of the interface</li>
                <li><strong>Load Debug Data:</strong> Generate 1000 test data points for testing</li>
                <li><strong>Customize View:</strong> Control which metrics are visible</li>
            </ul>

            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{1F310} Browser Support:</h3>
            <p style="margin-bottom: 1rem;">
                Requires a browser with Web Bluetooth support:
                <br>\u{2022} Chrome 56+ \u{2022} Edge 79+ \u{2022} Opera 43+
            </p>

            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{1F4A1} Tips:</h3>
            <ul style="margin-bottom: 1.5rem; padding-left: 1.5rem;">
                <li>Make sure your devices are in pairing mode before connecting</li>
                <li>Data is automatically saved to your browser's local storage</li>
                <li>Use the export functions to save your workout data</li>
                <li>The app works offline once loaded</li>
            </ul>
        </div>

        <div style="text-align: center; margin-top: 2rem;">
            <button id="closeInfoModal" style="
                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
            ">Got it!</button>
        </div>
    `,e.appendChild(t),document.body.appendChild(e);let a=t.querySelector("#closeInfoModal"),n=()=>{document.body.removeChild(e)};a.addEventListener("click",n),e.addEventListener("click",t=>{t.target===e&&n()});let o=e=>{"Escape"===e.key&&(n(),document.removeEventListener("keydown",o))};document.addEventListener("keydown",o),a.addEventListener("mouseenter",()=>{a.style.transform="translateY(-2px)",a.style.boxShadow="0 8px 24px rgba(52, 152, 219, 0.4)"}),a.addEventListener("mouseleave",()=>{a.style.transform="translateY(0)",a.style.boxShadow="none"})}function showQrCodeModal(){let e="https://colscoding.github.io/power-saver/",t=document.createElement("div");t.className="modal-backdrop",t.style.cssText=`
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;let a=document.createElement("div");a.className="modal",a.style.cssText=`
        background: #1a1a2e;
        border-radius: 12px;
        padding: 2rem;
        max-width: 400px;
        max-height: 80vh;
        overflow-y: auto;
        margin: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        text-align: center;
    `;let n=document.createElement("canvas");n.width=256,n.height=256,n.style.cssText=`
        background: white;
        border-radius: 8px;
        margin: 1rem 0;
        max-width: 100%;
        height: auto;
    `,generateQRCode(n,e),a.innerHTML=`
        <div style="margin-bottom: 1.5rem;">
            <h2 style="color: #9b59b6; margin: 0 0 0.5rem 0; font-size: 1.8rem;">\u{1F4F1} Share Power Meter App</h2>
            <p style="color: #cccccc; margin: 0; font-size: 1rem;">Scan to access the app on any device</p>
        </div>
        
        <div id="qr-container" style="margin: 1.5rem 0;"></div>
        
        <div style="margin: 1.5rem 0;">
            <p style="color: #ffffff; margin: 0 0 0.5rem 0; font-weight: 600;">Or visit directly:</p>
            <a href="${e}" target="_blank" style="
                color: #9b59b6; 
                text-decoration: none; 
                font-size: 0.9rem;
                word-break: break-all;
                line-height: 1.4;
            ">${e}</a>
        </div>

        <div style="text-align: center; margin-top: 2rem;">
            <button id="closeQrModal" style="
                background: linear-gradient(135deg, #9b59b6 0%, #8e44ad 100%);
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
            ">Close</button>
        </div>
    `,a.querySelector("#qr-container").appendChild(n),t.appendChild(a),document.body.appendChild(t);let o=a.querySelector("#closeQrModal"),r=()=>{document.body.removeChild(t)};o.addEventListener("click",r),t.addEventListener("click",e=>{e.target===t&&r()});let s=e=>{"Escape"===e.key&&(r(),document.removeEventListener("keydown",s))};document.addEventListener("keydown",s),o.addEventListener("mouseenter",()=>{o.style.transform="translateY(-2px)",o.style.boxShadow="0 8px 24px rgba(155, 89, 182, 0.4)"}),o.addEventListener("mouseleave",()=>{o.style.transform="translateY(0)",o.style.boxShadow="none"})}function generateQRCode(e,t){let a=e.getContext("2d"),n=e.width;a.fillStyle="#ffffff",a.fillRect(0,0,n,n);let o=`https://api.qrserver.com/v1/create-qr-code/?size=${n}x${n}&data=${encodeURIComponent(t)}`,r=new Image;r.crossOrigin="anonymous",r.onload=function(){a.drawImage(r,0,0,n,n)},r.onerror=function(){drawFallbackQR(a,n)},r.src=o}function drawFallbackQR(e,t){e.fillStyle="#000000",e.font="12px Arial",e.textAlign="center";let a=t/25;for(let t=0;t<25;t++)for(let n=0;n<25;n++)((t+n)%3==0||0===t||24===t||0===n||24===n)&&e.fillRect(t*a,n*a,a,a);e.fillStyle="#ffffff",e.fillRect(.2*t,.4*t,.6*t,.2*t),e.fillStyle="#000000",e.fillText("QR Code",t/2,t/2-10),e.fillText("Unavailable",t/2,t/2+10)}let lastHeartRateValue=0,lastCadenceValue=0,dataLoggerInterval=null,powerMeterDevice=null,CYCLING_POWER_SERVICE_UUID="cycling_power",CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID="cycling_power_measurement",CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID="cycling_power_feature",CYCLING_CADENCE_SERVICE_UUID="cycling_speed_and_cadence",CSC_MEASUREMENT_CHARACTERISTIC_UUID="csc_measurement";function handlePowerMeasurement(e){let t=e.target.value,a={timestamp:Date.now(),flags:t.getUint16(0,!0),rawBytes:Array.from(new Uint8Array(t.buffer)).map(e=>e.toString(16).padStart(2,"0")).join(" "),dataLength:t.byteLength};t.getUint16(0,!0);let n=t.getInt16(2,!0);a.instantaneousPower=n,powerValueElement.textContent=n,lastPowerValue=n,addPowerReading(n),rawPowerMeasurements.push(a)}function parsePowerMeasurement(e){return e.getInt16(2,!0)}function onDisconnected(){statusText.textContent="Device disconnected.",powerStatusIndicator.className="status-indicator",deviceNameElement.textContent="",powerValueElement.textContent="--",resetPowerAverages(),connectButton.disabled=!1,dataLoggerInterval&&(clearInterval(dataLoggerInterval),dataLoggerInterval=null),powerMeterDevice&&(powerMeterDevice.removeEventListener("gattserverdisconnected",onDisconnected),powerMeterDevice=null),lastPowerValue=0}connectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){statusText.textContent="Web Bluetooth API is not available.";return}powerData=[],rawPowerMeasurements=[],lastPowerValue=0,resetPowerAverages(),dataLoggerInterval&&clearInterval(dataLoggerInterval);try{statusText.textContent="Scanning for power meters...",powerStatusIndicator.className="status-indicator connecting",powerMeterDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_POWER_SERVICE_UUID]}]}),statusText.textContent="Connecting to device...",deviceNameElement.textContent=`Device: ${powerMeterDevice.name||"Unknown Device"}`,powerMeterDevice.addEventListener("gattserverdisconnected",onDisconnected);let e=await powerMeterDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_POWER_SERVICE_UUID),a=await t.getCharacteristic("cycling_power_measurement");try{let e=await t.getCharacteristic("cycling_power_feature");await e.readValue()}catch{}await a.startNotifications(),a.addEventListener("characteristicvaluechanged",handlePowerMeasurement),statusText.textContent="Connected and receiving data!",powerStatusIndicator.className="status-indicator connected",connectButton.disabled=!0,sessionStartTime||(sessionStartTime=Date.now()),dataLoggerInterval=setInterval(()=>{powerData.push({timestamp:Date.now(),power:lastPowerValue,heartRate:lastHeartRateValue,cadence:lastCadenceValue}),powerData.length%100==0&&saveSessionData()},100)}catch(e){statusText.textContent=`Error: ${e.message}`,powerStatusIndicator.className="status-indicator",console.error("Connection failed:",e),powerMeterDevice&&powerMeterDevice.removeEventListener("gattserverdisconnected",onDisconnected)}}),exportJsonButton.addEventListener("click",()=>{let e=new Blob([JSON.stringify(powerData,null,2)],{type:"application/json"}),t=URL.createObjectURL(e),a=document.createElement("a");a.href=t;let n=new Date,o=n.getFullYear(),r=String(n.getMonth()+1).padStart(2,"0"),s=String(n.getDate()).padStart(2,"0"),l=`${o}-${r}-${s}`;a.download=`power_data_${l}.json`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(t)}),exportCsvButton.addEventListener("click",()=>{let e="timestamp,power,heartRate,cadence\n";powerData.forEach(t=>{e+=`${t.timestamp},${t.power},${t.heartRate},${t.cadence}
`});let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a;let o=new Date,r=o.getFullYear(),s=String(o.getMonth()+1).padStart(2,"0"),l=String(o.getDate()).padStart(2,"0"),c=`${r}-${s}-${l}`;n.download=`power_data_${c}.csv`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(a)}),exportRawJsonButton.addEventListener("click",()=>{let e=new Blob([JSON.stringify(rawPowerMeasurements,null,2)],{type:"application/json"}),t=URL.createObjectURL(e),a=document.createElement("a");a.href=t;let n=new Date,o=n.getFullYear(),r=String(n.getMonth()+1).padStart(2,"0"),s=String(n.getDate()).padStart(2,"0"),l=`${o}-${r}-${s}`;a.download=`raw_power_measurements_${l}.json`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(t)}),exportRawCsvButton.addEventListener("click",()=>{let e="timestamp,flags,dataLength,instantaneousPower,rawBytes\n";rawPowerMeasurements.forEach(t=>{e+=`${t.timestamp},${t.flags},${t.dataLength},${t.instantaneousPower},"${t.rawBytes}"
`});let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a;let o=new Date,r=o.getFullYear(),s=String(o.getMonth()+1).padStart(2,"0"),l=String(o.getDate()).padStart(2,"0"),c=`${r}-${s}-${l}`;n.download=`raw_power_measurements_${c}.csv`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(a)}),exportTcxButton.addEventListener("click",()=>{try{if(0===powerData.length)return void alert("No power data available to export.");let e=generateTcxString(powerData),t=new Blob([e],{type:"application/xml;charset=utf-8;"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a;let o=new Date,r=o.getFullYear(),s=String(o.getMonth()+1).padStart(2,"0"),l=String(o.getDate()).padStart(2,"0"),c=`${r}-${s}-${l}`;n.download=`power_data_${c}.tcx`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(a)}catch(e){console.error("Error generating TCX:",e),alert(`Error generating TCX file: ${e.message}`)}}),exportImageButton.addEventListener("click",async()=>{try{if(0===powerData.length&&0===heartData.length&&0===cadenceData.length)return void alert("No data available to export. Please record some activity first.");(await generateSummaryImage()).toBlob(e=>{let t=URL.createObjectURL(e),a=document.createElement("a");a.href=t;let n=new Date,o=n.getFullYear(),r=String(n.getMonth()+1).padStart(2,"0"),s=String(n.getDate()).padStart(2,"0"),l=`${o}-${r}-${s}`;a.download=`power_meter_summary_${l}.png`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(t)},"image/png")}catch(e){console.error("Error generating summary image:",e),alert(`Error generating summary image: ${e.message}`)}}),clearSessionButton.addEventListener("click",()=>{confirm("Are you sure you want to clear all session data? This action cannot be undone.")&&(resetAllSessionData(),alert("Session data cleared successfully!"))});let heartData=[],cadenceData=[],hrDataLoggerInterval=null,hrConnectButton=document.getElementById("hrConnectButton"),hrStatusText=document.getElementById("hrStatus"),hrValue=document.getElementById("hr-value"),hrDeviceName=document.getElementById("hrDeviceName"),hrBluetoothDevice=null;function handleHeartRateChanged(e){let t=parseHeartRate(e.target.value);hrValue.textContent=t,lastHeartRateValue=t}function parseHeartRate(e){return 1&e.getUint8(0)?e.getUint16(1,!0):e.getUint8(1)}function onDisconnectedHr(){hrStatusText.textContent="Device disconnected.",hrStatusIndicator.className="status-indicator",hrDeviceName.textContent="",hrValue.textContent="--",hrConnectButton.disabled=!1,hrBluetoothDevice=null,lastHeartRateValue=0}hrConnectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){hrStatusText.textContent="Web Bluetooth API is not available.";return}try{hrStatusText.textContent="Scanning for devices...",hrStatusIndicator.className="status-indicator connecting",hrBluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:["heart_rate"]}]}),hrStatusText.textContent="Connecting to device...",hrDeviceName.textContent=`Device: ${hrBluetoothDevice.name}`,hrBluetoothDevice.addEventListener("gattserverdisconnected",onDisconnectedHr);let e=await hrBluetoothDevice.gatt.connect(),t=await e.getPrimaryService("heart_rate"),a=await t.getCharacteristic("heart_rate_measurement");await a.startNotifications(),a.addEventListener("characteristicvaluechanged",handleHeartRateChanged),hrStatusText.textContent="Connected!",hrStatusIndicator.className="status-indicator connected",hrConnectButton.disabled=!0}catch(e){hrStatusText.textContent=`Error: ${e.message}`,hrStatusIndicator.className="status-indicator",console.error("Connection failed:",e)}});let speedCadenceConnectButton=document.getElementById("speedCadenceConnectButton"),cadenceStatusText=document.getElementById("cadenceStatus"),cadenceDeviceName=document.getElementById("cadenceDeviceName"),speedCadenceBluetoothDevice=null;speedCadenceConnectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){cadenceStatusText.textContent="Web Bluetooth API is not available.";return}try{cadenceStatusText.textContent="Scanning for sensors...",cadenceStatusIndicator.className="status-indicator connecting",cadenceResetTimer&&(clearTimeout(cadenceResetTimer),cadenceResetTimer=null),lastCrankRevs=0,lastCrankTime=0,lastCadenceValue=0,speedCadenceBluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_CADENCE_SERVICE_UUID]}]}),cadenceStatusText.textContent="Connecting to device...",cadenceDeviceName.textContent=`Device: ${speedCadenceBluetoothDevice.name}`,speedCadenceBluetoothDevice.addEventListener("gattserverdisconnected",onDisconnectedSpeedCadence);let e=await speedCadenceBluetoothDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID),a=await t.getCharacteristic("csc_measurement");await a.startNotifications(),a.addEventListener("characteristicvaluechanged",handleSpeedCadenceMeasurement),cadenceStatusText.textContent="Connected!",cadenceStatusIndicator.className="status-indicator connected",speedCadenceConnectButton.disabled=!0}catch(e){cadenceStatusText.textContent=`Error: ${e.message}`,cadenceStatusIndicator.className="status-indicator",console.error("Speed/Cadence connection failed:",e)}});let lastCrankRevs=0,lastCrankTime=0,cadenceResetTimer=null;function handleSpeedCadenceMeasurement(e){let t=e.target.value,a=t.getUint8(0),n=1;if(1&a&&(n+=6),2&a){let e=t.getUint16(n,!0),a=t.getUint16(n+2,!0);if(lastCrankRevs>0){let t=e-lastCrankRevs,n=(a-lastCrankTime)/1024;if(n>0){let e=t/n*60;cadenceValueElement.textContent=Math.round(e),lastCadenceValue=Math.round(e),cadenceResetTimer&&clearTimeout(cadenceResetTimer),cadenceResetTimer=setTimeout(()=>{cadenceValueElement.textContent="0",lastCadenceValue=0,cadenceResetTimer=null},3e3)}}lastCrankRevs=e,lastCrankTime=a}}function onDisconnectedSpeedCadence(){cadenceStatusText.textContent="Device disconnected.",cadenceStatusIndicator.className="status-indicator",cadenceDeviceName.textContent="",cadenceValueElement.textContent="--",speedCadenceConnectButton.disabled=!1,speedCadenceBluetoothDevice=null,lastCadenceValue=0,cadenceResetTimer&&(clearTimeout(cadenceResetTimer),cadenceResetTimer=null),lastCrankRevs=0,lastCrankTime=0}function showRestorationDialog(e){return new Promise(t=>{let a=document.createElement("div");a.className="modal-backdrop";let n=document.createElement("div");n.className="modal";let o=Math.round((Date.now()-e.timestamp)/6e4),r=(e.powerData?.length||0)+(e.heartData?.length||0)+(e.cadenceData?.length||0);n.innerHTML=`
            <h3>Previous Session Found</h3>
            <p>
                A previous session was found from ${o} minutes ago with ${r} data points.
            </p>
            <p>
                Would you like to restore this session or start fresh?
            </p>
            <div class="modal-buttons">
                <button id="startFresh" class="modal-button secondary">Start Fresh</button>
                <button id="restoreSession" class="modal-button primary">Restore Session</button>
            </div>
        `,a.appendChild(n),document.body.appendChild(a),n.querySelector("#startFresh").addEventListener("click",()=>{document.body.removeChild(a),localStorage.removeItem(SESSION_STORAGE_KEY),t(!1)}),n.querySelector("#restoreSession").addEventListener("click",()=>{document.body.removeChild(a),t(!0)}),a.addEventListener("click",e=>{e.target===a&&(document.body.removeChild(a),t(!1))})})}document.addEventListener("DOMContentLoaded",async function(){let e=loadSessionData();e&&await showRestorationDialog(e)?restoreSessionData(e):sessionStartTime=Date.now(),window.addEventListener("beforeunload",function(){powerData.length>0&&saveSessionData()}),setInterval(()=>{powerData.length>0&&saveSessionData()},3e4)});
//# sourceMappingURL=power-saver.8e335cd9.js.map
