{"mappings":"ACCA,IAAI,SAAW,KAEf,eAAe,kBACX,GAAI,aAAc,UACd,GAAI,CACA,SAAW,MAAM,UAAU,QAAQ,CAAC,OAAO,CAAC,UAC5C,QAAQ,GAAG,CAAC,+BACZ,SAAS,gBAAgB,CAAC,UAAW,KACjC,QAAQ,GAAG,CAAC,iCAChB,EACJ,CAAE,MAAO,EAAK,CACV,QAAQ,KAAK,CAAC,CAAA,EAAG,EAAI,IAAI,CAAC,EAAE,EAAE,EAAI,OAAO,CAAA,CAAE,CAC/C,CAER,CAEA,eAAe,kBACM,OAAb,WACA,MAAM,SAAS,OAAO,GACtB,SAAW,KAEnB,CAEA,IAAM,cAAgB,SAAS,cAAc,CAAC,iBACxC,WAAa,SAAS,cAAc,CAAC,UACrC,kBAAoB,SAAS,cAAc,CAAC,eAC5C,kBAAoB,SAAS,cAAc,CAAC,eAC5C,cAAgB,SAAS,cAAc,CAAC,kBACxC,iBAAmB,SAAS,cAAc,CAAC,oBAC3C,gBAAkB,SAAS,cAAc,CAAC,mBAC1C,oBAAsB,SAAS,cAAc,CAAC,uBAC9C,mBAAqB,SAAS,cAAc,CAAC,sBAG7C,qBAAuB,SAAS,cAAc,CAAC,wBAC/C,oBAAsB,SAAS,cAAc,CAAC,uBAC9C,eAAiB,SAAS,cAAc,CAAC,kBACzC,cAAgB,SAAS,cAAc,CAAC,iBACxC,kBAAoB,SAAS,cAAc,CAAC,qBAC5C,iBAAmB,SAAS,cAAc,CAAC,oBAE3C,oBAAsB,SAAS,cAAc,CAAC,iBAC9C,uBAAyB,SAAS,cAAc,CAAC,oBACjD,mBAAqB,SAAS,cAAc,CAAC,gBAG7C,qBAAuB,SAAS,cAAc,CAAC,0BAC/C,kBAAoB,SAAS,cAAc,CAAC,uBAC5C,uBAAyB,SAAS,cAAc,CAAC,4BACjD,qBAAuB,SAAS,cAAc,CAAC,0BAC/C,wBAA0B,SAAS,cAAc,CAAC,6BAwCxD,SAAS,wBACL,IAAM,EAAY,SAAS,aAAa,CAAC,cACnC,EAAgB,AAAiC,SAAjC,eAAe,KAAK,CAAC,OAAO,CAC5C,EAAe,AAAgC,SAAhC,cAAc,KAAK,CAAC,OAAO,AAE5C,CAAA,GAAiB,EACjB,EAAU,SAAS,CAAC,GAAG,CAAC,aAExB,EAAU,SAAS,CAAC,MAAM,CAAC,YAEnC,CA/CA,qBAAqB,SAAS,CAAG,mBACjC,kBAAkB,SAAS,CAAG,mBAC9B,uBAAuB,SAAS,CAAG,mBACnC,qBAAqB,SAAS,CAAG,mBACjC,wBAAwB,SAAS,CAAG,mBAGpC,qBAAqB,gBAAgB,CAAC,QAAS,KAC1B,AAAiC,SAAjC,eAAe,KAAK,CAAC,OAAO,EAEzC,eAAe,KAAK,CAAC,OAAO,CAAG,QAC/B,kBAAkB,WAAW,CAAG,uBAChC,qBAAqB,SAAS,CAAC,MAAM,CAAC,eAEtC,eAAe,KAAK,CAAC,OAAO,CAAG,OAC/B,kBAAkB,WAAW,CAAG,uBAChC,qBAAqB,SAAS,CAAC,GAAG,CAAC,cAEvC,uBACJ,GAGA,oBAAoB,gBAAgB,CAAC,QAAS,KACzB,AAAgC,SAAhC,cAAc,KAAK,CAAC,OAAO,EAExC,cAAc,KAAK,CAAC,OAAO,CAAG,QAC9B,iBAAiB,WAAW,CAAG,mBAC/B,oBAAoB,SAAS,CAAC,MAAM,CAAC,eAErC,cAAc,KAAK,CAAC,OAAO,CAAG,OAC9B,iBAAiB,WAAW,CAAG,mBAC/B,oBAAoB,SAAS,CAAC,GAAG,CAAC,cAEtC,uBACJ,GAgBA,oBAAoB,SAAS,CAAC,GAAG,CAAC,aAClC,wBAGA,IAAI,UAAY,EAAE,CACd,qBAAuB,EAAE,CACzB,eAAiB,EACjB,mBAAqB,EACrB,iBAAmB,EACnB,eAAiB,EACjB,iBAAmB,EACnB,oBAAsB,EACtB,gBAAkB,EAClB,cAAgB,EAChB,mBAAqB,KACrB,iBAAmB,KACjB,2BAA6B,gBAC7B,8CAAgD,4BAChD,0CAA4C,wBAC5C,6BAA+B,4BAC/B,oCAAsC,kBAwL5C,SAAS,uBAAuB,CAAK,EACjC,IAAM,EAAQ,EAAM,MAAM,CAAC,KAAK,CAI1B,EAAiB,CACnB,UAJc,KAAK,GAAG,GAKtB,MAAO,EAAM,SAAS,CAAC,EAAG,CAAA,GAC1B,SAAU,MAAM,IAAI,CAAC,IAAI,WAAW,EAAM,MAAM,GAAG,GAAG,CAAC,AAAA,GAAK,EAAE,QAAQ,CAAC,IAAI,QAAQ,CAAC,EAAG,MAAM,IAAI,CAAC,KAClG,WAAY,EAAM,UAAU,AAChC,EAIM,EAAQ,EAAM,SAAS,CAAC,EAAG,CAAA,GAC7B,EAAS,EAGP,EAAQ,EAAM,QAAQ,CAAC,EAAQ,CAAA,GA0BrC,GAzBA,EAAe,kBAAkB,CAAG,EACpC,kBAAkB,WAAW,CAAG,EAChC,eAAiB,EACjB,GAAU,EAGV,oBAAoB,WAAW,CAAG,KAClC,iBAAmB,EACnB,uBAAuB,WAAW,CAAG,KACrC,oBAAsB,EACtB,mBAAmB,WAAW,CAAG,KACjC,gBAAkB,EAGlB,EAAe,iBAAiB,CAAG,KACnC,EAAe,iBAAiB,CAAG,KACnC,EAAe,mBAAmB,CAAG,KACrC,EAAe,mBAAmB,CAAG,KACrC,EAAe,kBAAkB,CAAG,KACpC,EAAe,uBAAuB,CAAG,KACzC,EAAe,iBAAiB,CAAG,KACnC,EAAe,mBAAmB,CAAG,KACrC,EAAe,eAAe,CAAG,KAG7B,AAAQ,EAAR,EAAgB,CAChB,IAAM,EAAU,EAAM,QAAQ,CAAC,EAC/B,CAAA,EAAe,iBAAiB,CAAG,EAEnC,oBAAoB,WAAW,CAAG,CAAA,EAAG,IAAM,EAAQ,CAAC,EAAE,EAAA,CAAS,CAC/D,iBAAmB,EACnB,GAAU,CACd,CAoDA,GAjDY,EAAR,IACA,EAAe,iBAAiB,CAAG,EAAM,SAAS,CAAC,EAAQ,CAAA,GAC3D,GAAU,GAIF,GAAR,IACA,EAAe,mBAAmB,CAAG,CACjC,2BAA4B,EAAM,SAAS,CAAC,EAAQ,CAAA,GACpD,mBAAoB,EAAM,SAAS,CAAC,EAAS,EAAG,CAAA,EACpD,EACA,GAAU,GAIF,GAAR,IACA,EAAe,mBAAmB,CAAG,CACjC,2BAA4B,EAAM,SAAS,CAAC,EAAQ,CAAA,GACpD,mBAAoB,EAAM,SAAS,CAAC,EAAS,EAAG,CAAA,EACpD,EACA,GAAU,GAIF,IAAR,IACA,EAAe,kBAAkB,CAAG,CAChC,sBAAuB,EAAM,QAAQ,CAAC,EAAQ,CAAA,GAC9C,sBAAuB,EAAM,QAAQ,CAAC,EAAS,EAAG,CAAA,GAClD,uBAAwB,EAAM,QAAQ,CAAC,EAAS,EAAG,CAAA,EACvD,EACA,GAAU,GAIF,IAAR,IACA,EAAe,uBAAuB,CAAG,CACrC,iBAAkB,EAAM,SAAS,CAAC,EAAQ,CAAA,GAC1C,oBAAqB,EAAM,SAAS,CAAC,EAAS,EAAG,CAAA,EACrD,EACA,GAAU,GAIF,KAAR,IACA,EAAe,iBAAiB,CAAG,EAAM,SAAS,CAAC,EAAQ,CAAA,GAC3D,GAAU,GAIV,AAAQ,KAAR,EAAgB,CAChB,IAAM,EAAsB,EAAM,QAAQ,CAAC,GAAU,EAC/C,EAAkB,EAAM,QAAQ,CAAC,EAAS,GAAK,CACrD,CAAA,EAAe,mBAAmB,CAAG,EACrC,EAAe,eAAe,CAAG,EACjC,mBAAmB,WAAW,CAAG,EAAoB,OAAO,CAAC,GAC7D,uBAAuB,WAAW,CAAG,EAAgB,OAAO,CAAC,GAC7D,gBAAkB,EAClB,oBAAsB,EACtB,GAAU,CACd,CAGA,qBAAqB,IAAI,CAAC,EAC9B,CAOA,SAAS,sBAAsB,CAAK,EAIhC,OAD2B,EAAM,QAAQ,CAAC,EAAqB,CAAA,EAEnE,CAEA,SAAS,iBACL,WAAW,WAAW,CAAG,uBACzB,qBAAqB,SAAS,CAAG,mBACjC,kBAAkB,WAAW,CAAG,GAChC,kBAAkB,WAAW,CAAG,KAChC,oBAAoB,WAAW,CAAG,KAClC,uBAAuB,WAAW,CAAG,KACrC,mBAAmB,WAAW,CAAG,KACjC,cAAc,QAAQ,CAAG,CAAA,EACrB,qBACA,cAAc,oBACd,mBAAqB,MAErB,mBACA,iBAAiB,mBAAmB,CAAC,yBAA0B,gBAC/D,iBAAmB,MAEvB,eAAiB,EACjB,iBAAmB,EACnB,oBAAsB,EACtB,gBAAkB,CACtB,CA9UA,cAAc,gBAAgB,CAAC,QAAS,UAEpC,GADA,MAAM,kBACF,CAAC,UAAU,SAAS,CAAE,CACtB,WAAW,WAAW,CAAG,sCACzB,MACJ,CAGA,UAAY,EAAE,CACd,qBAAuB,EAAE,CACzB,eAAiB,EACb,qBACA,cAAc,oBAAqB,QAGvC,GAAI,CACA,WAAW,WAAW,CAAG,+BACzB,qBAAqB,SAAS,CAAG,8BAGjC,iBAAmB,MAAM,UAAU,SAAS,CAAC,aAAa,CAAC,CACvD,QAAS,CAAC,CACN,SAAU,CAAC,2BAA2B,AAC1C,EAAE,AACN,GAEA,WAAW,WAAW,CAAG,0BACzB,kBAAkB,WAAW,CAAG,CAAC,QAAQ,EAAE,iBAAiB,IAAI,EAAI,iBAAA,CAAkB,CAEtF,iBAAiB,gBAAgB,CAAC,yBAA0B,gBAE5D,IAAM,EAAS,MAAM,iBAAiB,IAAI,CAAC,OAAO,GAC5C,EAAU,MAAM,EAAO,iBAAiB,CAAC,4BACzC,EAAiB,MAAM,EAAQ,iBAAiB,CAtCR,6BAyC9C,GAAI,CACA,IAAM,EAAwB,MAAM,EAAQ,iBAAiB,CAzCvB,yBA0ChC,EAAW,MAAM,EAAsB,SAAS,GACtD,QAAQ,GAAG,CAAC,CAAC,gBAAgB,EAAE,EAAS,SAAS,CAAC,EAAG,CAAA,GAAA,CAAO,CAGhE,CAAE,MAAO,EAAG,CACR,QAAQ,GAAG,CAAC,kDAChB,CAGA,MAAM,EAAe,kBAAkB,GAEvC,EAAe,gBAAgB,CAAC,6BAA8B,wBAE9D,WAAW,WAAW,CAAG,gCACzB,qBAAqB,SAAS,CAAG,6BACjC,cAAc,QAAQ,CAAG,CAAA,EAGzB,mBAAqB,YAAY,KAC7B,UAAU,IAAI,CAAC,CACX,UAAW,KAAK,GAAG,GACnB,MAAO,eACP,UAAW,mBACX,QAAS,iBACT,MAAO,eACP,SAAU,cACV,QAAS,iBACT,WAAY,oBACZ,OAAQ,eACZ,EACJ,EAAG,IAEP,CAAE,MAAO,EAAO,CACZ,WAAW,WAAW,CAAG,CAAC,OAAO,EAAE,EAAM,OAAO,CAAA,CAAE,CAClD,qBAAqB,SAAS,CAAG,mBACjC,QAAQ,KAAK,CAAC,qBAAsB,GAChC,kBACA,iBAAiB,mBAAmB,CAAC,yBAA0B,eAEvE,CACJ,GAEA,iBAAiB,gBAAgB,CAAC,QAAS,KAEvC,IAAM,EAAO,IAAI,KAAK,CADH,KAAK,SAAS,CAAC,UAAW,KAAM,GACjB,CAAE,CAChC,KAAM,kBACV,GACM,EAAM,IAAI,eAAe,CAAC,GAC1B,EAAI,SAAS,aAAa,CAAC,IACjC,CAAA,EAAE,IAAI,CAAG,EACT,IAAM,EAAM,IAAI,KACV,EAAO,EAAI,WAAW,GACtB,EAAQ,OAAO,EAAI,QAAQ,GAAK,GAAG,QAAQ,CAAC,EAAG,KAC/C,EAAM,OAAO,EAAI,OAAO,IAAI,QAAQ,CAAC,EAAG,KACxC,EAAa,CAAA,EAAG,EAAK,CAAC,EAAE,EAAM,CAAC,EAAE,EAAA,CAAK,AAC5C,CAAA,EAAE,QAAQ,CAAG,CAAC,WAAW,EAAE,EAAW,KAAK,CAAC,CAC5C,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAE,KAAK,GACP,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,IAAI,eAAe,CAAC,EACxB,GAEA,gBAAgB,gBAAgB,CAAC,QAAS,KACtC,IAAI,EAAa,+EACjB,UAAU,OAAO,CAAC,AAAA,IACd,GAAc,CAAA,EAAG,EAAI,SAAS,CAAC,CAAC,EAAE,EAAI,KAAK,CAAC,CAAC,EAAE,EAAI,SAAS,CAAC,CAAC,EAAE,EAAI,OAAO,CAAC,CAAC,EAAE,EAAI,KAAK,CAAC,CAAC,EAAE,EAAI,QAAQ,CAAC,CAAC,EAAE,EAAI,OAAO,EAAI,GAAG,CAAC,EAAE,EAAI,UAAU,EAAI,GAAG,CAAC,EAAE,EAAI,MAAM,EAAI;AAAK,CAAC,AACjL,GAEA,IAAM,EAAO,IAAI,KAAK,CAAC,EAAW,CAAE,CAChC,KAAM,yBACV,GACM,EAAM,IAAI,eAAe,CAAC,GAC1B,EAAI,SAAS,aAAa,CAAC,IACjC,CAAA,EAAE,IAAI,CAAG,EACT,IAAM,EAAM,IAAI,KACV,EAAO,EAAI,WAAW,GACtB,EAAQ,OAAO,EAAI,QAAQ,GAAK,GAAG,QAAQ,CAAC,EAAG,KAC/C,EAAM,OAAO,EAAI,OAAO,IAAI,QAAQ,CAAC,EAAG,KACxC,EAAa,CAAA,EAAG,EAAK,CAAC,EAAE,EAAM,CAAC,EAAE,EAAA,CAAK,AAC5C,CAAA,EAAE,QAAQ,CAAG,CAAC,WAAW,EAAE,EAAW,IAAI,CAAC,CAC3C,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAE,KAAK,GACP,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,IAAI,eAAe,CAAC,EACxB,GAGA,oBAAoB,gBAAgB,CAAC,QAAS,KAE1C,IAAM,EAAO,IAAI,KAAK,CADH,KAAK,SAAS,CAAC,qBAAsB,KAAM,GAC5B,CAAE,CAChC,KAAM,kBACV,GACM,EAAM,IAAI,eAAe,CAAC,GAC1B,EAAI,SAAS,aAAa,CAAC,IACjC,CAAA,EAAE,IAAI,CAAG,EACT,IAAM,EAAM,IAAI,KACV,EAAO,EAAI,WAAW,GACtB,EAAQ,OAAO,EAAI,QAAQ,GAAK,GAAG,QAAQ,CAAC,EAAG,KAC/C,EAAM,OAAO,EAAI,OAAO,IAAI,QAAQ,CAAC,EAAG,KACxC,EAAa,CAAA,EAAG,EAAK,CAAC,EAAE,EAAM,CAAC,EAAE,EAAA,CAAK,AAC5C,CAAA,EAAE,QAAQ,CAAG,CAAC,uBAAuB,EAAE,EAAW,KAAK,CAAC,CACxD,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAE,KAAK,GACP,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,IAAI,eAAe,CAAC,EACxB,GAGA,mBAAmB,gBAAgB,CAAC,QAAS,KACzC,IAAI,EAAa,iTAEjB,qBAAqB,OAAO,CAAC,AAAA,IACzB,IAAM,EAAY,EAAY,mBAAmB,CAAG,EAAY,mBAAmB,CAAC,0BAA0B,CAAG,GAC3G,EAAY,EAAY,mBAAmB,CAAG,EAAY,mBAAmB,CAAC,kBAAkB,CAAG,GACnG,EAAY,EAAY,mBAAmB,CAAG,EAAY,mBAAmB,CAAC,0BAA0B,CAAG,GAC3G,EAAY,EAAY,mBAAmB,CAAG,EAAY,mBAAmB,CAAC,kBAAkB,CAAG,GACnG,EAAW,EAAY,kBAAkB,CAAG,EAAY,kBAAkB,CAAC,qBAAqB,CAAG,GACnG,EAAW,EAAY,kBAAkB,CAAG,EAAY,kBAAkB,CAAC,qBAAqB,CAAG,GACnG,EAAY,EAAY,kBAAkB,CAAG,EAAY,kBAAkB,CAAC,sBAAsB,CAAG,GACrG,EAAW,EAAY,uBAAuB,CAAG,EAAY,uBAAuB,CAAC,gBAAgB,CAAG,GACxG,EAAc,EAAY,uBAAuB,CAAG,EAAY,uBAAuB,CAAC,mBAAmB,CAAG,GAEpH,GAAc,CAAA,EAAG,EAAY,SAAS,CAAC,CAAC,EAAE,EAAY,KAAK,CAAC,CAAC,EAAE,EAAY,UAAU,CAAC,CAAC,EAAE,EAAY,kBAAkB,CAAC,CAAC,EAAE,EAAY,iBAAiB,EAAI,GAAG,CAAC,EAAE,EAAY,iBAAiB,EAAI,GAAG,CAAC,EAAE,EAAU,CAAC,EAAE,EAAU,CAAC,EAAE,EAAU,CAAC,EAAE,EAAU,CAAC,EAAE,EAAS,CAAC,EAAE,EAAS,CAAC,EAAE,EAAU,CAAC,EAAE,EAAS,CAAC,EAAE,EAAY,CAAC,EAAE,EAAY,iBAAiB,EAAI,GAAG,CAAC,EAAE,EAAY,mBAAmB,EAAI,GAAG,CAAC,EAAE,EAAY,eAAe,EAAI,GAAG,EAAE,EAAE,EAAY,QAAQ,CAAC;AAAG,CAAC,AAChd,GAEA,IAAM,EAAO,IAAI,KAAK,CAAC,EAAW,CAAE,CAChC,KAAM,yBACV,GACM,EAAM,IAAI,eAAe,CAAC,GAC1B,EAAI,SAAS,aAAa,CAAC,IACjC,CAAA,EAAE,IAAI,CAAG,EACT,IAAM,EAAM,IAAI,KACV,EAAO,EAAI,WAAW,GACtB,EAAQ,OAAO,EAAI,QAAQ,GAAK,GAAG,QAAQ,CAAC,EAAG,KAC/C,EAAM,OAAO,EAAI,OAAO,IAAI,QAAQ,CAAC,EAAG,KACxC,EAAa,CAAA,EAAG,EAAK,CAAC,EAAE,EAAM,CAAC,EAAE,EAAA,CAAK,AAC5C,CAAA,EAAE,QAAQ,CAAG,CAAC,uBAAuB,EAAE,EAAW,IAAI,CAAC,CACvD,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAE,KAAK,GACP,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,IAAI,eAAe,CAAC,EACxB,GA8JA,IAAM,UAAY,EAAE,CAChB,qBAAuB,KAErB,gBAAkB,SAAS,cAAc,CAAC,mBAC1C,aAAe,SAAS,cAAc,CAAC,YACvC,QAAU,SAAS,cAAc,CAAC,YAClC,aAAe,SAAS,cAAc,CAAC,gBAEzC,kBAAoB,KA8CxB,SAAS,uBAAuB,CAAK,EAEjC,IAAM,EAAY,eADJ,EAAM,MAAM,CAAC,KAAK,CAEhC,CAAA,QAAQ,WAAW,CAAG,EACtB,mBAAqB,CACzB,CAOA,SAAS,eAAe,CAAK,SAIzB,AADiB,AAAQ,EAFX,EAAM,QAAQ,CAAC,GAKlB,EAAM,SAAS,CAAC,EAAqB,CAAA,GAGrC,EAAM,QAAQ,CAAC,EAE9B,CAEA,SAAS,mBACL,aAAa,WAAW,CAAG,uBAC3B,kBAAkB,SAAS,CAAG,mBAC9B,aAAa,WAAW,CAAG,GAC3B,QAAQ,WAAW,CAAG,KACtB,gBAAgB,QAAQ,CAAG,CAAA,EAC3B,kBAAoB,KACpB,mBAAqB,CACzB,CA7EA,gBAAgB,gBAAgB,CAAC,QAAS,UAEtC,GADA,MAAM,kBACF,CAAC,UAAU,SAAS,CAAE,CACtB,aAAa,WAAW,CAAG,sCAC3B,MACJ,CAEA,GAAI,CACA,aAAa,WAAW,CAAG,0BAC3B,kBAAkB,SAAS,CAAG,8BAG9B,kBAAoB,MAAM,UAAU,SAAS,CAAC,aAAa,CAAC,CACxD,QAAS,CAAC,CACN,SAAU,CAAC,aAAa,AAC5B,EAAE,AACN,GAEA,aAAa,WAAW,CAAG,0BAC3B,aAAa,WAAW,CAAG,CAAC,QAAQ,EAAE,kBAAkB,IAAI,CAAA,CAAE,CAG9D,kBAAkB,gBAAgB,CAAC,yBAA0B,kBAE7D,IAAM,EAAW,MAAM,kBAAkB,IAAI,CAAC,OAAO,GAC/C,EAAY,MAAM,EAAS,iBAAiB,CAAC,cAC7C,EAAmB,MAAM,EAAU,iBAAiB,CAAC,yBAG3D,OAAM,EAAiB,kBAAkB,GAEzC,EAAiB,gBAAgB,CAAC,6BAA8B,wBAEhE,aAAa,WAAW,CAAG,aAC3B,kBAAkB,SAAS,CAAG,6BAC9B,gBAAgB,QAAQ,CAAG,CAAA,CAE/B,CAAE,MAAO,EAAO,CACZ,aAAa,WAAW,CAAG,CAAC,OAAO,EAAE,EAAM,OAAO,CAAA,CAAE,CACpD,kBAAkB,SAAS,CAAG,mBAC9B,QAAQ,KAAK,CAAC,qBAAsB,EACxC,CACJ,GAqCA,IAAM,0BAA4B,SAAS,cAAc,CAAC,6BACpD,oBAAsB,SAAS,cAAc,CAAC,iBAC9C,kBAAoB,SAAS,cAAc,CAAC,eAC5C,qBAAuB,SAAS,cAAc,CAAC,kBAC/C,kBAAoB,SAAS,cAAc,CAAC,iBAC5C,kBAAoB,SAAS,cAAc,CAAC,qBAC9C,4BAA8B,KAC5B,oBAAsB,MAE5B,0BAA0B,gBAAgB,CAAC,QAAS,UAEhD,GADA,MAAM,kBACF,CAAC,UAAU,SAAS,CAAE,CACtB,kBAAkB,WAAW,CAAG,sCAChC,MACJ,CAEA,GAAI,CACA,kBAAkB,WAAW,CAAG,0BAChC,uBAAuB,SAAS,CAAG,8BACnC,qBAAqB,SAAS,CAAG,8BAEjC,4BAA8B,MAAM,UAAU,SAAS,CAAC,aAAa,CAAC,CAClE,QAAS,CAAC,CACN,SAAU,CAAC,6BAA6B,AAC5C,EAAE,AACN,GAEA,kBAAkB,WAAW,CAAG,0BAChC,kBAAkB,WAAW,CAAG,CAAC,QAAQ,EAAE,4BAA4B,IAAI,CAAA,CAAE,CAE7E,4BAA4B,gBAAgB,CAAC,yBAA0B,4BAEvE,IAAM,EAAS,MAAM,4BAA4B,IAAI,CAAC,OAAO,GACvD,EAAU,MAAM,EAAO,iBAAiB,CAAC,8BACzC,EAAiB,MAAM,EAAQ,iBAAiB,CA9clB,kBAgdpC,OAAM,EAAe,kBAAkB,GACvC,EAAe,gBAAgB,CAAC,6BAA8B,+BAE9D,kBAAkB,WAAW,CAAG,aAChC,uBAAuB,SAAS,CAAG,6BACnC,qBAAqB,SAAS,CAAG,6BACjC,0BAA0B,QAAQ,CAAG,CAAA,CAEzC,CAAE,MAAO,EAAO,CACZ,kBAAkB,WAAW,CAAG,CAAC,OAAO,EAAE,EAAM,OAAO,CAAA,CAAE,CACzD,uBAAuB,SAAS,CAAG,mBACnC,qBAAqB,SAAS,CAAG,mBACjC,QAAQ,KAAK,CAAC,mCAAoC,EACtD,CACJ,GAEA,IAAI,cAAgB,EAChB,cAAgB,EAChB,cAAgB,EAChB,cAAgB,EAEpB,SAAS,8BAA8B,CAAK,EACxC,IAAM,EAAQ,EAAM,MAAM,CAAC,KAAK,CAC1B,EAAQ,EAAM,QAAQ,CAAC,GACzB,EAAS,EAKb,GAH0B,AAAQ,EAAR,EAGJ,CAClB,IAAM,EAA6B,EAAM,SAAS,CAAC,EAAQ,CAAA,GACrD,EAAqB,EAAM,SAAS,CAAC,EAAS,EAAG,CAAA,GAGvD,GAFA,GAAU,EAEN,cAAgB,EAAG,CACnB,IAAM,EAAO,EAA6B,cACpC,EAAO,AAAC,CAAA,EAAqB,aAAA,EAAiB,KACpD,GAAI,EAAO,EAAG,CACV,IAAM,EAAW,AAnEL,MAmEK,EACjB,eAAiB,EAAW,IAC5B,IAAM,EAAQ,EAAY,EAAQ,GAClC,CAAA,kBAAkB,WAAW,CAAG,KAAK,KAAK,CAAC,GAC3C,eAAiB,KAAK,KAAK,CAAC,GAC5B,qBAAqB,WAAW,CAAG,cAAc,OAAO,CAAC,EAC7D,CACJ,CACA,cAAgB,EAChB,cAAgB,CACpB,CAEA,GAvB0B,AAAQ,EAAR,EAuBJ,CAClB,IAAM,EAA6B,EAAM,SAAS,CAAC,EAAQ,CAAA,GACrD,EAAqB,EAAM,SAAS,CAAC,EAAS,EAAG,CAAA,GAEvD,GAAI,cAAgB,EAAG,CACnB,IAAM,EAAO,EAA6B,cACpC,EAAO,AAAC,CAAA,EAAqB,aAAA,EAAiB,KACpD,GAAI,EAAO,EAAG,CACV,IAAM,EAAU,EAAQ,EAAQ,EAChC,CAAA,oBAAoB,WAAW,CAAG,KAAK,KAAK,CAAC,GAC7C,iBAAmB,KAAK,KAAK,CAAC,EAClC,CACJ,CACA,cAAgB,EAChB,cAAgB,CACpB,CACJ,CAEA,SAAS,6BACL,kBAAkB,WAAW,CAAG,uBAChC,uBAAuB,SAAS,CAAG,mBACnC,qBAAqB,SAAS,CAAG,mBACjC,kBAAkB,WAAW,CAAG,GAChC,oBAAoB,WAAW,CAAG,KAClC,kBAAkB,WAAW,CAAG,KAChC,0BAA0B,QAAQ,CAAG,CAAA,EACrC,4BAA8B,KAC9B,iBAAmB,EACnB,eAAiB,CACrB","sources":["<anon>","src/script.js"],"sourcesContent":["// Screen Wake Lock\nlet wakeLock = null;\nasync function requestWakeLock() {\n    if ('wakeLock' in navigator) try {\n        wakeLock = await navigator.wakeLock.request('screen');\n        console.log('Screen Wake Lock is active.');\n        wakeLock.addEventListener('release', ()=>{\n            console.log('Screen Wake Lock was released.');\n        });\n    } catch (err) {\n        console.error(`${err.name}, ${err.message}`);\n    }\n}\nasync function releaseWakeLock() {\n    if (wakeLock !== null) {\n        await wakeLock.release();\n        wakeLock = null;\n    }\n}\nconst connectButton = document.getElementById('connectButton');\nconst statusText = document.getElementById('status');\nconst powerValueElement = document.getElementById('power-value');\nconst deviceNameElement = document.getElementById('device-name');\nconst exportButtons = document.getElementById('export-buttons');\nconst exportJsonButton = document.getElementById('exportJsonButton');\nconst exportCsvButton = document.getElementById('exportCsvButton');\nconst exportRawJsonButton = document.getElementById('exportRawJsonButton');\nconst exportRawCsvButton = document.getElementById('exportRawCsvButton');\n// Toggle elements\nconst toggleConnectSection = document.getElementById('toggleConnectSection');\nconst toggleExportSection = document.getElementById('toggleExportSection');\nconst connectSection = document.getElementById('connectSection');\nconst exportSection = document.getElementById('exportSection');\nconst connectToggleText = document.getElementById('connectToggleText');\nconst exportToggleText = document.getElementById('exportToggleText');\nconst balanceValueElement = document.getElementById('balance-value');\nconst smoothnessValueElement = document.getElementById('smoothness-value');\nconst torqueValueElement = document.getElementById('torque-value');\n// Status indicator elements\nconst powerStatusIndicator = document.getElementById('power-status-indicator');\nconst hrStatusIndicator = document.getElementById('hr-status-indicator');\nconst cadenceStatusIndicator = document.getElementById('cadence-status-indicator');\nconst speedStatusIndicator = document.getElementById('speed-status-indicator');\nconst distanceStatusIndicator = document.getElementById('distance-status-indicator');\n// Initialize all status indicators to disconnected state\npowerStatusIndicator.className = 'status-indicator';\nhrStatusIndicator.className = 'status-indicator';\ncadenceStatusIndicator.className = 'status-indicator';\nspeedStatusIndicator.className = 'status-indicator';\ndistanceStatusIndicator.className = 'status-indicator';\n// Toggle functionality for connect section\ntoggleConnectSection.addEventListener('click', ()=>{\n    const isHidden = connectSection.style.display === 'none';\n    if (isHidden) {\n        connectSection.style.display = 'block';\n        connectToggleText.textContent = 'Hide Connect Devices';\n        toggleConnectSection.classList.remove('collapsed');\n    } else {\n        connectSection.style.display = 'none';\n        connectToggleText.textContent = 'Show Connect Devices';\n        toggleConnectSection.classList.add('collapsed');\n    }\n    updateDashboardLayout();\n});\n// Toggle functionality for export section\ntoggleExportSection.addEventListener('click', ()=>{\n    const isHidden = exportSection.style.display === 'none';\n    if (isHidden) {\n        exportSection.style.display = 'block';\n        exportToggleText.textContent = 'Hide Export Data';\n        toggleExportSection.classList.remove('collapsed');\n    } else {\n        exportSection.style.display = 'none';\n        exportToggleText.textContent = 'Show Export Data';\n        toggleExportSection.classList.add('collapsed');\n    }\n    updateDashboardLayout();\n});\n// Function to update dashboard layout based on visible sections\nfunction updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const connectHidden = connectSection.style.display === 'none';\n    const exportHidden = exportSection.style.display === 'none';\n    if (connectHidden && exportHidden) dashboard.classList.add('maximized');\n    else dashboard.classList.remove('maximized');\n}\n// Initialize export section as collapsed\ntoggleExportSection.classList.add('collapsed');\nupdateDashboardLayout();\nlet powerData = [];\nlet rawPowerMeasurements = [];\nlet lastPowerValue = 0;\nlet lastHeartRateValue = 0;\nlet lastCadenceValue = 0;\nlet lastSpeedValue = 0;\nlet lastBalanceValue = 0;\nlet lastSmoothnessValue = 0;\nlet lastTorqueValue = 0;\nlet totalDistance = 0;\nlet dataLoggerInterval = null;\nlet powerMeterDevice = null;\nconst CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID = 'cycling_power_feature';\nconst CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\nconnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        statusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    // Reset data from previous session\n    powerData = [];\n    rawPowerMeasurements = [];\n    lastPowerValue = 0;\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n        Torque;\n    }\n    try {\n        statusText.textContent = 'Scanning for power meters...';\n        powerStatusIndicator.className = 'status-indicator connecting';\n        // Scan specifically for devices advertising the Cycling Power service\n        powerMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        CYCLING_POWER_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        statusText.textContent = 'Connecting to device...';\n        deviceNameElement.textContent = `Device: ${powerMeterDevice.name || 'Unknown Device'}`;\n        powerMeterDevice.addEventListener('gattserverdisconnected', onDisconnected);\n        const server = await powerMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);\n        // Check for and subscribe to advanced power features if available\n        try {\n            const featureCharacteristic = await service.getCharacteristic(CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID);\n            const features = await featureCharacteristic.readValue();\n            console.log(`Power Features: ${features.getUint32(0, true)}`);\n        // This value can be used to determine what the power meter supports,\n        // but for now we just parse what's in the measurement characteristic.\n        } catch (e) {\n            console.log('Cycling Power Feature characteristic not found.');\n        }\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handlePowerMeasurement);\n        statusText.textContent = 'Connected and receiving data!';\n        powerStatusIndicator.className = 'status-indicator connected';\n        connectButton.disabled = true;\n        // exportButtons.style.display = 'block';\n        dataLoggerInterval = setInterval(()=>{\n            powerData.push({\n                timestamp: Date.now(),\n                power: lastPowerValue,\n                heartRate: lastHeartRateValue,\n                cadence: lastCadenceValue,\n                speed: lastSpeedValue,\n                distance: totalDistance,\n                balance: lastBalanceValue,\n                smoothness: lastSmoothnessValue,\n                torque: lastTorqueValue\n            });\n        }, 100);\n    } catch (error) {\n        statusText.textContent = `Error: ${error.message}`;\n        powerStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n        if (powerMeterDevice) powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n    }\n});\nexportJsonButton.addEventListener('click', ()=>{\n    const jsonString = JSON.stringify(powerData, null, 2);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\nexportCsvButton.addEventListener('click', ()=>{\n    let csvContent = 'timestamp,power,heartRate,cadence,speed,distance,balance,smoothness,torque\\n';\n    powerData.forEach((row)=>{\n        csvContent += `${row.timestamp},${row.power},${row.heartRate},${row.cadence},${row.speed},${row.distance},${row.balance || ''},${row.smoothness || ''},${row.torque || ''}\\n`;\n    });\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n// Export raw power measurements as JSON\nexportRawJsonButton.addEventListener('click', ()=>{\n    const jsonString = JSON.stringify(rawPowerMeasurements, null, 2);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n// Export raw power measurements as CSV\nexportRawCsvButton.addEventListener('click', ()=>{\n    let csvContent = 'timestamp,flags,dataLength,instantaneousPower,pedalPowerBalance,accumulatedTorque,wheelRevolutions,wheelEventTime,crankRevolutions,crankEventTime,maxForceMagnitude,minForceMagnitude,maxTorqueMagnitude,topDeadSpotAngle,bottomDeadSpotAngle,accumulatedEnergy,torqueEffectiveness,pedalSmoothness,rawBytes\\n';\n    rawPowerMeasurements.forEach((measurement)=>{\n        const wheelRevs = measurement.wheelRevolutionData ? measurement.wheelRevolutionData.cumulativeWheelRevolutions : '';\n        const wheelTime = measurement.wheelRevolutionData ? measurement.wheelRevolutionData.lastWheelEventTime : '';\n        const crankRevs = measurement.crankRevolutionData ? measurement.crankRevolutionData.cumulativeCrankRevolutions : '';\n        const crankTime = measurement.crankRevolutionData ? measurement.crankRevolutionData.lastCrankEventTime : '';\n        const maxForce = measurement.extremeForceAngles ? measurement.extremeForceAngles.maximumForceMagnitude : '';\n        const minForce = measurement.extremeForceAngles ? measurement.extremeForceAngles.minimumForceMagnitude : '';\n        const maxTorque = measurement.extremeForceAngles ? measurement.extremeForceAngles.maximumTorqueMagnitude : '';\n        const topAngle = measurement.topBottomDeadSpotAngles ? measurement.topBottomDeadSpotAngles.topDeadSpotAngle : '';\n        const bottomAngle = measurement.topBottomDeadSpotAngles ? measurement.topBottomDeadSpotAngles.bottomDeadSpotAngle : '';\n        csvContent += `${measurement.timestamp},${measurement.flags},${measurement.dataLength},${measurement.instantaneousPower},${measurement.pedalPowerBalance || ''},${measurement.accumulatedTorque || ''},${wheelRevs},${wheelTime},${crankRevs},${crankTime},${maxForce},${minForce},${maxTorque},${topAngle},${bottomAngle},${measurement.accumulatedEnergy || ''},${measurement.torqueEffectiveness || ''},${measurement.pedalSmoothness || ''},\"${measurement.rawBytes}\"\\n`;\n    });\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\nfunction handlePowerMeasurement(event) {\n    const value = event.target.value;\n    const timestamp = Date.now();\n    // Store raw measurement data for detailed analysis\n    const rawMeasurement = {\n        timestamp: timestamp,\n        flags: value.getUint16(0, true),\n        rawBytes: Array.from(new Uint8Array(value.buffer)).map((b)=>b.toString(16).padStart(2, '0')).join(' '),\n        dataLength: value.byteLength\n    };\n    // The data is a DataView object with a flags field and the power value.\n    // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n    const flags = value.getUint16(0, true);\n    let offset = 2;\n    // Power is always present\n    const power = value.getInt16(offset, true);\n    rawMeasurement.instantaneousPower = power;\n    powerValueElement.textContent = power;\n    lastPowerValue = power;\n    offset += 2;\n    // Reset optional values\n    balanceValueElement.textContent = '--';\n    lastBalanceValue = 0;\n    smoothnessValueElement.textContent = '--';\n    lastSmoothnessValue = 0;\n    torqueValueElement.textContent = '--';\n    lastTorqueValue = 0;\n    // Initialize all optional fields\n    rawMeasurement.pedalPowerBalance = null;\n    rawMeasurement.accumulatedTorque = null;\n    rawMeasurement.wheelRevolutionData = null;\n    rawMeasurement.crankRevolutionData = null;\n    rawMeasurement.extremeForceAngles = null;\n    rawMeasurement.topBottomDeadSpotAngles = null;\n    rawMeasurement.accumulatedEnergy = null;\n    rawMeasurement.torqueEffectiveness = null;\n    rawMeasurement.pedalSmoothness = null;\n    // Check for Pedal Power Balance (Flag bit 0)\n    if (flags & 0x0001) {\n        const balance = value.getUint8(offset);\n        rawMeasurement.pedalPowerBalance = balance;\n        // Balance is percentage of power from the right pedal\n        balanceValueElement.textContent = `${100 - balance}/${balance}`;\n        lastBalanceValue = balance;\n        offset += 1;\n    }\n    // Accumulated Torque (Flag bit 2)\n    if (flags & 0x0004) {\n        rawMeasurement.accumulatedTorque = value.getUint16(offset, true);\n        offset += 2;\n    }\n    // Wheel Revolution Data (Flag bits 4 & 5)\n    if (flags & 0x0010) {\n        rawMeasurement.wheelRevolutionData = {\n            cumulativeWheelRevolutions: value.getUint32(offset, true),\n            lastWheelEventTime: value.getUint16(offset + 4, true)\n        };\n        offset += 6;\n    }\n    // Crank Revolution Data (Flag bit 6)\n    if (flags & 0x0020) {\n        rawMeasurement.crankRevolutionData = {\n            cumulativeCrankRevolutions: value.getUint16(offset, true),\n            lastCrankEventTime: value.getUint16(offset + 2, true)\n        };\n        offset += 4;\n    }\n    // Extreme Force/Angle Magnitudes (Flag bits 7 & 8)\n    if (flags & 0x0080) {\n        rawMeasurement.extremeForceAngles = {\n            maximumForceMagnitude: value.getInt16(offset, true),\n            minimumForceMagnitude: value.getInt16(offset + 2, true),\n            maximumTorqueMagnitude: value.getInt16(offset + 4, true)\n        };\n        offset += 6;\n    }\n    // Top/Bottom Dead Spot Angles (Flag bits 9 & 10)\n    if (flags & 0x0200) {\n        rawMeasurement.topBottomDeadSpotAngles = {\n            topDeadSpotAngle: value.getUint16(offset, true),\n            bottomDeadSpotAngle: value.getUint16(offset + 2, true)\n        };\n        offset += 4;\n    }\n    // Accumulated Energy (Flag bit 11)\n    if (flags & 0x0800) {\n        rawMeasurement.accumulatedEnergy = value.getUint16(offset, true);\n        offset += 2;\n    }\n    // Check for Torque Effectiveness and Pedal Smoothness (Flag bit 12)\n    if (flags & 0x1000) {\n        const torqueEffectiveness = value.getUint8(offset) / 2; // In percent\n        const pedalSmoothness = value.getUint8(offset + 2) / 2; // In percent\n        rawMeasurement.torqueEffectiveness = torqueEffectiveness;\n        rawMeasurement.pedalSmoothness = pedalSmoothness;\n        torqueValueElement.textContent = torqueEffectiveness.toFixed(1);\n        smoothnessValueElement.textContent = pedalSmoothness.toFixed(1);\n        lastTorqueValue = torqueEffectiveness;\n        lastSmoothnessValue = pedalSmoothness;\n        offset += 4; // 2 bytes for TE, 2 bytes for PS\n    }\n    // Store the complete raw measurement\n    rawPowerMeasurements.push(rawMeasurement);\n}\n/**\n * Parses the Cycling Power Measurement characteristic data.\n * The data is a DataView object with a flags field and the power value.\n * The instantaneous power is a 16-bit signed integer starting at the 3rd byte (offset 2).\n * Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n */ function parsePowerMeasurement(value) {\n    // The first 2 bytes are flags. The next 2 bytes are the instantaneous power.\n    // The power value is a signed 16-bit integer (sint16)\n    const instantaneousPower = value.getInt16(2, /*littleEndian=*/ true);\n    return instantaneousPower;\n}\nfunction onDisconnected() {\n    statusText.textContent = 'Device disconnected.';\n    powerStatusIndicator.className = 'status-indicator';\n    deviceNameElement.textContent = '';\n    powerValueElement.textContent = '--';\n    balanceValueElement.textContent = '--';\n    smoothnessValueElement.textContent = '--';\n    torqueValueElement.textContent = '--';\n    connectButton.disabled = false;\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n        dataLoggerInterval = null;\n    }\n    if (powerMeterDevice) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n        powerMeterDevice = null;\n    }\n    lastPowerValue = 0;\n    lastBalanceValue = 0;\n    lastSmoothnessValue = 0;\n    lastTorqueValue = 0;\n}\nconst heartData = [];\nlet hrDataLoggerInterval = null;\nconst hrConnectButton = document.getElementById('hrConnectButton');\nconst hrStatusText = document.getElementById('hrStatus');\nconst hrValue = document.getElementById('hr-value');\nconst hrDeviceName = document.getElementById('hrDeviceName');\nlet hrBluetoothDevice = null;\nhrConnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        hrStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    try {\n        hrStatusText.textContent = 'Scanning for devices...';\n        hrStatusIndicator.className = 'status-indicator connecting';\n        // Filter for devices that advertise the 'heart_rate' service\n        hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        'heart_rate'\n                    ]\n                }\n            ]\n        });\n        hrStatusText.textContent = 'Connecting to device...';\n        hrDeviceName.textContent = `Device: ${hrBluetoothDevice.name}`;\n        // Add a listener for when the device gets disconnected\n        hrBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedHr);\n        const hrServer = await hrBluetoothDevice.gatt.connect();\n        const hrService = await hrServer.getPrimaryService('heart_rate');\n        const hrCharacteristic = await hrService.getCharacteristic('heart_rate_measurement');\n        // Start notifications to receive heart rate data\n        await hrCharacteristic.startNotifications();\n        hrCharacteristic.addEventListener('characteristicvaluechanged', handleHeartRateChanged);\n        hrStatusText.textContent = 'Connected!';\n        hrStatusIndicator.className = 'status-indicator connected';\n        hrConnectButton.disabled = true;\n    } catch (error) {\n        hrStatusText.textContent = `Error: ${error.message}`;\n        hrStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n    }\n});\nfunction handleHeartRateChanged(event) {\n    const value = event.target.value;\n    const heartRate = parseHeartRate(value);\n    hrValue.textContent = heartRate;\n    lastHeartRateValue = heartRate;\n}\n/**\n * The heart rate measurement is a DataView object.\n * The first byte is a flag, and the subsequent byte(s) are the heart rate value.\n * We need to check the first bit of the flag to see if the value is 8-bit or 16-bit.\n */ function parseHeartRate(value) {\n    const flags = value.getUint8(0);\n    // Check if the heart rate value format is UINT16 (bit 0 is 1) or UINT8 (bit 0 is 0)\n    const is16bit = flags & 0x1;\n    if (is16bit) // If 16-bit, read 2 bytes starting from the second byte\n    return value.getUint16(1, /*littleEndian=*/ true);\n    else // If 8-bit, read 1 byte starting from the second byte\n    return value.getUint8(1);\n}\nfunction onDisconnectedHr() {\n    hrStatusText.textContent = 'Device disconnected.';\n    hrStatusIndicator.className = 'status-indicator';\n    hrDeviceName.textContent = '';\n    hrValue.textContent = '--';\n    hrConnectButton.disabled = false;\n    hrBluetoothDevice = null;\n    lastHeartRateValue = 0;\n}\nconst speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\nconst cadenceValueElement = document.getElementById('cadence-value');\nconst speedValueElement = document.getElementById('speed-value');\nconst distanceValueElement = document.getElementById('distance-value');\nconst cadenceStatusText = document.getElementById('cadenceStatus');\nconst cadenceDeviceName = document.getElementById('cadenceDeviceName');\nlet speedCadenceBluetoothDevice = null;\nconst WHEEL_CIRCUMFERENCE = 2.105; // meters, for a 700x25c tire\nspeedCadenceConnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        cadenceStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    try {\n        cadenceStatusText.textContent = 'Scanning for sensors...';\n        cadenceStatusIndicator.className = 'status-indicator connecting';\n        speedStatusIndicator.className = 'status-indicator connecting';\n        speedCadenceBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        CYCLING_CADENCE_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        cadenceStatusText.textContent = 'Connecting to device...';\n        cadenceDeviceName.textContent = `Device: ${speedCadenceBluetoothDevice.name}`;\n        speedCadenceBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedSpeedCadence);\n        const server = await speedCadenceBluetoothDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CSC_MEASUREMENT_CHARACTERISTIC_UUID);\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handleSpeedCadenceMeasurement);\n        cadenceStatusText.textContent = 'Connected!';\n        cadenceStatusIndicator.className = 'status-indicator connected';\n        speedStatusIndicator.className = 'status-indicator connected';\n        speedCadenceConnectButton.disabled = true;\n    } catch (error) {\n        cadenceStatusText.textContent = `Error: ${error.message}`;\n        cadenceStatusIndicator.className = 'status-indicator';\n        speedStatusIndicator.className = 'status-indicator';\n        console.error('Speed/Cadence connection failed:', error);\n    }\n});\nlet lastWheelRevs = 0;\nlet lastWheelTime = 0;\nlet lastCrankRevs = 0;\nlet lastCrankTime = 0;\nfunction handleSpeedCadenceMeasurement(event) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n    const wheelRevsPresent = flags & 0x01;\n    const crankRevsPresent = flags & 0x02;\n    if (wheelRevsPresent) {\n        const cumulativeWheelRevolutions = value.getUint32(offset, true);\n        const lastWheelEventTime = value.getUint16(offset + 4, true); // 1/1024 seconds\n        offset += 6;\n        if (lastWheelRevs > 0) {\n            const revs = cumulativeWheelRevolutions - lastWheelRevs;\n            const time = (lastWheelEventTime - lastWheelTime) / 1024; // in seconds\n            if (time > 0) {\n                const distance = revs * WHEEL_CIRCUMFERENCE; // meters\n                totalDistance += distance / 1000; // km\n                const speed = distance / time * 3.6; // km/h\n                speedValueElement.textContent = Math.round(speed);\n                lastSpeedValue = Math.round(speed);\n                distanceValueElement.textContent = totalDistance.toFixed(2);\n            }\n        }\n        lastWheelRevs = cumulativeWheelRevolutions;\n        lastWheelTime = lastWheelEventTime;\n    }\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n        if (lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - lastCrankRevs;\n            const time = (lastCrankEventTime - lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = revs / time * 60; // RPM\n                cadenceValueElement.textContent = Math.round(cadence);\n                lastCadenceValue = Math.round(cadence);\n            }\n        }\n        lastCrankRevs = cumulativeCrankRevolutions;\n        lastCrankTime = lastCrankEventTime;\n    }\n}\nfunction onDisconnectedSpeedCadence() {\n    cadenceStatusText.textContent = 'Device disconnected.';\n    cadenceStatusIndicator.className = 'status-indicator';\n    speedStatusIndicator.className = 'status-indicator';\n    cadenceDeviceName.textContent = '';\n    cadenceValueElement.textContent = '--';\n    speedValueElement.textContent = '--';\n    speedCadenceConnectButton.disabled = false;\n    speedCadenceBluetoothDevice = null;\n    lastCadenceValue = 0;\n    lastSpeedValue = 0;\n}\n\n//# sourceMappingURL=power-saver.47c95d6b.js.map\n","// Screen Wake Lock\nlet wakeLock = null;\n\nasync function requestWakeLock() {\n    if ('wakeLock' in navigator) {\n        try {\n            wakeLock = await navigator.wakeLock.request('screen');\n            console.log('Screen Wake Lock is active.');\n            wakeLock.addEventListener('release', () => {\n                console.log('Screen Wake Lock was released.');\n            });\n        } catch (err) {\n            console.error(`${err.name}, ${err.message}`);\n        }\n    }\n}\n\nasync function releaseWakeLock() {\n    if (wakeLock !== null) {\n        await wakeLock.release();\n        wakeLock = null;\n    }\n}\n\nconst connectButton = document.getElementById('connectButton');\nconst statusText = document.getElementById('status');\nconst powerValueElement = document.getElementById('power-value');\nconst deviceNameElement = document.getElementById('device-name');\nconst exportButtons = document.getElementById('export-buttons');\nconst exportJsonButton = document.getElementById('exportJsonButton');\nconst exportCsvButton = document.getElementById('exportCsvButton');\nconst exportRawJsonButton = document.getElementById('exportRawJsonButton');\nconst exportRawCsvButton = document.getElementById('exportRawCsvButton');\n\n// Toggle elements\nconst toggleConnectSection = document.getElementById('toggleConnectSection');\nconst toggleExportSection = document.getElementById('toggleExportSection');\nconst connectSection = document.getElementById('connectSection');\nconst exportSection = document.getElementById('exportSection');\nconst connectToggleText = document.getElementById('connectToggleText');\nconst exportToggleText = document.getElementById('exportToggleText');\n\nconst balanceValueElement = document.getElementById('balance-value');\nconst smoothnessValueElement = document.getElementById('smoothness-value');\nconst torqueValueElement = document.getElementById('torque-value');\n\n// Status indicator elements\nconst powerStatusIndicator = document.getElementById('power-status-indicator');\nconst hrStatusIndicator = document.getElementById('hr-status-indicator');\nconst cadenceStatusIndicator = document.getElementById('cadence-status-indicator');\nconst speedStatusIndicator = document.getElementById('speed-status-indicator');\nconst distanceStatusIndicator = document.getElementById('distance-status-indicator');\n\n// Initialize all status indicators to disconnected state\npowerStatusIndicator.className = 'status-indicator';\nhrStatusIndicator.className = 'status-indicator';\ncadenceStatusIndicator.className = 'status-indicator';\nspeedStatusIndicator.className = 'status-indicator';\ndistanceStatusIndicator.className = 'status-indicator';\n\n// Toggle functionality for connect section\ntoggleConnectSection.addEventListener('click', () => {\n    const isHidden = connectSection.style.display === 'none';\n    if (isHidden) {\n        connectSection.style.display = 'block';\n        connectToggleText.textContent = 'Hide Connect Devices';\n        toggleConnectSection.classList.remove('collapsed');\n    } else {\n        connectSection.style.display = 'none';\n        connectToggleText.textContent = 'Show Connect Devices';\n        toggleConnectSection.classList.add('collapsed');\n    }\n    updateDashboardLayout();\n});\n\n// Toggle functionality for export section\ntoggleExportSection.addEventListener('click', () => {\n    const isHidden = exportSection.style.display === 'none';\n    if (isHidden) {\n        exportSection.style.display = 'block';\n        exportToggleText.textContent = 'Hide Export Data';\n        toggleExportSection.classList.remove('collapsed');\n    } else {\n        exportSection.style.display = 'none';\n        exportToggleText.textContent = 'Show Export Data';\n        toggleExportSection.classList.add('collapsed');\n    }\n    updateDashboardLayout();\n});\n\n// Function to update dashboard layout based on visible sections\nfunction updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const connectHidden = connectSection.style.display === 'none';\n    const exportHidden = exportSection.style.display === 'none';\n\n    if (connectHidden && exportHidden) {\n        dashboard.classList.add('maximized');\n    } else {\n        dashboard.classList.remove('maximized');\n    }\n}\n\n// Initialize export section as collapsed\ntoggleExportSection.classList.add('collapsed');\nupdateDashboardLayout();\n\n\nlet powerData = [];\nlet rawPowerMeasurements = [];\nlet lastPowerValue = 0;\nlet lastHeartRateValue = 0;\nlet lastCadenceValue = 0;\nlet lastSpeedValue = 0;\nlet lastBalanceValue = 0;\nlet lastSmoothnessValue = 0;\nlet lastTorqueValue = 0;\nlet totalDistance = 0;\nlet dataLoggerInterval = null;\nlet powerMeterDevice = null;\nconst CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID = 'cycling_power_feature';\nconst CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\n\nconnectButton.addEventListener('click', async () => {\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        statusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n\n    // Reset data from previous session\n    powerData = [];\n    rawPowerMeasurements = [];\n    lastPowerValue = 0;\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval); Torque\n    }\n\n    try {\n        statusText.textContent = 'Scanning for power meters...';\n        powerStatusIndicator.className = 'status-indicator connecting';\n\n        // Scan specifically for devices advertising the Cycling Power service\n        powerMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [{\n                services: [CYCLING_POWER_SERVICE_UUID]\n            }]\n        });\n\n        statusText.textContent = 'Connecting to device...';\n        deviceNameElement.textContent = `Device: ${powerMeterDevice.name || 'Unknown Device'}`;\n\n        powerMeterDevice.addEventListener('gattserverdisconnected', onDisconnected);\n\n        const server = await powerMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);\n\n        // Check for and subscribe to advanced power features if available\n        try {\n            const featureCharacteristic = await service.getCharacteristic(CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID);\n            const features = await featureCharacteristic.readValue();\n            console.log(`Power Features: ${features.getUint32(0, true)}`);\n            // This value can be used to determine what the power meter supports,\n            // but for now we just parse what's in the measurement characteristic.\n        } catch (e) {\n            console.log('Cycling Power Feature characteristic not found.');\n        }\n\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n\n        characteristic.addEventListener('characteristicvaluechanged', handlePowerMeasurement);\n\n        statusText.textContent = 'Connected and receiving data!';\n        powerStatusIndicator.className = 'status-indicator connected';\n        connectButton.disabled = true;\n        // exportButtons.style.display = 'block';\n\n        dataLoggerInterval = setInterval(() => {\n            powerData.push({\n                timestamp: Date.now(),\n                power: lastPowerValue,\n                heartRate: lastHeartRateValue,\n                cadence: lastCadenceValue,\n                speed: lastSpeedValue,\n                distance: totalDistance,\n                balance: lastBalanceValue,\n                smoothness: lastSmoothnessValue,\n                torque: lastTorqueValue\n            });\n        }, 100);\n\n    } catch (error) {\n        statusText.textContent = `Error: ${error.message}`;\n        powerStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n        if (powerMeterDevice) {\n            powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n        }\n    }\n});\n\nexportJsonButton.addEventListener('click', () => {\n    const jsonString = JSON.stringify(powerData, null, 2);\n    const blob = new Blob([jsonString], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\nexportCsvButton.addEventListener('click', () => {\n    let csvContent = 'timestamp,power,heartRate,cadence,speed,distance,balance,smoothness,torque\\n';\n    powerData.forEach(row => {\n        csvContent += `${row.timestamp},${row.power},${row.heartRate},${row.cadence},${row.speed},${row.distance},${row.balance || ''},${row.smoothness || ''},${row.torque || ''}\\n`;\n    });\n\n    const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\n// Export raw power measurements as JSON\nexportRawJsonButton.addEventListener('click', () => {\n    const jsonString = JSON.stringify(rawPowerMeasurements, null, 2);\n    const blob = new Blob([jsonString], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\n// Export raw power measurements as CSV\nexportRawCsvButton.addEventListener('click', () => {\n    let csvContent = 'timestamp,flags,dataLength,instantaneousPower,pedalPowerBalance,accumulatedTorque,wheelRevolutions,wheelEventTime,crankRevolutions,crankEventTime,maxForceMagnitude,minForceMagnitude,maxTorqueMagnitude,topDeadSpotAngle,bottomDeadSpotAngle,accumulatedEnergy,torqueEffectiveness,pedalSmoothness,rawBytes\\n';\n\n    rawPowerMeasurements.forEach(measurement => {\n        const wheelRevs = measurement.wheelRevolutionData ? measurement.wheelRevolutionData.cumulativeWheelRevolutions : '';\n        const wheelTime = measurement.wheelRevolutionData ? measurement.wheelRevolutionData.lastWheelEventTime : '';\n        const crankRevs = measurement.crankRevolutionData ? measurement.crankRevolutionData.cumulativeCrankRevolutions : '';\n        const crankTime = measurement.crankRevolutionData ? measurement.crankRevolutionData.lastCrankEventTime : '';\n        const maxForce = measurement.extremeForceAngles ? measurement.extremeForceAngles.maximumForceMagnitude : '';\n        const minForce = measurement.extremeForceAngles ? measurement.extremeForceAngles.minimumForceMagnitude : '';\n        const maxTorque = measurement.extremeForceAngles ? measurement.extremeForceAngles.maximumTorqueMagnitude : '';\n        const topAngle = measurement.topBottomDeadSpotAngles ? measurement.topBottomDeadSpotAngles.topDeadSpotAngle : '';\n        const bottomAngle = measurement.topBottomDeadSpotAngles ? measurement.topBottomDeadSpotAngles.bottomDeadSpotAngle : '';\n\n        csvContent += `${measurement.timestamp},${measurement.flags},${measurement.dataLength},${measurement.instantaneousPower},${measurement.pedalPowerBalance || ''},${measurement.accumulatedTorque || ''},${wheelRevs},${wheelTime},${crankRevs},${crankTime},${maxForce},${minForce},${maxTorque},${topAngle},${bottomAngle},${measurement.accumulatedEnergy || ''},${measurement.torqueEffectiveness || ''},${measurement.pedalSmoothness || ''},\"${measurement.rawBytes}\"\\n`;\n    });\n\n    const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\n\nfunction handlePowerMeasurement(event) {\n    const value = event.target.value;\n    const timestamp = Date.now();\n\n    // Store raw measurement data for detailed analysis\n    const rawMeasurement = {\n        timestamp: timestamp,\n        flags: value.getUint16(0, true),\n        rawBytes: Array.from(new Uint8Array(value.buffer)).map(b => b.toString(16).padStart(2, '0')).join(' '),\n        dataLength: value.byteLength\n    };\n\n    // The data is a DataView object with a flags field and the power value.\n    // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n    const flags = value.getUint16(0, true);\n    let offset = 2;\n\n    // Power is always present\n    const power = value.getInt16(offset, true);\n    rawMeasurement.instantaneousPower = power;\n    powerValueElement.textContent = power;\n    lastPowerValue = power;\n    offset += 2;\n\n    // Reset optional values\n    balanceValueElement.textContent = '--';\n    lastBalanceValue = 0;\n    smoothnessValueElement.textContent = '--';\n    lastSmoothnessValue = 0;\n    torqueValueElement.textContent = '--';\n    lastTorqueValue = 0;\n\n    // Initialize all optional fields\n    rawMeasurement.pedalPowerBalance = null;\n    rawMeasurement.accumulatedTorque = null;\n    rawMeasurement.wheelRevolutionData = null;\n    rawMeasurement.crankRevolutionData = null;\n    rawMeasurement.extremeForceAngles = null;\n    rawMeasurement.topBottomDeadSpotAngles = null;\n    rawMeasurement.accumulatedEnergy = null;\n    rawMeasurement.torqueEffectiveness = null;\n    rawMeasurement.pedalSmoothness = null;\n\n    // Check for Pedal Power Balance (Flag bit 0)\n    if (flags & 0x0001) {\n        const balance = value.getUint8(offset);\n        rawMeasurement.pedalPowerBalance = balance;\n        // Balance is percentage of power from the right pedal\n        balanceValueElement.textContent = `${100 - balance}/${balance}`;\n        lastBalanceValue = balance;\n        offset += 1;\n    }\n\n    // Accumulated Torque (Flag bit 2)\n    if (flags & 0x0004) {\n        rawMeasurement.accumulatedTorque = value.getUint16(offset, true);\n        offset += 2;\n    }\n\n    // Wheel Revolution Data (Flag bits 4 & 5)\n    if (flags & 0x0010) {\n        rawMeasurement.wheelRevolutionData = {\n            cumulativeWheelRevolutions: value.getUint32(offset, true),\n            lastWheelEventTime: value.getUint16(offset + 4, true)\n        };\n        offset += 6;\n    }\n\n    // Crank Revolution Data (Flag bit 6)\n    if (flags & 0x0020) {\n        rawMeasurement.crankRevolutionData = {\n            cumulativeCrankRevolutions: value.getUint16(offset, true),\n            lastCrankEventTime: value.getUint16(offset + 2, true)\n        };\n        offset += 4;\n    }\n\n    // Extreme Force/Angle Magnitudes (Flag bits 7 & 8)\n    if (flags & 0x0080) {\n        rawMeasurement.extremeForceAngles = {\n            maximumForceMagnitude: value.getInt16(offset, true),\n            minimumForceMagnitude: value.getInt16(offset + 2, true),\n            maximumTorqueMagnitude: value.getInt16(offset + 4, true)\n        };\n        offset += 6;\n    }\n\n    // Top/Bottom Dead Spot Angles (Flag bits 9 & 10)\n    if (flags & 0x0200) {\n        rawMeasurement.topBottomDeadSpotAngles = {\n            topDeadSpotAngle: value.getUint16(offset, true),\n            bottomDeadSpotAngle: value.getUint16(offset + 2, true)\n        };\n        offset += 4;\n    }\n\n    // Accumulated Energy (Flag bit 11)\n    if (flags & 0x0800) {\n        rawMeasurement.accumulatedEnergy = value.getUint16(offset, true);\n        offset += 2;\n    }\n\n    // Check for Torque Effectiveness and Pedal Smoothness (Flag bit 12)\n    if (flags & 0x1000) {\n        const torqueEffectiveness = value.getUint8(offset) / 2; // In percent\n        const pedalSmoothness = value.getUint8(offset + 2) / 2; // In percent\n        rawMeasurement.torqueEffectiveness = torqueEffectiveness;\n        rawMeasurement.pedalSmoothness = pedalSmoothness;\n        torqueValueElement.textContent = torqueEffectiveness.toFixed(1);\n        smoothnessValueElement.textContent = pedalSmoothness.toFixed(1);\n        lastTorqueValue = torqueEffectiveness;\n        lastSmoothnessValue = pedalSmoothness;\n        offset += 4; // 2 bytes for TE, 2 bytes for PS\n    }\n\n    // Store the complete raw measurement\n    rawPowerMeasurements.push(rawMeasurement);\n}\n/**\n * Parses the Cycling Power Measurement characteristic data.\n * The data is a DataView object with a flags field and the power value.\n * The instantaneous power is a 16-bit signed integer starting at the 3rd byte (offset 2).\n * Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n */\nfunction parsePowerMeasurement(value) {\n    // The first 2 bytes are flags. The next 2 bytes are the instantaneous power.\n    // The power value is a signed 16-bit integer (sint16)\n    const instantaneousPower = value.getInt16(2, /*littleEndian=*/ true);\n    return instantaneousPower;\n}\n\nfunction onDisconnected() {\n    statusText.textContent = 'Device disconnected.';\n    powerStatusIndicator.className = 'status-indicator';\n    deviceNameElement.textContent = '';\n    powerValueElement.textContent = '--';\n    balanceValueElement.textContent = '--';\n    smoothnessValueElement.textContent = '--';\n    torqueValueElement.textContent = '--';\n    connectButton.disabled = false;\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n        dataLoggerInterval = null;\n    }\n    if (powerMeterDevice) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n        powerMeterDevice = null;\n    }\n    lastPowerValue = 0;\n    lastBalanceValue = 0;\n    lastSmoothnessValue = 0;\n    lastTorqueValue = 0;\n}\n\n\nconst heartData = [];\nlet hrDataLoggerInterval = null;\n\nconst hrConnectButton = document.getElementById('hrConnectButton');\nconst hrStatusText = document.getElementById('hrStatus');\nconst hrValue = document.getElementById('hr-value');\nconst hrDeviceName = document.getElementById('hrDeviceName');\n\nlet hrBluetoothDevice = null;\n\nhrConnectButton.addEventListener('click', async () => {\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        hrStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n\n    try {\n        hrStatusText.textContent = 'Scanning for devices...';\n        hrStatusIndicator.className = 'status-indicator connecting';\n\n        // Filter for devices that advertise the 'heart_rate' service\n        hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [{\n                services: ['heart_rate']\n            }]\n        });\n\n        hrStatusText.textContent = 'Connecting to device...';\n        hrDeviceName.textContent = `Device: ${hrBluetoothDevice.name}`;\n\n        // Add a listener for when the device gets disconnected\n        hrBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedHr);\n\n        const hrServer = await hrBluetoothDevice.gatt.connect();\n        const hrService = await hrServer.getPrimaryService('heart_rate');\n        const hrCharacteristic = await hrService.getCharacteristic('heart_rate_measurement');\n\n        // Start notifications to receive heart rate data\n        await hrCharacteristic.startNotifications();\n\n        hrCharacteristic.addEventListener('characteristicvaluechanged', handleHeartRateChanged);\n\n        hrStatusText.textContent = 'Connected!';\n        hrStatusIndicator.className = 'status-indicator connected';\n        hrConnectButton.disabled = true;\n\n    } catch (error) {\n        hrStatusText.textContent = `Error: ${error.message}`;\n        hrStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n    }\n});\n\nfunction handleHeartRateChanged(event) {\n    const value = event.target.value;\n    const heartRate = parseHeartRate(value);\n    hrValue.textContent = heartRate;\n    lastHeartRateValue = heartRate;\n}\n\n/**\n * The heart rate measurement is a DataView object.\n * The first byte is a flag, and the subsequent byte(s) are the heart rate value.\n * We need to check the first bit of the flag to see if the value is 8-bit or 16-bit.\n */\nfunction parseHeartRate(value) {\n    const flags = value.getUint8(0);\n    // Check if the heart rate value format is UINT16 (bit 0 is 1) or UINT8 (bit 0 is 0)\n    const is16bit = (flags & 0x1);\n    if (is16bit) {\n        // If 16-bit, read 2 bytes starting from the second byte\n        return value.getUint16(1, /*littleEndian=*/ true);\n    } else {\n        // If 8-bit, read 1 byte starting from the second byte\n        return value.getUint8(1);\n    }\n}\n\nfunction onDisconnectedHr() {\n    hrStatusText.textContent = 'Device disconnected.';\n    hrStatusIndicator.className = 'status-indicator';\n    hrDeviceName.textContent = '';\n    hrValue.textContent = '--';\n    hrConnectButton.disabled = false;\n    hrBluetoothDevice = null;\n    lastHeartRateValue = 0;\n}\n\nconst speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\nconst cadenceValueElement = document.getElementById('cadence-value');\nconst speedValueElement = document.getElementById('speed-value');\nconst distanceValueElement = document.getElementById('distance-value');\nconst cadenceStatusText = document.getElementById('cadenceStatus');\nconst cadenceDeviceName = document.getElementById('cadenceDeviceName');\nlet speedCadenceBluetoothDevice = null;\nconst WHEEL_CIRCUMFERENCE = 2.105; // meters, for a 700x25c tire\n\nspeedCadenceConnectButton.addEventListener('click', async () => {\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        cadenceStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n\n    try {\n        cadenceStatusText.textContent = 'Scanning for sensors...';\n        cadenceStatusIndicator.className = 'status-indicator connecting';\n        speedStatusIndicator.className = 'status-indicator connecting';\n\n        speedCadenceBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [{\n                services: [CYCLING_CADENCE_SERVICE_UUID]\n            }]\n        });\n\n        cadenceStatusText.textContent = 'Connecting to device...';\n        cadenceDeviceName.textContent = `Device: ${speedCadenceBluetoothDevice.name}`;\n\n        speedCadenceBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedSpeedCadence);\n\n        const server = await speedCadenceBluetoothDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CSC_MEASUREMENT_CHARACTERISTIC_UUID);\n\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handleSpeedCadenceMeasurement);\n\n        cadenceStatusText.textContent = 'Connected!';\n        cadenceStatusIndicator.className = 'status-indicator connected';\n        speedStatusIndicator.className = 'status-indicator connected';\n        speedCadenceConnectButton.disabled = true;\n\n    } catch (error) {\n        cadenceStatusText.textContent = `Error: ${error.message}`;\n        cadenceStatusIndicator.className = 'status-indicator';\n        speedStatusIndicator.className = 'status-indicator';\n        console.error('Speed/Cadence connection failed:', error);\n    }\n});\n\nlet lastWheelRevs = 0;\nlet lastWheelTime = 0;\nlet lastCrankRevs = 0;\nlet lastCrankTime = 0;\n\nfunction handleSpeedCadenceMeasurement(event) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n\n    const wheelRevsPresent = (flags & 0x01);\n    const crankRevsPresent = (flags & 0x02);\n\n    if (wheelRevsPresent) {\n        const cumulativeWheelRevolutions = value.getUint32(offset, true);\n        const lastWheelEventTime = value.getUint16(offset + 4, true); // 1/1024 seconds\n        offset += 6;\n\n        if (lastWheelRevs > 0) {\n            const revs = cumulativeWheelRevolutions - lastWheelRevs;\n            const time = (lastWheelEventTime - lastWheelTime) / 1024; // in seconds\n            if (time > 0) {\n                const distance = revs * WHEEL_CIRCUMFERENCE; // meters\n                totalDistance += distance / 1000; // km\n                const speed = (distance / time) * 3.6; // km/h\n                speedValueElement.textContent = Math.round(speed);\n                lastSpeedValue = Math.round(speed);\n                distanceValueElement.textContent = totalDistance.toFixed(2);\n            }\n        }\n        lastWheelRevs = cumulativeWheelRevolutions;\n        lastWheelTime = lastWheelEventTime;\n    }\n\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n\n        if (lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - lastCrankRevs;\n            const time = (lastCrankEventTime - lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = (revs / time) * 60; // RPM\n                cadenceValueElement.textContent = Math.round(cadence);\n                lastCadenceValue = Math.round(cadence);\n            }\n        }\n        lastCrankRevs = cumulativeCrankRevolutions;\n        lastCrankTime = lastCrankEventTime;\n    }\n}\n\nfunction onDisconnectedSpeedCadence() {\n    cadenceStatusText.textContent = 'Device disconnected.';\n    cadenceStatusIndicator.className = 'status-indicator';\n    speedStatusIndicator.className = 'status-indicator';\n    cadenceDeviceName.textContent = '';\n    cadenceValueElement.textContent = '--';\n    speedValueElement.textContent = '--';\n    speedCadenceConnectButton.disabled = false;\n    speedCadenceBluetoothDevice = null;\n    lastCadenceValue = 0;\n    lastSpeedValue = 0;\n}"],"names":["wakeLock","requestWakeLock","navigator","request","console","log","addEventListener","err","error","name","message","releaseWakeLock","release","connectButton","document","getElementById","statusText","powerValueElement","deviceNameElement","exportButtons","exportJsonButton","exportCsvButton","exportRawJsonButton","exportRawCsvButton","toggleConnectSection","toggleExportSection","connectSection","exportSection","connectToggleText","exportToggleText","balanceValueElement","smoothnessValueElement","torqueValueElement","powerStatusIndicator","hrStatusIndicator","cadenceStatusIndicator","speedStatusIndicator","distanceStatusIndicator","updateDashboardLayout","dashboard","querySelector","connectHidden","style","display","exportHidden","classList","add","remove","className","textContent","powerData","rawPowerMeasurements","lastPowerValue","lastHeartRateValue","lastCadenceValue","lastSpeedValue","lastBalanceValue","lastSmoothnessValue","lastTorqueValue","totalDistance","dataLoggerInterval","powerMeterDevice","CYCLING_POWER_SERVICE_UUID","CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID","CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID","CYCLING_CADENCE_SERVICE_UUID","CSC_MEASUREMENT_CHARACTERISTIC_UUID","handlePowerMeasurement","event","value","target","rawMeasurement","timestamp","Date","now","flags","getUint16","rawBytes","Array","from","Uint8Array","buffer","map","b","toString","padStart","join","dataLength","byteLength","offset","power","getInt16","instantaneousPower","pedalPowerBalance","accumulatedTorque","wheelRevolutionData","crankRevolutionData","extremeForceAngles","topBottomDeadSpotAngles","accumulatedEnergy","torqueEffectiveness","pedalSmoothness","balance","getUint8","cumulativeWheelRevolutions","getUint32","lastWheelEventTime","cumulativeCrankRevolutions","lastCrankEventTime","maximumForceMagnitude","minimumForceMagnitude","maximumTorqueMagnitude","topDeadSpotAngle","bottomDeadSpotAngle","toFixed","push","parsePowerMeasurement","onDisconnected","disabled","clearInterval","removeEventListener","bluetooth","Torque","requestDevice","filters","services","server","gatt","connect","service","getPrimaryService","characteristic","getCharacteristic","featureCharacteristic","features","readValue","e","startNotifications","setInterval","heartRate","cadence","speed","distance","smoothness","torque","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","a","createElement","href","year","getFullYear","month","String","getMonth","day","getDate","dateString","download","body","appendChild","click","removeChild","revokeObjectURL","csvContent","forEach","row","measurement","wheelRevs","wheelTime","crankRevs","crankTime","maxForce","minForce","maxTorque","topAngle","bottomAngle","heartData","hrDataLoggerInterval","hrConnectButton","hrStatusText","hrValue","hrDeviceName","hrBluetoothDevice","handleHeartRateChanged","parseHeartRate","onDisconnectedHr","hrServer","hrService","hrCharacteristic","speedCadenceConnectButton","cadenceValueElement","speedValueElement","distanceValueElement","cadenceStatusText","cadenceDeviceName","speedCadenceBluetoothDevice","WHEEL_CIRCUMFERENCE","onDisconnectedSpeedCadence","handleSpeedCadenceMeasurement","lastWheelRevs","lastWheelTime","lastCrankRevs","lastCrankTime","revs","time","Math","round"],"version":3,"file":"power-saver.47c95d6b.js.map"}