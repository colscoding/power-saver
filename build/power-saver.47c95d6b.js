let wakeLock=null;async function requestWakeLock(){if("wakeLock"in navigator)try{wakeLock=await navigator.wakeLock.request("screen"),console.log("Screen Wake Lock is active."),wakeLock.addEventListener("release",()=>{console.log("Screen Wake Lock was released.")})}catch(e){console.error(`${e.name}, ${e.message}`)}}async function releaseWakeLock(){null!==wakeLock&&(await wakeLock.release(),wakeLock=null)}let connectButton=document.getElementById("connectButton"),statusText=document.getElementById("status"),powerValueElement=document.getElementById("power-value"),deviceNameElement=document.getElementById("device-name"),exportButtons=document.getElementById("export-buttons"),exportJsonButton=document.getElementById("exportJsonButton"),exportCsvButton=document.getElementById("exportCsvButton"),exportRawJsonButton=document.getElementById("exportRawJsonButton"),exportRawCsvButton=document.getElementById("exportRawCsvButton"),toggleConnectSection=document.getElementById("toggleConnectSection"),toggleExportSection=document.getElementById("toggleExportSection"),connectSection=document.getElementById("connectSection"),exportSection=document.getElementById("exportSection"),connectToggleText=document.getElementById("connectToggleText"),exportToggleText=document.getElementById("exportToggleText"),balanceValueElement=document.getElementById("balance-value"),smoothnessValueElement=document.getElementById("smoothness-value"),torqueValueElement=document.getElementById("torque-value"),powerStatusIndicator=document.getElementById("power-status-indicator"),hrStatusIndicator=document.getElementById("hr-status-indicator"),cadenceStatusIndicator=document.getElementById("cadence-status-indicator"),speedStatusIndicator=document.getElementById("speed-status-indicator"),distanceStatusIndicator=document.getElementById("distance-status-indicator");function updateDashboardLayout(){let e=document.querySelector(".dashboard"),t="none"===connectSection.style.display,a="none"===exportSection.style.display;t&&a?e.classList.add("maximized"):e.classList.remove("maximized")}powerStatusIndicator.className="status-indicator",hrStatusIndicator.className="status-indicator",cadenceStatusIndicator.className="status-indicator",speedStatusIndicator.className="status-indicator",distanceStatusIndicator.className="status-indicator",toggleConnectSection.addEventListener("click",()=>{"none"===connectSection.style.display?(connectSection.style.display="block",connectToggleText.textContent="Hide Connect Devices",toggleConnectSection.classList.remove("collapsed")):(connectSection.style.display="none",connectToggleText.textContent="Show Connect Devices",toggleConnectSection.classList.add("collapsed")),updateDashboardLayout()}),toggleExportSection.addEventListener("click",()=>{"none"===exportSection.style.display?(exportSection.style.display="block",exportToggleText.textContent="Hide Export Data",toggleExportSection.classList.remove("collapsed")):(exportSection.style.display="none",exportToggleText.textContent="Show Export Data",toggleExportSection.classList.add("collapsed")),updateDashboardLayout()}),toggleExportSection.classList.add("collapsed"),updateDashboardLayout();let powerData=[],rawPowerMeasurements=[],lastPowerValue=0,lastHeartRateValue=0,lastCadenceValue=0,lastSpeedValue=0,lastBalanceValue=0,lastSmoothnessValue=0,lastTorqueValue=0,totalDistance=0,dataLoggerInterval=null,powerMeterDevice=null,CYCLING_POWER_SERVICE_UUID="cycling_power",CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID="cycling_power_measurement",CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID="cycling_power_feature",CYCLING_CADENCE_SERVICE_UUID="cycling_speed_and_cadence",CSC_MEASUREMENT_CHARACTERISTIC_UUID="csc_measurement";function handlePowerMeasurement(e){let t=e.target.value,a={timestamp:Date.now(),flags:t.getUint16(0,!0),rawBytes:Array.from(new Uint8Array(t.buffer)).map(e=>e.toString(16).padStart(2,"0")).join(" "),dataLength:t.byteLength},n=t.getUint16(0,!0),o=2,c=t.getInt16(o,!0);if(a.instantaneousPower=c,powerValueElement.textContent=c,lastPowerValue=c,o+=2,balanceValueElement.textContent="--",lastBalanceValue=0,smoothnessValueElement.textContent="--",lastSmoothnessValue=0,torqueValueElement.textContent="--",lastTorqueValue=0,a.pedalPowerBalance=null,a.accumulatedTorque=null,a.wheelRevolutionData=null,a.crankRevolutionData=null,a.extremeForceAngles=null,a.topBottomDeadSpotAngles=null,a.accumulatedEnergy=null,a.torqueEffectiveness=null,a.pedalSmoothness=null,1&n){let e=t.getUint8(o);a.pedalPowerBalance=e,balanceValueElement.textContent=`${100-e}/${e}`,lastBalanceValue=e,o+=1}if(4&n&&(a.accumulatedTorque=t.getUint16(o,!0),o+=2),16&n&&(a.wheelRevolutionData={cumulativeWheelRevolutions:t.getUint32(o,!0),lastWheelEventTime:t.getUint16(o+4,!0)},o+=6),32&n&&(a.crankRevolutionData={cumulativeCrankRevolutions:t.getUint16(o,!0),lastCrankEventTime:t.getUint16(o+2,!0)},o+=4),128&n&&(a.extremeForceAngles={maximumForceMagnitude:t.getInt16(o,!0),minimumForceMagnitude:t.getInt16(o+2,!0),maximumTorqueMagnitude:t.getInt16(o+4,!0)},o+=6),512&n&&(a.topBottomDeadSpotAngles={topDeadSpotAngle:t.getUint16(o,!0),bottomDeadSpotAngle:t.getUint16(o+2,!0)},o+=4),2048&n&&(a.accumulatedEnergy=t.getUint16(o,!0),o+=2),4096&n){let e=t.getUint8(o)/2,n=t.getUint8(o+2)/2;a.torqueEffectiveness=e,a.pedalSmoothness=n,torqueValueElement.textContent=e.toFixed(1),smoothnessValueElement.textContent=n.toFixed(1),lastTorqueValue=e,lastSmoothnessValue=n,o+=4}rawPowerMeasurements.push(a)}function parsePowerMeasurement(e){return e.getInt16(2,!0)}function onDisconnected(){statusText.textContent="Device disconnected.",powerStatusIndicator.className="status-indicator",deviceNameElement.textContent="",powerValueElement.textContent="--",balanceValueElement.textContent="--",smoothnessValueElement.textContent="--",torqueValueElement.textContent="--",connectButton.disabled=!1,dataLoggerInterval&&(clearInterval(dataLoggerInterval),dataLoggerInterval=null),powerMeterDevice&&(powerMeterDevice.removeEventListener("gattserverdisconnected",onDisconnected),powerMeterDevice=null),lastPowerValue=0,lastBalanceValue=0,lastSmoothnessValue=0,lastTorqueValue=0}connectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){statusText.textContent="Web Bluetooth API is not available.";return}powerData=[],rawPowerMeasurements=[],lastPowerValue=0,dataLoggerInterval&&(clearInterval(dataLoggerInterval),Torque);try{statusText.textContent="Scanning for power meters...",powerStatusIndicator.className="status-indicator connecting",powerMeterDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_POWER_SERVICE_UUID]}]}),statusText.textContent="Connecting to device...",deviceNameElement.textContent=`Device: ${powerMeterDevice.name||"Unknown Device"}`,powerMeterDevice.addEventListener("gattserverdisconnected",onDisconnected);let e=await powerMeterDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_POWER_SERVICE_UUID),a=await t.getCharacteristic("cycling_power_measurement");try{let e=await t.getCharacteristic("cycling_power_feature"),a=await e.readValue();console.log(`Power Features: ${a.getUint32(0,!0)}`)}catch(e){console.log("Cycling Power Feature characteristic not found.")}await a.startNotifications(),a.addEventListener("characteristicvaluechanged",handlePowerMeasurement),statusText.textContent="Connected and receiving data!",powerStatusIndicator.className="status-indicator connected",connectButton.disabled=!0,dataLoggerInterval=setInterval(()=>{powerData.push({timestamp:Date.now(),power:lastPowerValue,heartRate:lastHeartRateValue,cadence:lastCadenceValue,speed:lastSpeedValue,distance:totalDistance,balance:lastBalanceValue,smoothness:lastSmoothnessValue,torque:lastTorqueValue})},100)}catch(e){statusText.textContent=`Error: ${e.message}`,powerStatusIndicator.className="status-indicator",console.error("Connection failed:",e),powerMeterDevice&&powerMeterDevice.removeEventListener("gattserverdisconnected",onDisconnected)}}),exportJsonButton.addEventListener("click",()=>{let e=new Blob([JSON.stringify(powerData,null,2)],{type:"application/json"}),t=URL.createObjectURL(e),a=document.createElement("a");a.href=t;let n=new Date,o=n.getFullYear(),c=String(n.getMonth()+1).padStart(2,"0"),l=String(n.getDate()).padStart(2,"0"),s=`${o}-${c}-${l}`;a.download=`power_data_${s}.json`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(t)}),exportCsvButton.addEventListener("click",()=>{let e="timestamp,power,heartRate,cadence,speed,distance,balance,smoothness,torque\n";powerData.forEach(t=>{e+=`${t.timestamp},${t.power},${t.heartRate},${t.cadence},${t.speed},${t.distance},${t.balance||""},${t.smoothness||""},${t.torque||""}
`});let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a;let o=new Date,c=o.getFullYear(),l=String(o.getMonth()+1).padStart(2,"0"),s=String(o.getDate()).padStart(2,"0"),r=`${c}-${l}-${s}`;n.download=`power_data_${r}.csv`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(a)}),exportRawJsonButton.addEventListener("click",()=>{let e=new Blob([JSON.stringify(rawPowerMeasurements,null,2)],{type:"application/json"}),t=URL.createObjectURL(e),a=document.createElement("a");a.href=t;let n=new Date,o=n.getFullYear(),c=String(n.getMonth()+1).padStart(2,"0"),l=String(n.getDate()).padStart(2,"0"),s=`${o}-${c}-${l}`;a.download=`raw_power_measurements_${s}.json`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(t)}),exportRawCsvButton.addEventListener("click",()=>{let e="timestamp,flags,dataLength,instantaneousPower,pedalPowerBalance,accumulatedTorque,wheelRevolutions,wheelEventTime,crankRevolutions,crankEventTime,maxForceMagnitude,minForceMagnitude,maxTorqueMagnitude,topDeadSpotAngle,bottomDeadSpotAngle,accumulatedEnergy,torqueEffectiveness,pedalSmoothness,rawBytes\n";rawPowerMeasurements.forEach(t=>{let a=t.wheelRevolutionData?t.wheelRevolutionData.cumulativeWheelRevolutions:"",n=t.wheelRevolutionData?t.wheelRevolutionData.lastWheelEventTime:"",o=t.crankRevolutionData?t.crankRevolutionData.cumulativeCrankRevolutions:"",c=t.crankRevolutionData?t.crankRevolutionData.lastCrankEventTime:"",l=t.extremeForceAngles?t.extremeForceAngles.maximumForceMagnitude:"",s=t.extremeForceAngles?t.extremeForceAngles.minimumForceMagnitude:"",r=t.extremeForceAngles?t.extremeForceAngles.maximumTorqueMagnitude:"",i=t.topBottomDeadSpotAngles?t.topBottomDeadSpotAngles.topDeadSpotAngle:"",d=t.topBottomDeadSpotAngles?t.topBottomDeadSpotAngles.bottomDeadSpotAngle:"";e+=`${t.timestamp},${t.flags},${t.dataLength},${t.instantaneousPower},${t.pedalPowerBalance||""},${t.accumulatedTorque||""},${a},${n},${o},${c},${l},${s},${r},${i},${d},${t.accumulatedEnergy||""},${t.torqueEffectiveness||""},${t.pedalSmoothness||""},"${t.rawBytes}"
`});let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),a=URL.createObjectURL(t),n=document.createElement("a");n.href=a;let o=new Date,c=o.getFullYear(),l=String(o.getMonth()+1).padStart(2,"0"),s=String(o.getDate()).padStart(2,"0"),r=`${c}-${l}-${s}`;n.download=`raw_power_measurements_${r}.csv`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(a)});let heartData=[],hrDataLoggerInterval=null,hrConnectButton=document.getElementById("hrConnectButton"),hrStatusText=document.getElementById("hrStatus"),hrValue=document.getElementById("hr-value"),hrDeviceName=document.getElementById("hrDeviceName"),hrBluetoothDevice=null;function handleHeartRateChanged(e){let t=parseHeartRate(e.target.value);hrValue.textContent=t,lastHeartRateValue=t}function parseHeartRate(e){return 1&e.getUint8(0)?e.getUint16(1,!0):e.getUint8(1)}function onDisconnectedHr(){hrStatusText.textContent="Device disconnected.",hrStatusIndicator.className="status-indicator",hrDeviceName.textContent="",hrValue.textContent="--",hrConnectButton.disabled=!1,hrBluetoothDevice=null,lastHeartRateValue=0}hrConnectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){hrStatusText.textContent="Web Bluetooth API is not available.";return}try{hrStatusText.textContent="Scanning for devices...",hrStatusIndicator.className="status-indicator connecting",hrBluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:["heart_rate"]}]}),hrStatusText.textContent="Connecting to device...",hrDeviceName.textContent=`Device: ${hrBluetoothDevice.name}`,hrBluetoothDevice.addEventListener("gattserverdisconnected",onDisconnectedHr);let e=await hrBluetoothDevice.gatt.connect(),t=await e.getPrimaryService("heart_rate"),a=await t.getCharacteristic("heart_rate_measurement");await a.startNotifications(),a.addEventListener("characteristicvaluechanged",handleHeartRateChanged),hrStatusText.textContent="Connected!",hrStatusIndicator.className="status-indicator connected",hrConnectButton.disabled=!0}catch(e){hrStatusText.textContent=`Error: ${e.message}`,hrStatusIndicator.className="status-indicator",console.error("Connection failed:",e)}});let speedCadenceConnectButton=document.getElementById("speedCadenceConnectButton"),cadenceValueElement=document.getElementById("cadence-value"),speedValueElement=document.getElementById("speed-value"),distanceValueElement=document.getElementById("distance-value"),cadenceStatusText=document.getElementById("cadenceStatus"),cadenceDeviceName=document.getElementById("cadenceDeviceName"),speedCadenceBluetoothDevice=null,WHEEL_CIRCUMFERENCE=2.105;speedCadenceConnectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){cadenceStatusText.textContent="Web Bluetooth API is not available.";return}try{cadenceStatusText.textContent="Scanning for sensors...",cadenceStatusIndicator.className="status-indicator connecting",speedStatusIndicator.className="status-indicator connecting",speedCadenceBluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_CADENCE_SERVICE_UUID]}]}),cadenceStatusText.textContent="Connecting to device...",cadenceDeviceName.textContent=`Device: ${speedCadenceBluetoothDevice.name}`,speedCadenceBluetoothDevice.addEventListener("gattserverdisconnected",onDisconnectedSpeedCadence);let e=await speedCadenceBluetoothDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID),a=await t.getCharacteristic("csc_measurement");await a.startNotifications(),a.addEventListener("characteristicvaluechanged",handleSpeedCadenceMeasurement),cadenceStatusText.textContent="Connected!",cadenceStatusIndicator.className="status-indicator connected",speedStatusIndicator.className="status-indicator connected",speedCadenceConnectButton.disabled=!0}catch(e){cadenceStatusText.textContent=`Error: ${e.message}`,cadenceStatusIndicator.className="status-indicator",speedStatusIndicator.className="status-indicator",console.error("Speed/Cadence connection failed:",e)}});let lastWheelRevs=0,lastWheelTime=0,lastCrankRevs=0,lastCrankTime=0;function handleSpeedCadenceMeasurement(e){let t=e.target.value,a=t.getUint8(0),n=1;if(1&a){let e=t.getUint32(n,!0),a=t.getUint16(n+4,!0);if(n+=6,lastWheelRevs>0){let t=e-lastWheelRevs,n=(a-lastWheelTime)/1024;if(n>0){let e=2.105*t;totalDistance+=e/1e3;let a=e/n*3.6;speedValueElement.textContent=Math.round(a),lastSpeedValue=Math.round(a),distanceValueElement.textContent=totalDistance.toFixed(2)}}lastWheelRevs=e,lastWheelTime=a}if(2&a){let e=t.getUint16(n,!0),a=t.getUint16(n+2,!0);if(lastCrankRevs>0){let t=e-lastCrankRevs,n=(a-lastCrankTime)/1024;if(n>0){let e=t/n*60;cadenceValueElement.textContent=Math.round(e),lastCadenceValue=Math.round(e)}}lastCrankRevs=e,lastCrankTime=a}}function onDisconnectedSpeedCadence(){cadenceStatusText.textContent="Device disconnected.",cadenceStatusIndicator.className="status-indicator",speedStatusIndicator.className="status-indicator",cadenceDeviceName.textContent="",cadenceValueElement.textContent="--",speedValueElement.textContent="--",speedCadenceConnectButton.disabled=!1,speedCadenceBluetoothDevice=null,lastCadenceValue=0,lastSpeedValue=0}
//# sourceMappingURL=power-saver.47c95d6b.js.map
