{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["// Screen Wake Lock\nlet wakeLock = null;\nasync function requestWakeLock() {\n    if ('wakeLock' in navigator) try {\n        wakeLock = await navigator.wakeLock.request('screen');\n        wakeLock.addEventListener('release', ()=>{\n        // Wake lock was released\n        });\n    } catch (err) {\n        console.error(`${err.name}, ${err.message}`);\n    }\n}\n// Currently unused but may be needed for future functionality\n// eslint-disable-next-line no-unused-vars\nasync function releaseWakeLock() {\n    if (wakeLock !== null) {\n        await wakeLock.release();\n        wakeLock = null;\n    }\n}\n// TCX Generation Functions\n/**\n * Creates a trackpoint XML element for a single data point\n * @param {Object} dataPoint - Data point with time, power, heartRate, cadence\n * @returns {string} XML trackpoint string\n */ function createTrackpoint(dataPoint) {\n    const translations = {\n        time: (time)=>`<Time>${new Date(time).toISOString()}</Time>`,\n        heartRate: (hr)=>`\n<HeartRateBpm>\n  <Value>${hr}</Value>\n</HeartRateBpm>\n            `.trim(),\n        cadence: (cad)=>`<Cadence>${cad}</Cadence>`,\n        power: (pw)=>`\n<Extensions>\n  <ns2:TPX>\n    <ns2:Watts>${pw}</ns2:Watts>\n  </ns2:TPX>\n</Extensions>\n            `.trim()\n    };\n    const contents = Object.keys(translations).map((key)=>{\n        if (dataPoint[key] === undefined) return '';\n        return translations[key](dataPoint[key]);\n    }).filter((x)=>x).join('\\n');\n    return `\n<Trackpoint>\n  ${contents}\n</Trackpoint>\n`.trim();\n}\n/**\n * Generates TCX XML string from power data for cycling activities\n * @param {Array<Object>} powerData - Array of power measurement objects\n * @returns {string} Complete TCX XML string\n */ function generateTcxString(powerData) {\n    // Validate input data\n    if (!Array.isArray(powerData) || powerData.length === 0) throw new Error('Input power data array is empty or invalid');\n    // Filter and normalize data\n    const validDataPoints = powerData.filter((dataPoint)=>dataPoint && typeof dataPoint === 'object' && dataPoint.timestamp !== undefined && !isNaN(new Date(dataPoint.timestamp).getTime()));\n    if (validDataPoints.length === 0) throw new Error('No valid data points found');\n    // Transform data\n    const normalizeDataPoint = (item)=>({\n            time: item.timestamp,\n            ...item.power !== undefined && {\n                power: item.power\n            },\n            ...item.heartRate !== undefined && {\n                heartRate: item.heartRate\n            },\n            ...item.cadence !== undefined && {\n                cadence: item.cadence\n            }\n        });\n    // Process data\n    let processedData = validDataPoints.map(normalizeDataPoint).sort((a, b)=>a.time - b.time);\n    // Remove leading/trailing entries without power\n    const isEmptyPower = (dataPoint)=>!dataPoint.power || dataPoint.power <= 0;\n    while(processedData.length > 0 && isEmptyPower(processedData[0]))processedData.shift();\n    while(processedData.length > 0 && isEmptyPower(processedData[processedData.length - 1]))processedData.pop();\n    if (processedData.length === 0) throw new Error('No valid power data found after processing');\n    // Calculate exercise statistics\n    const validPowerReadings = processedData.filter((d)=>d.power && d.power > 0).map((d)=>parseFloat(d.power));\n    const avgPower = validPowerReadings.length > 0 ? Math.round(validPowerReadings.reduce((a, b)=>a + b, 0) / validPowerReadings.length) : 0;\n    const maxPower = validPowerReadings.length > 0 ? Math.max(...validPowerReadings) : 0;\n    const startTime = processedData[0].time;\n    const endTime = processedData[processedData.length - 1].time;\n    const duration = Math.round((endTime - startTime) / 1000 / 60); // duration in minutes\n    // Generate activity notes with exercise description and power averages\n    const exerciseDescription = 'Indoor cycling session recorded with Power Saver app.';\n    let powerAveragesText = '';\n    if (typeof powerAverages !== 'undefined' && powerAverages) {\n        const averagesList = [];\n        if (powerAverages['10s'] && powerAverages['10s'].best > 0) averagesList.push(`10s: ${powerAverages['10s'].best}W`);\n        if (powerAverages['30s'] && powerAverages['30s'].best > 0) averagesList.push(`30s: ${powerAverages['30s'].best}W`);\n        if (powerAverages['1m'] && powerAverages['1m'].best > 0) averagesList.push(`1min: ${powerAverages['1m'].best}W`);\n        if (powerAverages['2m'] && powerAverages['2m'].best > 0) averagesList.push(`2min: ${powerAverages['2m'].best}W`);\n        if (powerAverages['4m'] && powerAverages['4m'].best > 0) averagesList.push(`4min: ${powerAverages['4m'].best}W`);\n        if (powerAverages['8m'] && powerAverages['8m'].best > 0) averagesList.push(`8min: ${powerAverages['8m'].best}W`);\n        if (averagesList.length > 0) powerAveragesText = `\\n\\nBest Power Averages: ${averagesList.join(', ')}`;\n    }\n    const sessionStats = `\\nSession Stats: Duration: ${duration} min, Avg Power: ${avgPower}W, Max Power: ${maxPower}W`;\n    const activityNotes = exerciseDescription + sessionStats + powerAveragesText;\n    // Helper function to escape XML special characters\n    const escapeXml = (text)=>{\n        return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n    };\n    // Generate XML\n    const trackpoints = processedData.map(createTrackpoint).join('\\n');\n    const startTimeISO = new Date(startTime).toISOString();\n    const rawXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<TrainingCenterDatabase\n  xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\"\n  xmlns:ns2=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\">\n  <Activities>\n    <Activity Sport=\"Biking\">\n      <Id>${startTimeISO}</Id>\n      <Name>E Bike Indoor Cycling Trainer</Name>\n      <Notes>${escapeXml(activityNotes)}</Notes>\n      <Lap StartTime=\"${startTimeISO}\">\n        <Track>\n        ${trackpoints}\n        </Track>\n      </Lap>\n    </Activity>\n  </Activities>\n</TrainingCenterDatabase>`;\n    return rawXml;\n}\n// Summary Image Generation Functions\n/**\n * Generates a comprehensive summary image with power averages and timeline charts\n * @returns {Promise<HTMLCanvasElement>} Canvas containing the summary image\n */ async function generateSummaryImage() {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    // Calculate required height based on available data\n    let requiredHeight = 200; // Base height for title and headers\n    // Add height for power averages if available\n    if (Object.values(powerAverages).some((avg)=>avg.current > 0 || avg.best > 0)) requiredHeight += 200;\n    // Add height for each chart\n    const singleChartHeight = 350;\n    if (powerData.length > 0) requiredHeight += singleChartHeight;\n    if (heartData.length > 0) requiredHeight += singleChartHeight;\n    if (cadenceData.length > 0) requiredHeight += singleChartHeight;\n    // Set canvas size for high resolution export\n    const width = 1200;\n    const height = Math.max(600, requiredHeight);\n    canvas.width = width;\n    canvas.height = height;\n    // Set background\n    ctx.fillStyle = '#1a1a2e';\n    ctx.fillRect(0, 0, width, height);\n    // Title\n    ctx.fillStyle = '#ffffff';\n    ctx.font = 'bold 36px Arial, sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('Power Meter Summary', width / 2, 50);\n    // Date and time\n    ctx.font = '18px Arial, sans-serif';\n    ctx.fillStyle = '#cccccc';\n    const now = new Date();\n    ctx.fillText(now.toLocaleDateString() + ' ' + now.toLocaleTimeString(), width / 2, 80);\n    // Session duration\n    if (sessionStartTime && powerData.length > 0) {\n        const sessionEnd = powerData[powerData.length - 1].timestamp;\n        const duration = Math.round((sessionEnd - sessionStartTime) / 1000 / 60); // minutes\n        ctx.fillText(`Session Duration: ${duration} minutes`, width / 2, 105);\n    }\n    let yOffset = 130;\n    // Power Averages Section\n    if (Object.values(powerAverages).some((avg)=>avg.current > 0 || avg.best > 0)) {\n        ctx.fillStyle = '#ffffff';\n        ctx.font = 'bold 24px Arial, sans-serif';\n        ctx.textAlign = 'left';\n        ctx.fillText('Power Averages', 50, yOffset);\n        yOffset += 40;\n        const avgData = [\n            {\n                label: '10s',\n                data: powerAverages['10s']\n            },\n            {\n                label: '30s',\n                data: powerAverages['30s']\n            },\n            {\n                label: '1m',\n                data: powerAverages['1m']\n            },\n            {\n                label: '2m',\n                data: powerAverages['2m']\n            },\n            {\n                label: '4m',\n                data: powerAverages['4m']\n            },\n            {\n                label: '8m',\n                data: powerAverages['8m']\n            }\n        ];\n        // Draw power averages table\n        ctx.font = '16px Arial, sans-serif';\n        ctx.fillStyle = '#cccccc';\n        ctx.fillText('Duration', 70, yOffset);\n        ctx.fillText('Current', 200, yOffset);\n        ctx.fillText('Best', 320, yOffset);\n        ctx.fillText('Duration', 470, yOffset);\n        ctx.fillText('Current', 600, yOffset);\n        ctx.fillText('Best', 720, yOffset);\n        yOffset += 30;\n        // Draw averages in two columns\n        for(let i = 0; i < avgData.length; i++){\n            const avg = avgData[i];\n            const xBase = i < 3 ? 70 : 470;\n            const row = i < 3 ? i : i - 3;\n            const y = yOffset + row * 25;\n            ctx.fillStyle = '#ffffff';\n            ctx.fillText(avg.label, xBase, y);\n            ctx.fillStyle = avg.data.current > 0 ? '#3498db' : '#666666';\n            ctx.fillText(avg.data.current + 'W', xBase + 130, y);\n            ctx.fillStyle = avg.data.best > 0 ? '#e74c3c' : '#666666';\n            ctx.fillText(avg.data.best + 'W', xBase + 250, y);\n        }\n        yOffset += 100;\n    }\n    // If no data is available, show a message\n    const hasData = powerData.length > 0 || heartData.length > 0 || cadenceData.length > 0;\n    if (!hasData) {\n        ctx.fillStyle = '#cccccc';\n        ctx.font = '24px Arial, sans-serif';\n        ctx.textAlign = 'center';\n        ctx.fillText('No data recorded yet', width / 2, height / 2);\n        ctx.font = '16px Arial, sans-serif';\n        ctx.fillText('Start recording to see your activity summary', width / 2, height / 2 + 40);\n        return canvas;\n    }\n    // Charts section\n    const chartHeight = 300;\n    const chartWidth = width - 100;\n    const chartStartX = 50;\n    // Power Chart\n    if (powerData.length > 0) {\n        yOffset += 20;\n        ctx.fillStyle = '#ffffff';\n        ctx.font = 'bold 20px Arial, sans-serif';\n        ctx.fillText('Power Timeline', chartStartX, yOffset);\n        yOffset += 30;\n        drawTimelineChart(ctx, powerData, 'power', chartStartX, yOffset, chartWidth, chartHeight, '#3498db', 'W');\n        yOffset += chartHeight + 50;\n    }\n    // Heart Rate Chart\n    if (heartData.length > 0) {\n        ctx.fillStyle = '#ffffff';\n        ctx.font = 'bold 20px Arial, sans-serif';\n        ctx.fillText('Heart Rate Timeline', chartStartX, yOffset);\n        yOffset += 30;\n        drawTimelineChart(ctx, heartData, 'heartRate', chartStartX, yOffset, chartWidth, chartHeight, '#e74c3c', 'BPM');\n        yOffset += chartHeight + 50;\n    }\n    // Cadence Chart\n    if (cadenceData.length > 0) {\n        ctx.fillStyle = '#ffffff';\n        ctx.font = 'bold 20px Arial, sans-serif';\n        ctx.fillText('Cadence Timeline', chartStartX, yOffset);\n        yOffset += 30;\n        drawTimelineChart(ctx, cadenceData, 'cadence', chartStartX, yOffset, chartWidth, chartHeight, '#f39c12', 'RPM');\n        yOffset += chartHeight + 50;\n    }\n    return canvas;\n}\n/**\n * Draws a timeline chart for the given data\n */ function drawTimelineChart(ctx, data, valueKey, x, y, width, height, color, unit) {\n    if (data.length === 0) return;\n    // Draw chart background\n    ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';\n    ctx.fillRect(x, y, width, height);\n    // Draw border\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\n    ctx.lineWidth = 1;\n    ctx.strokeRect(x, y, width, height);\n    // Find min/max values for scaling\n    const values = data.map((d)=>d[valueKey]).filter((v)=>v > 0);\n    if (values.length === 0) return;\n    const minValue = Math.min(...values);\n    const maxValue = Math.max(...values);\n    const range = maxValue - minValue || 1;\n    // Draw Y-axis labels\n    ctx.fillStyle = '#cccccc';\n    ctx.font = '12px Arial, sans-serif';\n    ctx.textAlign = 'right';\n    for(let i = 0; i <= 4; i++){\n        const value = Math.round(minValue + range * i / 4);\n        const labelY = y + height - height * i / 4;\n        ctx.fillText(value + unit, x - 10, labelY + 4);\n    }\n    // Draw chart line\n    ctx.strokeStyle = color;\n    ctx.lineWidth = 2;\n    ctx.beginPath();\n    let firstPoint = true;\n    for(let i = 0; i < data.length; i++){\n        const point = data[i];\n        const value = point[valueKey];\n        if (value > 0) {\n            const chartX = x + i / (data.length - 1) * width;\n            const chartY = y + height - (value - minValue) / range * height;\n            if (firstPoint) {\n                ctx.moveTo(chartX, chartY);\n                firstPoint = false;\n            } else ctx.lineTo(chartX, chartY);\n        }\n    }\n    ctx.stroke();\n    // Draw data points\n    ctx.fillStyle = color;\n    for(let i = 0; i < data.length; i += Math.max(1, Math.floor(data.length / 50))){\n        const point = data[i];\n        const value = point[valueKey];\n        if (value > 0) {\n            const chartX = x + i / (data.length - 1) * width;\n            const chartY = y + height - (value - minValue) / range * height;\n            ctx.beginPath();\n            ctx.arc(chartX, chartY, 3, 0, 2 * Math.PI);\n            ctx.fill();\n        }\n    }\n    // Draw grid lines\n    ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n    ctx.lineWidth = 1;\n    // Horizontal grid lines\n    for(let i = 1; i < 4; i++){\n        const gridY = y + height * i / 4;\n        ctx.beginPath();\n        ctx.moveTo(x, gridY);\n        ctx.lineTo(x + width, gridY);\n        ctx.stroke();\n    }\n    // Add time axis labels\n    if (data.length > 1) {\n        ctx.fillStyle = '#cccccc';\n        ctx.font = '12px Arial, sans-serif';\n        ctx.textAlign = 'center';\n        const startTime = new Date(data[0].timestamp);\n        const endTime = new Date(data[data.length - 1].timestamp);\n        // Start time\n        ctx.fillText(startTime.toLocaleTimeString(), x, y + height + 20);\n        // End time\n        ctx.fillText(endTime.toLocaleTimeString(), x + width, y + height + 20);\n        // Middle time if session is long enough\n        if (data.length > 10) {\n            const middleTime = new Date(data[Math.floor(data.length / 2)].timestamp);\n            ctx.fillText(middleTime.toLocaleTimeString(), x + width / 2, y + height + 20);\n        }\n    }\n    // Add min/max annotations\n    ctx.fillStyle = '#ffffff';\n    ctx.font = '12px Arial, sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText(`Max: ${maxValue}${unit}`, x + 10, y + 20);\n    ctx.fillText(`Min: ${minValue}${unit}`, x + 10, y + 35);\n    ctx.fillText(`Avg: ${Math.round(values.reduce((a, b)=>a + b, 0) / values.length)}${unit}`, x + 10, y + 50);\n}\n// Data Persistence Functions\nconst SESSION_STORAGE_KEY = 'powerMeterSession';\nconst SESSION_TIMEOUT = 86400000; // 24 hours in milliseconds\n/**\n * Save current session data to localStorage\n */ function saveSessionData() {\n    try {\n        const sessionData = {\n            timestamp: Date.now(),\n            powerData: powerData,\n            heartData: heartData,\n            cadenceData: cadenceData,\n            rawPowerMeasurements: rawPowerMeasurements,\n            powerReadings: powerReadings,\n            powerAverages: powerAverages,\n            lastPowerValue: lastPowerValue,\n            lastHeartRateValue: lastHeartRateValue,\n            lastCadenceValue: lastCadenceValue,\n            sessionStartTime: sessionStartTime\n        };\n        localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n    } catch (error) {\n        console.warn('Failed to save session data:', error);\n    }\n}\n/**\n * Load session data from localStorage if available and recent\n * Returns the session data object if available, null if not\n */ function loadSessionData() {\n    try {\n        const savedData = localStorage.getItem(SESSION_STORAGE_KEY);\n        if (!savedData) return null;\n        const sessionData = JSON.parse(savedData);\n        const now = Date.now();\n        // Check if session is too old (older than 24 hours)\n        if (now - sessionData.timestamp > SESSION_TIMEOUT) {\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            return null;\n        }\n        return sessionData;\n    } catch (error) {\n        console.warn('Failed to load session data:', error);\n        localStorage.removeItem(SESSION_STORAGE_KEY);\n        return null;\n    }\n}\n/**\n * Apply session data to restore the session\n */ function restoreSessionData(sessionData) {\n    try {\n        // Restore data arrays\n        if (sessionData.powerData) powerData.length = 0, powerData.push(...sessionData.powerData);\n        if (sessionData.heartData) heartData.length = 0, heartData.push(...sessionData.heartData);\n        if (sessionData.cadenceData) cadenceData.length = 0, cadenceData.push(...sessionData.cadenceData);\n        if (sessionData.rawPowerMeasurements) rawPowerMeasurements.length = 0, rawPowerMeasurements.push(...sessionData.rawPowerMeasurements);\n        if (sessionData.powerReadings) powerReadings.length = 0, powerReadings.push(...sessionData.powerReadings);\n        // Restore power averages completely\n        if (sessionData.powerAverages) Object.assign(powerAverages, sessionData.powerAverages);\n        // Restore last values\n        if (sessionData.lastPowerValue !== undefined) lastPowerValue = sessionData.lastPowerValue;\n        if (sessionData.lastHeartRateValue !== undefined) lastHeartRateValue = sessionData.lastHeartRateValue;\n        if (sessionData.lastCadenceValue !== undefined) lastCadenceValue = sessionData.lastCadenceValue;\n        if (sessionData.sessionStartTime !== undefined) sessionStartTime = sessionData.sessionStartTime;\n        // Update displays with restored data\n        updateDisplaysFromRestoredData();\n        return true;\n    } catch (error) {\n        console.warn('Failed to restore session data:', error);\n        return false;\n    }\n}\n/**\n * Update displays after restoring session data\n */ function updateDisplaysFromRestoredData() {\n    // Update current metric values\n    powerValueElement.textContent = lastPowerValue || '--';\n    hrValueElement.textContent = lastHeartRateValue || '--';\n    cadenceValueElement.textContent = lastCadenceValue || '--';\n    // Update power averages display\n    updatePowerAveragesDisplay();\n    // Show session restoration notification\n    if (powerData.length > 0) showSessionRestoredNotification();\n}\n/**\n * Show notification that session was restored\n */ function showSessionRestoredNotification() {\n    const notification = document.createElement('div');\n    notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #4CAF50;\n        color: white;\n        padding: 1rem 1.5rem;\n        border-radius: 8px;\n        z-index: 1000;\n        font-size: 0.9rem;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        animation: slideIn 0.3s ease-out;\n    `;\n    notification.textContent = `Session restored! ${powerData.length} data points recovered.`;\n    // Add animation\n    const style = document.createElement('style');\n    style.textContent = `\n        @keyframes slideIn {\n            from { transform: translateX(100%); opacity: 0; }\n            to { transform: translateX(0); opacity: 1; }\n        }\n    `;\n    document.head.appendChild(style);\n    document.body.appendChild(notification);\n    // Remove notification after 5 seconds\n    setTimeout(()=>{\n        notification.style.animation = 'slideIn 0.3s ease-out reverse';\n        setTimeout(()=>{\n            if (notification.parentNode) notification.parentNode.removeChild(notification);\n            if (style.parentNode) style.parentNode.removeChild(style);\n        }, 300);\n    }, 5000);\n}\n/**\n * Clear session data from localStorage\n */ function clearSessionData() {\n    localStorage.removeItem(SESSION_STORAGE_KEY);\n}\nconst connectButton = document.getElementById('connectButton');\nconst statusText = document.getElementById('status');\nconst powerValueElement = document.getElementById('power-value');\nconst hrValueElement = document.getElementById('hr-value');\nconst cadenceValueElement = document.getElementById('cadence-value');\nconst deviceNameElement = document.getElementById('device-name');\nconst exportJsonButton = document.getElementById('exportJsonButton');\nconst exportCsvButton = document.getElementById('exportCsvButton');\nconst exportTcxButton = document.getElementById('exportTcxButton');\nconst exportRawJsonButton = document.getElementById('exportRawJsonButton');\nconst exportRawCsvButton = document.getElementById('exportRawCsvButton');\nconst exportImageButton = document.getElementById('exportImageButton');\nconst clearSessionButton = document.getElementById('clearSessionButton');\n// Power averages elements\nconst avg10sCurrentElement = document.getElementById('avg10s-current');\nconst avg10sBestElement = document.getElementById('avg10s-best');\nconst avg30sCurrentElement = document.getElementById('avg30s-current');\nconst avg30sBestElement = document.getElementById('avg30s-best');\nconst avg1mCurrentElement = document.getElementById('avg1m-current');\nconst avg1mBestElement = document.getElementById('avg1m-best');\nconst avg2mCurrentElement = document.getElementById('avg2m-current');\nconst avg2mBestElement = document.getElementById('avg2m-best');\nconst avg4mCurrentElement = document.getElementById('avg4m-current');\nconst avg4mBestElement = document.getElementById('avg4m-best');\nconst avg8mCurrentElement = document.getElementById('avg8m-current');\nconst avg8mBestElement = document.getElementById('avg8m-best');\n// Toggle elements\nconst toggleConnectSection = document.getElementById('toggleConnectSection');\nconst toggleExportSection = document.getElementById('toggleExportSection');\nconst connectSection = document.getElementById('connectSection');\nconst exportSection = document.getElementById('exportSection');\nconst powerAveragesSection = document.getElementById('powerAveragesSection');\nconst connectToggleText = document.getElementById('connectToggleText');\nconst exportToggleText = document.getElementById('exportToggleText');\n// Hamburger menu elements\nconst hamburgerBtn = document.getElementById('hamburgerButton');\nconst menuDropdown = document.getElementById('menuDropdown');\nconst powerAveragesToggle = document.getElementById('powerAveragesToggle');\nconst powerMetricToggle = document.getElementById('powerMetricToggle');\nconst heartRateMetricToggle = document.getElementById('heartRateMetricToggle');\nconst cadenceMetricToggle = document.getElementById('cadenceMetricToggle');\nconst connectSectionToggle = document.getElementById('connectSectionToggle');\nconst exportSectionToggle = document.getElementById('exportSectionToggle');\nconst loadDebugDataMenuItem = document.getElementById('loadDebugDataMenuItem');\nconst showInfoMenuItem = document.getElementById('showInfoMenuItem');\nconst showQrCodeMenuItem = document.getElementById('showQrCodeMenuItem');\n// Metric card elements\nconst powerCard = document.querySelector('.power-card');\nconst heartRateCard = document.querySelector('.hr-card');\nconst cadenceCard = document.querySelector('.cadence-card');\n// Status indicator elements\nconst powerStatusIndicator = document.getElementById('power-status-indicator');\nconst hrStatusIndicator = document.getElementById('hr-status-indicator');\nconst cadenceStatusIndicator = document.getElementById('cadence-status-indicator');\n// Initialize all status indicators to disconnected state\npowerStatusIndicator.className = 'status-indicator';\nhrStatusIndicator.className = 'status-indicator';\ncadenceStatusIndicator.className = 'status-indicator';\n// Only add event listeners if elements exist\nif (hamburgerBtn && menuDropdown) {\n    // Hamburger menu functionality\n    hamburgerBtn.addEventListener('click', function() {\n        const isActive = menuDropdown.classList.contains('active');\n        if (isActive) menuDropdown.classList.remove('active');\n        else menuDropdown.classList.add('active');\n    });\n    // Close menu when clicking outside\n    document.addEventListener('click', function(event) {\n        if (!event.target.closest('.hamburger-menu')) menuDropdown.classList.remove('active');\n    });\n} else console.error('Hamburger menu elements not found:', {\n    hamburgerBtn: !!hamburgerBtn,\n    menuDropdown: !!menuDropdown\n});\nif (powerAveragesToggle && powerAveragesSection) {\n    // Power averages toggle via hamburger menu\n    let powerAveragesVisible = false;\n    powerAveragesToggle.addEventListener('click', function() {\n        powerAveragesVisible = !powerAveragesVisible;\n        if (powerAveragesVisible) {\n            powerAveragesSection.style.display = 'block';\n            powerAveragesToggle.classList.add('active');\n        } else {\n            powerAveragesSection.style.display = 'none';\n            powerAveragesToggle.classList.remove('active');\n        }\n        manageCollapsedSectionsLayout();\n    });\n} else console.error('Power averages toggle elements not found:', {\n    powerAveragesToggle: !!powerAveragesToggle,\n    powerAveragesSection: !!powerAveragesSection\n});\n// Power metric toggle via hamburger menu\nif (powerMetricToggle && powerCard) {\n    let powerMetricVisible = true; // Start visible by default\n    powerMetricToggle.classList.add('active'); // Set initial active state\n    powerMetricToggle.addEventListener('click', function() {\n        powerMetricVisible = !powerMetricVisible;\n        if (powerMetricVisible) {\n            powerCard.style.display = 'block';\n            powerMetricToggle.classList.add('active');\n        } else {\n            powerCard.style.display = 'none';\n            powerMetricToggle.classList.remove('active');\n        }\n    });\n} else console.error('Power metric toggle elements not found:', {\n    powerMetricToggle: !!powerMetricToggle,\n    powerCard: !!powerCard\n});\n// Heart rate metric toggle via hamburger menu\nif (heartRateMetricToggle && heartRateCard) {\n    let heartRateMetricVisible = true; // Start visible by default\n    heartRateMetricToggle.classList.add('active'); // Set initial active state\n    heartRateMetricToggle.addEventListener('click', function() {\n        heartRateMetricVisible = !heartRateMetricVisible;\n        if (heartRateMetricVisible) {\n            heartRateCard.style.display = 'block';\n            heartRateMetricToggle.classList.add('active');\n        } else {\n            heartRateCard.style.display = 'none';\n            heartRateMetricToggle.classList.remove('active');\n        }\n    });\n} else console.error('Heart rate metric toggle elements not found:', {\n    heartRateMetricToggle: !!heartRateMetricToggle,\n    heartRateCard: !!heartRateCard\n});\n// Cadence metric toggle via hamburger menu\nif (cadenceMetricToggle && cadenceCard) {\n    let cadenceMetricVisible = true; // Start visible by default\n    cadenceMetricToggle.classList.add('active'); // Set initial active state\n    cadenceMetricToggle.addEventListener('click', function() {\n        cadenceMetricVisible = !cadenceMetricVisible;\n        if (cadenceMetricVisible) {\n            cadenceCard.style.display = 'block';\n            cadenceMetricToggle.classList.add('active');\n        } else {\n            cadenceCard.style.display = 'none';\n            cadenceMetricToggle.classList.remove('active');\n        }\n    });\n} else console.error('Cadence metric toggle elements not found:', {\n    cadenceMetricToggle: !!cadenceMetricToggle,\n    cadenceCard: !!cadenceCard\n});\n// Connect section toggle via hamburger menu\nif (connectSectionToggle && connectSection) {\n    let connectSectionVisible = true; // Start visible by default\n    connectSectionToggle.classList.add('active'); // Set initial active state\n    connectSectionToggle.addEventListener('click', function() {\n        connectSectionVisible = !connectSectionVisible;\n        if (connectSectionVisible) {\n            connectSection.style.display = 'block';\n            connectSectionToggle.classList.add('active');\n        } else {\n            connectSection.style.display = 'none';\n            connectSectionToggle.classList.remove('active');\n        }\n    });\n} else console.error('Connect section toggle elements not found:', {\n    connectSectionToggle: !!connectSectionToggle,\n    connectSection: !!connectSection\n});\n// Export section toggle via hamburger menu\nif (exportSectionToggle && exportSection) {\n    let exportSectionVisible = false; // Start hidden by default (as it currently is)\n    // exportSectionToggle starts inactive since export section is initially hidden\n    exportSectionToggle.addEventListener('click', function() {\n        exportSectionVisible = !exportSectionVisible;\n        if (exportSectionVisible) {\n            exportSection.style.display = 'block';\n            exportSectionToggle.classList.add('active');\n        } else {\n            exportSection.style.display = 'none';\n            exportSectionToggle.classList.remove('active');\n        }\n    });\n} else console.error('Export section toggle elements not found:', {\n    exportSectionToggle: !!exportSectionToggle,\n    exportSection: !!exportSection\n});\n// Debug data functionality\nif (loadDebugDataMenuItem) loadDebugDataMenuItem.addEventListener('click', function() {\n    loadDebugData();\n    // Close the menu after loading debug data\n    if (menuDropdown) menuDropdown.classList.remove('active');\n});\nelse console.error('Load debug data menu item not found');\n// Info functionality\nif (showInfoMenuItem) showInfoMenuItem.addEventListener('click', function() {\n    showAppInfo();\n    // Close the menu after showing info\n    if (menuDropdown) menuDropdown.classList.remove('active');\n});\nelse console.error('Show info menu item not found');\n// QR Code functionality\nif (showQrCodeMenuItem) showQrCodeMenuItem.addEventListener('click', function() {\n    showQrCodeModal();\n    // Close the menu after showing QR code\n    if (menuDropdown) menuDropdown.classList.remove('active');\n});\nelse console.error('Show QR code menu item not found');\n// Toggle functionality for connect section\ntoggleConnectSection.addEventListener('click', ()=>{\n    const connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\n    const sectionHeader = connectSection.querySelector('.section-header');\n    const isHidden = connectButtons[0].style.display === 'none';\n    if (isHidden) {\n        connectButtons.forEach((btn)=>btn.style.display = 'block');\n        connectToggleText.textContent = 'Hide Connect Devices';\n        toggleConnectSection.classList.remove('collapsed');\n        connectSection.classList.remove('collapsed');\n        sectionHeader.classList.remove('collapsed');\n    } else {\n        connectButtons.forEach((btn)=>btn.style.display = 'none');\n        connectToggleText.textContent = 'Show Connect Devices';\n        toggleConnectSection.classList.add('collapsed');\n        connectSection.classList.add('collapsed');\n        sectionHeader.classList.add('collapsed');\n    }\n// Don't call updateDashboardLayout for bottom controls\n});\n// Toggle functionality for export section\ntoggleExportSection.addEventListener('click', ()=>{\n    const exportButtons = document.getElementById('export-buttons');\n    const sectionHeader = exportSection.querySelector('.section-header');\n    const isHidden = exportButtons.style.display === 'none';\n    if (isHidden) {\n        exportSection.style.display = 'block';\n        exportButtons.style.display = 'flex';\n        exportToggleText.textContent = 'Hide Export Data';\n        toggleExportSection.classList.remove('collapsed');\n        exportSection.classList.remove('collapsed');\n        sectionHeader.classList.remove('collapsed');\n    } else {\n        exportButtons.style.display = 'none';\n        exportToggleText.textContent = 'Show Export Data';\n        toggleExportSection.classList.add('collapsed');\n        exportSection.classList.add('collapsed');\n        sectionHeader.classList.add('collapsed');\n    }\n// Don't call updateDashboardLayout for bottom controls\n});\n// Function to update dashboard layout based on visible sections\nfunction updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const powerAveragesHidden = powerAveragesSection && powerAveragesSection.style.display === 'none';\n    if (powerAveragesHidden) dashboard.classList.add('maximized');\n    else dashboard.classList.remove('maximized');\n    // Manage horizontal layout for collapsed sections (excluding bottom controls)\n    manageCollapsedSectionsLayout();\n}\n// Function to manage horizontal layout of collapsed sections\nfunction manageCollapsedSectionsLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    // Only manage power averages section for collapsed layout -\n    // connect and export sections are now bottom controls and stay at bottom\n    // Note: collapsedSections logic simplified since only power averages section is managed now\n    // Remove any existing collapsed sections row\n    const existingRow = document.querySelector('.collapsed-sections-row');\n    if (existingRow) {\n        // Move sections back to their original positions\n        const sectionsInRow = existingRow.querySelectorAll('.power-averages-section');\n        sectionsInRow.forEach((section)=>{\n            // Insert sections back after the dashboard\n            dashboard.parentNode.insertBefore(section, dashboard.nextSibling);\n        });\n        existingRow.remove();\n    }\n    // Power averages section doesn't need horizontal grouping since it's the only\n    // section that can be managed this way now\n    dashboard.classList.remove('has-collapsed-sections');\n}\n// Initialize sections - connect section visible, export section hidden (controlled by hamburger menu)\nconst connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\nconnectButtons.forEach((btn)=>btn.style.display = 'block');\n// Initialize export section as hidden (controlled by hamburger menu)\nexportSection.style.display = 'none';\n// Initialize power averages section as hidden (controlled by hamburger menu)\npowerAveragesSection.style.display = 'none';\nupdateDashboardLayout();\nlet powerData = [];\nlet rawPowerMeasurements = [];\nlet lastPowerValue = 0;\nlet sessionStartTime = null;\n// Power averaging data structures\nlet powerReadings = []; // Array to store timestamped power readings\nlet powerAverages = {\n    '10s': {\n        current: 0,\n        best: 0\n    },\n    '30s': {\n        current: 0,\n        best: 0\n    },\n    '1m': {\n        current: 0,\n        best: 0\n    },\n    '2m': {\n        current: 0,\n        best: 0\n    },\n    '4m': {\n        current: 0,\n        best: 0\n    },\n    '8m': {\n        current: 0,\n        best: 0\n    }\n};\n// Power averaging functions\nfunction addPowerReading(power) {\n    const now = Date.now();\n    powerReadings.push({\n        timestamp: now,\n        power: power\n    });\n    // Keep only the last 8 minutes of readings (plus some buffer)\n    const eightMinutesAgo = now - 540000; // 9 minutes to be safe\n    powerReadings = powerReadings.filter((reading)=>reading.timestamp > eightMinutesAgo);\n    // Calculate current averages\n    calculatePowerAverages();\n    updatePowerAveragesDisplay();\n}\nfunction calculatePowerAverages() {\n    const now = Date.now();\n    const periods = {\n        '10s': 10000,\n        '30s': 30000,\n        '1m': 60000,\n        '2m': 120000,\n        '4m': 240000,\n        '8m': 480000\n    };\n    for (const [periodKey, periodMs] of Object.entries(periods)){\n        const cutoffTime = now - periodMs;\n        const relevantReadings = powerReadings.filter((reading)=>reading.timestamp >= cutoffTime);\n        if (relevantReadings.length > 0) {\n            const sum = relevantReadings.reduce((total, reading)=>total + reading.power, 0);\n            const average = Math.round(sum / relevantReadings.length);\n            powerAverages[periodKey].current = average;\n            // Update best if current is better\n            if (average > powerAverages[periodKey].best) powerAverages[periodKey].best = average;\n        } else powerAverages[periodKey].current = 0;\n    }\n}\nfunction updatePowerAveragesDisplay() {\n    avg10sCurrentElement.textContent = powerAverages['10s'].current || '--';\n    avg10sBestElement.textContent = powerAverages['10s'].best || '--';\n    avg30sCurrentElement.textContent = powerAverages['30s'].current || '--';\n    avg30sBestElement.textContent = powerAverages['30s'].best || '--';\n    avg1mCurrentElement.textContent = powerAverages['1m'].current || '--';\n    avg1mBestElement.textContent = powerAverages['1m'].best || '--';\n    avg2mCurrentElement.textContent = powerAverages['2m'].current || '--';\n    avg2mBestElement.textContent = powerAverages['2m'].best || '--';\n    avg4mCurrentElement.textContent = powerAverages['4m'].current || '--';\n    avg4mBestElement.textContent = powerAverages['4m'].best || '--';\n    avg8mCurrentElement.textContent = powerAverages['8m'].current || '--';\n    avg8mBestElement.textContent = powerAverages['8m'].best || '--';\n}\nfunction resetPowerAverages() {\n    powerReadings = [];\n    for (const period of Object.keys(powerAverages)){\n        powerAverages[period].current = 0;\n        powerAverages[period].best = 0;\n    }\n    updatePowerAveragesDisplay();\n}\n/**\n * Reset all session data (called when all devices disconnect)\n */ function resetAllSessionData() {\n    // Clear all data arrays\n    powerData.length = 0;\n    heartData.length = 0;\n    cadenceData.length = 0;\n    rawPowerMeasurements.length = 0;\n    powerReadings.length = 0;\n    // Reset power averages\n    for (const period of Object.keys(powerAverages)){\n        powerAverages[period].current = 0;\n        powerAverages[period].best = 0;\n    }\n    // Reset last values\n    lastPowerValue = 0;\n    lastHeartRateValue = 0;\n    lastCadenceValue = 0;\n    sessionStartTime = null;\n    // Update displays\n    updatePowerAveragesDisplay();\n    powerValueElement.textContent = '--';\n    hrValueElement.textContent = '--';\n    cadenceValueElement.textContent = '--';\n    // Clear localStorage\n    clearSessionData();\n}\n/**\n * Load debug data with 1000 data points for testing\n */ function loadDebugData() {\n    console.log('Loading debug data...');\n    // Clear existing data first\n    resetAllSessionData();\n    // Set session start time to 1 hour ago\n    const now = Date.now();\n    sessionStartTime = now - 3600000; // 1 hour ago\n    // Generate 1000 data points over 1 hour (one every 3.6 seconds)\n    const dataPointInterval = 3600; // 3.6 seconds\n    for(let i = 0; i < 1000; i++){\n        const timestamp = sessionStartTime + i * dataPointInterval;\n        // Generate realistic power data (150-400W with some variation)\n        const basePower = 250;\n        const powerVariation = 150;\n        const powerNoise = (Math.random() - 0.5) * 50;\n        const powerWave = Math.sin(i / 100) * powerVariation;\n        const power = Math.max(0, Math.round(basePower + powerWave + powerNoise));\n        // Generate realistic heart rate data (120-180 BPM)\n        const baseHR = 150;\n        const hrVariation = 30;\n        const hrNoise = (Math.random() - 0.5) * 10;\n        const hrWave = Math.sin(i / 150) * hrVariation;\n        const heartRate = Math.max(60, Math.min(200, Math.round(baseHR + hrWave + hrNoise)));\n        // Generate realistic cadence data (70-110 RPM)\n        const baseCadence = 90;\n        const cadenceVariation = 20;\n        const cadenceNoise = (Math.random() - 0.5) * 8;\n        const cadenceWave = Math.sin(i / 80) * cadenceVariation;\n        const cadence = Math.max(0, Math.round(baseCadence + cadenceWave + cadenceNoise));\n        // Add to data arrays\n        powerData.push({\n            timestamp,\n            power,\n            heartRate,\n            cadence\n        });\n        heartData.push({\n            timestamp,\n            heartRate\n        });\n        cadenceData.push({\n            timestamp,\n            cadence\n        });\n        // Add power reading for averages calculation\n        powerReadings.push({\n            timestamp,\n            power\n        });\n        // Add raw measurement for TCX export\n        rawPowerMeasurements.push({\n            timestamp,\n            flags: 0,\n            rawBytes: '00 00 ' + power.toString(16).padStart(4, '0'),\n            dataLength: 4,\n            instantaneousPower: power\n        });\n    }\n    // Update last values to the most recent data point\n    const lastData = powerData[powerData.length - 1];\n    lastPowerValue = lastData.power;\n    lastHeartRateValue = lastData.heartRate;\n    lastCadenceValue = lastData.cadence;\n    // Calculate power averages for all the debug data\n    calculateAllPowerAverages();\n    // Update displays\n    powerValueElement.textContent = lastPowerValue;\n    hrValueElement.textContent = lastHeartRateValue;\n    cadenceValueElement.textContent = lastCadenceValue;\n    updatePowerAveragesDisplay();\n    // Save to localStorage\n    saveSessionData();\n    // Show success message\n    alert(`Debug data loaded successfully!\\n1000 data points generated over 1 hour.\\nPower: ${lastPowerValue}W, HR: ${lastHeartRateValue}BPM, Cadence: ${lastCadenceValue}RPM`);\n    console.log('Debug data loaded:', {\n        powerDataPoints: powerData.length,\n        heartDataPoints: heartData.length,\n        cadenceDataPoints: cadenceData.length\n    });\n}\n/**\n * Calculate power averages for all periods based on current powerReadings\n */ function calculateAllPowerAverages() {\n    const periods = {\n        '10s': 10000,\n        '30s': 30000,\n        '1m': 60000,\n        '2m': 120000,\n        '4m': 240000,\n        '8m': 480000\n    };\n    const now = Date.now();\n    for (const [periodKey, duration] of Object.entries(periods)){\n        const periodStart = now - duration;\n        const periodReadings = powerReadings.filter((reading)=>reading.timestamp >= periodStart);\n        if (periodReadings.length > 0) {\n            const averagePower = Math.round(periodReadings.reduce((sum, reading)=>sum + reading.power, 0) / periodReadings.length);\n            powerAverages[periodKey].current = averagePower;\n            // Update best if this current average is better\n            if (averagePower > powerAverages[periodKey].best) powerAverages[periodKey].best = averagePower;\n        }\n    }\n}\n/**\n * Show application information and usage instructions\n */ function showAppInfo() {\n    const modal = document.createElement('div');\n    modal.className = 'modal-backdrop';\n    modal.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n    `;\n    const modalContent = document.createElement('div');\n    modalContent.className = 'modal';\n    modalContent.style.cssText = `\n        background: #1a1a2e;\n        border-radius: 12px;\n        padding: 2rem;\n        max-width: 600px;\n        max-height: 80vh;\n        overflow-y: auto;\n        margin: 20px;\n        border: 1px solid rgba(255, 255, 255, 0.2);\n    `;\n    modalContent.innerHTML = `\n        <div style=\"text-align: center; margin-bottom: 1.5rem;\">\n            <h2 style=\"color: #3498db; margin: 0 0 0.5rem 0; font-size: 1.8rem;\">\\u{1F6B4} Web Bluetooth Power Meter</h2>\n            <p style=\"color: #cccccc; margin: 0; font-size: 1rem;\">Real-time cycling data analysis</p>\n        </div>\n\n        <div style=\"color: #ffffff; line-height: 1.6;\">\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">\\u{1F4F1} What is this app?</h3>\n            <p style=\"margin-bottom: 1rem;\">\n                This is a web-based power meter application that connects to Bluetooth cycling devices \n                to provide real-time power, heart rate, and cadence data analysis. Perfect for indoor \n                training, data logging, and performance tracking.\n            </p>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">\\u{1F517} How to connect devices:</h3>\n            <ol style=\"margin-bottom: 1rem; padding-left: 1.5rem;\">\n                <li><strong>Power Meter:</strong> Click \"Connect Power Meter\" and select your cycling power device</li>\n                <li><strong>Heart Rate:</strong> Click \"Connect Heart Rate\" to pair your HR monitor</li>\n                <li><strong>Cadence:</strong> Click \"Connect Cadence\" for speed/cadence sensors</li>\n            </ol>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">\\u{1F4CA} Features:</h3>\n            <ul style=\"margin-bottom: 1rem; padding-left: 1.5rem;\">\n                <li><strong>Real-time Metrics:</strong> Live power, heart rate, and cadence display</li>\n                <li><strong>Power Averages:</strong> 10s, 30s, 1m, 2m, 4m, and 8m rolling averages</li>\n                <li><strong>Data Export:</strong> JSON, CSV, TCX, and visual summary image formats</li>\n                <li><strong>Session Persistence:</strong> Data automatically saved and restored</li>\n                <li><strong>Custom Dashboard:</strong> Toggle metrics and sections via hamburger menu</li>\n            </ul>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">\\u{2699}\\u{FE0F} Using the hamburger menu:</h3>\n            <ul style=\"margin-bottom: 1rem; padding-left: 1.5rem;\">\n                <li><strong>Toggle Sections:</strong> Show/hide different parts of the interface</li>\n                <li><strong>Load Debug Data:</strong> Generate 1000 test data points for testing</li>\n                <li><strong>Customize View:</strong> Control which metrics are visible</li>\n            </ul>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">\\u{1F310} Browser Support:</h3>\n            <p style=\"margin-bottom: 1rem;\">\n                Requires a browser with Web Bluetooth support:\n                <br>\\u{2022} Chrome 56+ \\u{2022} Edge 79+ \\u{2022} Opera 43+\n            </p>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">\\u{1F4A1} Tips:</h3>\n            <ul style=\"margin-bottom: 1.5rem; padding-left: 1.5rem;\">\n                <li>Make sure your devices are in pairing mode before connecting</li>\n                <li>Data is automatically saved to your browser's local storage</li>\n                <li>Use the export functions to save your workout data</li>\n                <li>The app works offline once loaded</li>\n            </ul>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 2rem;\">\n            <button id=\"closeInfoModal\" style=\"\n                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);\n                color: white;\n                border: none;\n                padding: 12px 24px;\n                border-radius: 8px;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.3s ease;\n            \">Got it!</button>\n        </div>\n    `;\n    modal.appendChild(modalContent);\n    document.body.appendChild(modal);\n    // Close modal event listeners\n    const closeButton = modalContent.querySelector('#closeInfoModal');\n    const closeModal = ()=>{\n        document.body.removeChild(modal);\n    };\n    closeButton.addEventListener('click', closeModal);\n    modal.addEventListener('click', (e)=>{\n        if (e.target === modal) closeModal();\n    });\n    // Close on Escape key\n    const handleEscape = (e)=>{\n        if (e.key === 'Escape') {\n            closeModal();\n            document.removeEventListener('keydown', handleEscape);\n        }\n    };\n    document.addEventListener('keydown', handleEscape);\n    // Add hover effect to button\n    closeButton.addEventListener('mouseenter', ()=>{\n        closeButton.style.transform = 'translateY(-2px)';\n        closeButton.style.boxShadow = '0 8px 24px rgba(52, 152, 219, 0.4)';\n    });\n    closeButton.addEventListener('mouseleave', ()=>{\n        closeButton.style.transform = 'translateY(0)';\n        closeButton.style.boxShadow = 'none';\n    });\n}\n/**\n * Show QR code modal with link to the app\n */ function showQrCodeModal() {\n    const appUrl = 'https://colscoding.github.io/power-saver/';\n    const modal = document.createElement('div');\n    modal.className = 'modal-backdrop';\n    modal.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n    `;\n    const modalContent = document.createElement('div');\n    modalContent.className = 'modal';\n    modalContent.style.cssText = `\n        background: #1a1a2e;\n        border-radius: 12px;\n        padding: 2rem;\n        max-width: 400px;\n        max-height: 80vh;\n        overflow-y: auto;\n        margin: 20px;\n        border: 1px solid rgba(255, 255, 255, 0.2);\n        text-align: center;\n    `;\n    // Create QR code canvas\n    const qrCanvas = document.createElement('canvas');\n    qrCanvas.width = 256;\n    qrCanvas.height = 256;\n    qrCanvas.style.cssText = `\n        background: white;\n        border-radius: 8px;\n        margin: 1rem 0;\n        max-width: 100%;\n        height: auto;\n    `;\n    // Generate QR code\n    generateQRCode(qrCanvas, appUrl);\n    modalContent.innerHTML = `\n        <div style=\"margin-bottom: 1.5rem;\">\n            <h2 style=\"color: #9b59b6; margin: 0 0 0.5rem 0; font-size: 1.8rem;\">\\u{1F4F1} Share Power Meter App</h2>\n            <p style=\"color: #cccccc; margin: 0; font-size: 1rem;\">Scan to access the app on any device</p>\n        </div>\n        \n        <div id=\"qr-container\" style=\"margin: 1.5rem 0;\"></div>\n        \n        <div style=\"margin: 1.5rem 0;\">\n            <p style=\"color: #ffffff; margin: 0 0 0.5rem 0; font-weight: 600;\">Or visit directly:</p>\n            <a href=\"${appUrl}\" target=\"_blank\" style=\"\n                color: #9b59b6; \n                text-decoration: none; \n                font-size: 0.9rem;\n                word-break: break-all;\n                line-height: 1.4;\n            \">${appUrl}</a>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 2rem;\">\n            <button id=\"closeQrModal\" style=\"\n                background: linear-gradient(135deg, #9b59b6 0%, #8e44ad 100%);\n                color: white;\n                border: none;\n                padding: 12px 24px;\n                border-radius: 8px;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.3s ease;\n            \">Close</button>\n        </div>\n    `;\n    // Insert QR code canvas\n    const qrContainer = modalContent.querySelector('#qr-container');\n    qrContainer.appendChild(qrCanvas);\n    modal.appendChild(modalContent);\n    document.body.appendChild(modal);\n    // Close modal event listeners\n    const closeButton = modalContent.querySelector('#closeQrModal');\n    const closeModal = ()=>{\n        document.body.removeChild(modal);\n    };\n    closeButton.addEventListener('click', closeModal);\n    modal.addEventListener('click', (e)=>{\n        if (e.target === modal) closeModal();\n    });\n    // Close on Escape key\n    const handleEscape = (e)=>{\n        if (e.key === 'Escape') {\n            closeModal();\n            document.removeEventListener('keydown', handleEscape);\n        }\n    };\n    document.addEventListener('keydown', handleEscape);\n    // Add hover effect to button\n    closeButton.addEventListener('mouseenter', ()=>{\n        closeButton.style.transform = 'translateY(-2px)';\n        closeButton.style.boxShadow = '0 8px 24px rgba(155, 89, 182, 0.4)';\n    });\n    closeButton.addEventListener('mouseleave', ()=>{\n        closeButton.style.transform = 'translateY(0)';\n        closeButton.style.boxShadow = 'none';\n    });\n}\n/**\n * Generate QR code on canvas using a simple QR code generation algorithm\n */ function generateQRCode(canvas, text) {\n    const ctx = canvas.getContext('2d');\n    const size = canvas.width;\n    // Clear canvas with white background\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, size, size);\n    // Simple QR code generation using an online QR code API as fallback\n    // For a production app, you'd want to include a proper QR code library\n    const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(text)}`;\n    const img = new Image();\n    img.crossOrigin = 'anonymous';\n    img.onload = function() {\n        ctx.drawImage(img, 0, 0, size, size);\n    };\n    img.onerror = function() {\n        // Fallback: draw a simple pattern if QR API fails\n        drawFallbackQR(ctx, size);\n    };\n    img.src = qrApiUrl;\n}\n/**\n * Fallback QR code representation when API is unavailable\n */ function drawFallbackQR(ctx, size) {\n    ctx.fillStyle = '#000000';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    // Draw a simple grid pattern\n    const cellSize = size / 25;\n    for(let i = 0; i < 25; i++){\n        for(let j = 0; j < 25; j++)if ((i + j) % 3 === 0 || i === 0 || i === 24 || j === 0 || j === 24) ctx.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);\n    }\n    // Add text in center\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(size * 0.2, size * 0.4, size * 0.6, size * 0.2);\n    ctx.fillStyle = '#000000';\n    ctx.fillText('QR Code', size / 2, size / 2 - 10);\n    ctx.fillText('Unavailable', size / 2, size / 2 + 10);\n}\nlet lastHeartRateValue = 0;\nlet lastCadenceValue = 0;\nlet dataLoggerInterval = null;\nlet powerMeterDevice = null;\nconst CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID = 'cycling_power_feature';\nconst CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\nconnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        statusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    // Reset data from previous session\n    powerData = [];\n    rawPowerMeasurements = [];\n    lastPowerValue = 0;\n    resetPowerAverages();\n    if (dataLoggerInterval) clearInterval(dataLoggerInterval);\n    try {\n        statusText.textContent = 'Scanning for power meters...';\n        powerStatusIndicator.className = 'status-indicator connecting';\n        // Scan specifically for devices advertising the Cycling Power service\n        powerMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        CYCLING_POWER_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        statusText.textContent = 'Connecting to device...';\n        deviceNameElement.textContent = `Device: ${powerMeterDevice.name || 'Unknown Device'}`;\n        powerMeterDevice.addEventListener('gattserverdisconnected', onDisconnected);\n        const server = await powerMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);\n        // Check for and subscribe to advanced power features if available\n        try {\n            const featureCharacteristic = await service.getCharacteristic(CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID);\n            // eslint-disable-next-line no-unused-vars\n            const features = await featureCharacteristic.readValue();\n        // This value can be used to determine what the power meter supports,\n        // but for now we just parse what's in the measurement characteristic.\n        } catch  {\n        // Cycling Power Feature characteristic not found\n        }\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handlePowerMeasurement);\n        statusText.textContent = 'Connected and receiving data!';\n        powerStatusIndicator.className = 'status-indicator connected';\n        connectButton.disabled = true;\n        // Start session if this is the first connection\n        if (!sessionStartTime) sessionStartTime = Date.now();\n        // exportButtons.style.display = 'block';\n        dataLoggerInterval = setInterval(()=>{\n            powerData.push({\n                timestamp: Date.now(),\n                power: lastPowerValue,\n                heartRate: lastHeartRateValue,\n                cadence: lastCadenceValue\n            });\n            // Save session data every 10 seconds\n            if (powerData.length % 100 === 0) // Every 100 readings = 10 seconds\n            saveSessionData();\n        }, 100);\n    } catch (error) {\n        statusText.textContent = `Error: ${error.message}`;\n        powerStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n        if (powerMeterDevice) powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n    }\n});\nexportJsonButton.addEventListener('click', ()=>{\n    const jsonString = JSON.stringify(powerData, null, 2);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\nexportCsvButton.addEventListener('click', ()=>{\n    let csvContent = 'timestamp,power,heartRate,cadence\\n';\n    powerData.forEach((row)=>{\n        csvContent += `${row.timestamp},${row.power},${row.heartRate},${row.cadence}\\n`;\n    });\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n// Export raw power measurements as JSON\nexportRawJsonButton.addEventListener('click', ()=>{\n    const jsonString = JSON.stringify(rawPowerMeasurements, null, 2);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n// Export raw power measurements as CSV\nexportRawCsvButton.addEventListener('click', ()=>{\n    let csvContent = 'timestamp,flags,dataLength,instantaneousPower,rawBytes\\n';\n    rawPowerMeasurements.forEach((measurement)=>{\n        csvContent += `${measurement.timestamp},${measurement.flags},${measurement.dataLength},${measurement.instantaneousPower},\"${measurement.rawBytes}\"\\n`;\n    });\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n// Export TCX\nexportTcxButton.addEventListener('click', ()=>{\n    try {\n        if (powerData.length === 0) {\n            alert('No power data available to export.');\n            return;\n        }\n        const tcxContent = generateTcxString(powerData);\n        const blob = new Blob([\n            tcxContent\n        ], {\n            type: 'application/xml;charset=utf-8;'\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, '0');\n        const day = String(now.getDate()).padStart(2, '0');\n        const dateString = `${year}-${month}-${day}`;\n        a.download = `power_data_${dateString}.tcx`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    } catch (error) {\n        console.error('Error generating TCX:', error);\n        alert(`Error generating TCX file: ${error.message}`);\n    }\n});\n// Export Summary Image\nexportImageButton.addEventListener('click', async ()=>{\n    try {\n        if (powerData.length === 0 && heartData.length === 0 && cadenceData.length === 0) {\n            alert('No data available to export. Please record some activity first.');\n            return;\n        }\n        const canvas = await generateSummaryImage();\n        // Create download link\n        canvas.toBlob((blob)=>{\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            const now = new Date();\n            const year = now.getFullYear();\n            const month = String(now.getMonth() + 1).padStart(2, '0');\n            const day = String(now.getDate()).padStart(2, '0');\n            const dateString = `${year}-${month}-${day}`;\n            a.download = `power_meter_summary_${dateString}.png`;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n        }, 'image/png');\n    } catch (error) {\n        console.error('Error generating summary image:', error);\n        alert(`Error generating summary image: ${error.message}`);\n    }\n});\n// Clear Session Data\nclearSessionButton.addEventListener('click', ()=>{\n    const confirmed = confirm('Are you sure you want to clear all session data? This action cannot be undone.');\n    if (confirmed) {\n        resetAllSessionData();\n        alert('Session data cleared successfully!');\n    }\n});\nfunction handlePowerMeasurement(event) {\n    const value = event.target.value;\n    const timestamp = Date.now();\n    // Store simplified raw measurement data\n    const rawMeasurement = {\n        timestamp: timestamp,\n        flags: value.getUint16(0, true),\n        rawBytes: Array.from(new Uint8Array(value.buffer)).map((b)=>b.toString(16).padStart(2, '0')).join(' '),\n        dataLength: value.byteLength\n    };\n    // The data is a DataView object with a flags field and the power value.\n    // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n    // eslint-disable-next-line no-unused-vars\n    const flags = value.getUint16(0, true);\n    let offset = 2;\n    // Power is always present\n    const power = value.getInt16(offset, true);\n    rawMeasurement.instantaneousPower = power;\n    powerValueElement.textContent = power;\n    lastPowerValue = power;\n    // Add power reading to averaging calculations\n    addPowerReading(power);\n    // Store the simplified raw measurement\n    rawPowerMeasurements.push(rawMeasurement);\n}\n/**\n * Parses the Cycling Power Measurement characteristic data.\n * The data is a DataView object with a flags field and the power value.\n * The instantaneous power is a 16-bit signed integer starting at the 3rd byte (offset 2).\n * Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n * Currently unused but kept for potential future use.\n */ // eslint-disable-next-line no-unused-vars\nfunction parsePowerMeasurement(value) {\n    // The first 2 bytes are flags. The next 2 bytes are the instantaneous power.\n    // The power value is a signed 16-bit integer (sint16)\n    const instantaneousPower = value.getInt16(2, /*littleEndian=*/ true);\n    return instantaneousPower;\n}\nfunction onDisconnected() {\n    statusText.textContent = 'Device disconnected.';\n    powerStatusIndicator.className = 'status-indicator';\n    deviceNameElement.textContent = '';\n    powerValueElement.textContent = '--';\n    resetPowerAverages();\n    connectButton.disabled = false;\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n        dataLoggerInterval = null;\n    }\n    if (powerMeterDevice) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n        powerMeterDevice = null;\n    }\n    lastPowerValue = 0;\n}\nconst heartData = [];\nconst cadenceData = [];\n// eslint-disable-next-line no-unused-vars\nlet hrDataLoggerInterval = null; // Reserved for future HR data logging functionality\nconst hrConnectButton = document.getElementById('hrConnectButton');\nconst hrStatusText = document.getElementById('hrStatus');\nconst hrValue = document.getElementById('hr-value');\nconst hrDeviceName = document.getElementById('hrDeviceName');\nlet hrBluetoothDevice = null;\nhrConnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        hrStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    try {\n        hrStatusText.textContent = 'Scanning for devices...';\n        hrStatusIndicator.className = 'status-indicator connecting';\n        // Filter for devices that advertise the 'heart_rate' service\n        hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        'heart_rate'\n                    ]\n                }\n            ]\n        });\n        hrStatusText.textContent = 'Connecting to device...';\n        hrDeviceName.textContent = `Device: ${hrBluetoothDevice.name}`;\n        // Add a listener for when the device gets disconnected\n        hrBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedHr);\n        const hrServer = await hrBluetoothDevice.gatt.connect();\n        const hrService = await hrServer.getPrimaryService('heart_rate');\n        const hrCharacteristic = await hrService.getCharacteristic('heart_rate_measurement');\n        // Start notifications to receive heart rate data\n        await hrCharacteristic.startNotifications();\n        hrCharacteristic.addEventListener('characteristicvaluechanged', handleHeartRateChanged);\n        hrStatusText.textContent = 'Connected!';\n        hrStatusIndicator.className = 'status-indicator connected';\n        hrConnectButton.disabled = true;\n    } catch (error) {\n        hrStatusText.textContent = `Error: ${error.message}`;\n        hrStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n    }\n});\nfunction handleHeartRateChanged(event) {\n    const value = event.target.value;\n    const heartRate = parseHeartRate(value);\n    hrValue.textContent = heartRate;\n    lastHeartRateValue = heartRate;\n}\n/**\n * The heart rate measurement is a DataView object.\n * The first byte is a flag, and the subsequent byte(s) are the heart rate value.\n * We need to check the first bit of the flag to see if the value is 8-bit or 16-bit.\n */ function parseHeartRate(value) {\n    const flags = value.getUint8(0);\n    // Check if the heart rate value format is UINT16 (bit 0 is 1) or UINT8 (bit 0 is 0)\n    const is16bit = flags & 0x1;\n    if (is16bit) // If 16-bit, read 2 bytes starting from the second byte\n    return value.getUint16(1, /*littleEndian=*/ true);\n    else // If 8-bit, read 1 byte starting from the second byte\n    return value.getUint8(1);\n}\nfunction onDisconnectedHr() {\n    hrStatusText.textContent = 'Device disconnected.';\n    hrStatusIndicator.className = 'status-indicator';\n    hrDeviceName.textContent = '';\n    hrValue.textContent = '--';\n    hrConnectButton.disabled = false;\n    hrBluetoothDevice = null;\n    lastHeartRateValue = 0;\n}\nconst speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\nconst cadenceStatusText = document.getElementById('cadenceStatus');\nconst cadenceDeviceName = document.getElementById('cadenceDeviceName');\nlet speedCadenceBluetoothDevice = null;\nspeedCadenceConnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        cadenceStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    try {\n        cadenceStatusText.textContent = 'Scanning for sensors...';\n        cadenceStatusIndicator.className = 'status-indicator connecting';\n        // Reset cadence variables for clean start\n        if (cadenceResetTimer) {\n            clearTimeout(cadenceResetTimer);\n            cadenceResetTimer = null;\n        }\n        lastCrankRevs = 0;\n        lastCrankTime = 0;\n        lastCadenceValue = 0;\n        speedCadenceBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        CYCLING_CADENCE_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        cadenceStatusText.textContent = 'Connecting to device...';\n        cadenceDeviceName.textContent = `Device: ${speedCadenceBluetoothDevice.name}`;\n        speedCadenceBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedSpeedCadence);\n        const server = await speedCadenceBluetoothDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CSC_MEASUREMENT_CHARACTERISTIC_UUID);\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handleSpeedCadenceMeasurement);\n        cadenceStatusText.textContent = 'Connected!';\n        cadenceStatusIndicator.className = 'status-indicator connected';\n        speedCadenceConnectButton.disabled = true;\n    } catch (error) {\n        cadenceStatusText.textContent = `Error: ${error.message}`;\n        cadenceStatusIndicator.className = 'status-indicator';\n        console.error('Speed/Cadence connection failed:', error);\n    }\n});\nlet lastCrankRevs = 0;\nlet lastCrankTime = 0;\nlet cadenceResetTimer = null;\nfunction handleSpeedCadenceMeasurement(event) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n    const wheelRevsPresent = flags & 0x01;\n    const crankRevsPresent = flags & 0x02;\n    // Skip wheel revolution data since we don't need speed/distance\n    if (wheelRevsPresent) offset += 6; // Skip wheel data\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n        if (lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - lastCrankRevs;\n            const time = (lastCrankEventTime - lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = revs / time * 60; // RPM\n                cadenceValueElement.textContent = Math.round(cadence);\n                lastCadenceValue = Math.round(cadence);\n                // Clear any existing reset timer\n                if (cadenceResetTimer) clearTimeout(cadenceResetTimer);\n                // Set timer to reset cadence to 0 if no new data comes in for 3 seconds\n                cadenceResetTimer = setTimeout(()=>{\n                    cadenceValueElement.textContent = '0';\n                    lastCadenceValue = 0;\n                    cadenceResetTimer = null;\n                }, 3000);\n            }\n        }\n        lastCrankRevs = cumulativeCrankRevolutions;\n        lastCrankTime = lastCrankEventTime;\n    }\n}\nfunction onDisconnectedSpeedCadence() {\n    cadenceStatusText.textContent = 'Device disconnected.';\n    cadenceStatusIndicator.className = 'status-indicator';\n    cadenceDeviceName.textContent = '';\n    cadenceValueElement.textContent = '--';\n    speedCadenceConnectButton.disabled = false;\n    speedCadenceBluetoothDevice = null;\n    lastCadenceValue = 0;\n    // Clear cadence reset timer and reset variables\n    if (cadenceResetTimer) {\n        clearTimeout(cadenceResetTimer);\n        cadenceResetTimer = null;\n    }\n    lastCrankRevs = 0;\n    lastCrankTime = 0;\n}\n// Initialize session on page load\n/**\n * Show restoration dialog to let user choose\n */ function showRestorationDialog(sessionData) {\n    return new Promise((resolve)=>{\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n        // Create modal dialog\n        const modal = document.createElement('div');\n        modal.className = 'modal';\n        // Get session info\n        const sessionAge = Math.round((Date.now() - sessionData.timestamp) / 60000); // minutes\n        const dataCount = (sessionData.powerData?.length || 0) + (sessionData.heartData?.length || 0) + (sessionData.cadenceData?.length || 0);\n        modal.innerHTML = `\n            <h3>Previous Session Found</h3>\n            <p>\n                A previous session was found from ${sessionAge} minutes ago with ${dataCount} data points.\n            </p>\n            <p>\n                Would you like to restore this session or start fresh?\n            </p>\n            <div class=\"modal-buttons\">\n                <button id=\"startFresh\" class=\"modal-button secondary\">Start Fresh</button>\n                <button id=\"restoreSession\" class=\"modal-button primary\">Restore Session</button>\n            </div>\n        `;\n        backdrop.appendChild(modal);\n        document.body.appendChild(backdrop);\n        // Handle button clicks\n        modal.querySelector('#startFresh').addEventListener('click', ()=>{\n            document.body.removeChild(backdrop);\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            resolve(false);\n        });\n        modal.querySelector('#restoreSession').addEventListener('click', ()=>{\n            document.body.removeChild(backdrop);\n            resolve(true);\n        });\n        // Handle backdrop click\n        backdrop.addEventListener('click', (e)=>{\n            if (e.target === backdrop) {\n                document.body.removeChild(backdrop);\n                resolve(false);\n            }\n        });\n    });\n}\ndocument.addEventListener('DOMContentLoaded', async function() {\n    // Try to load previous session data\n    const sessionData = loadSessionData();\n    if (sessionData) {\n        // Show restoration dialog\n        const shouldRestore = await showRestorationDialog(sessionData);\n        if (shouldRestore) restoreSessionData(sessionData);\n        else sessionStartTime = Date.now();\n    } else sessionStartTime = Date.now();\n    // Save session data when page is about to be closed/refreshed\n    window.addEventListener('beforeunload', function() {\n        if (powerData.length > 0) saveSessionData();\n    });\n    // Save session data periodically (every 30 seconds as backup)\n    setInterval(()=>{\n        if (powerData.length > 0) saveSessionData();\n    }, 30000);\n});\n\n//# sourceMappingURL=power-saver.70675eea.js.map\n","// Screen Wake Lock\nlet wakeLock = null;\n\nasync function requestWakeLock() {\n  if ('wakeLock' in navigator) {\n    try {\n      wakeLock = await navigator.wakeLock.request('screen');\n      wakeLock.addEventListener('release', () => {\n        // Wake lock was released\n      });\n    } catch (err) {\n      console.error(`${err.name}, ${err.message}`);\n    }\n  }\n}\n\n// Currently unused but may be needed for future functionality\n// eslint-disable-next-line no-unused-vars\nasync function releaseWakeLock() {\n  if (wakeLock !== null) {\n    await wakeLock.release();\n    wakeLock = null;\n  }\n}\n\n// TCX Generation Functions\n/**\n * Creates a trackpoint XML element for a single data point\n * @param {Object} dataPoint - Data point with time, power, heartRate, cadence\n * @returns {string} XML trackpoint string\n */\nfunction createTrackpoint(dataPoint) {\n  const translations = {\n    time: (time) => `<Time>${new Date(time).toISOString()}</Time>`,\n    heartRate: (hr) =>\n      `\n<HeartRateBpm>\n  <Value>${hr}</Value>\n</HeartRateBpm>\n            `.trim(),\n    cadence: (cad) => `<Cadence>${cad}</Cadence>`,\n    power: (pw) =>\n      `\n<Extensions>\n  <ns2:TPX>\n    <ns2:Watts>${pw}</ns2:Watts>\n  </ns2:TPX>\n</Extensions>\n            `.trim(),\n  };\n  const contents = Object.keys(translations)\n    .map((key) => {\n      if (dataPoint[key] === undefined) return '';\n      return translations[key](dataPoint[key]);\n    })\n    .filter((x) => x)\n    .join('\\n');\n\n  return `\n<Trackpoint>\n  ${contents}\n</Trackpoint>\n`.trim();\n}\n\n/**\n * Generates TCX XML string from power data for cycling activities\n * @param {Array<Object>} powerData - Array of power measurement objects\n * @returns {string} Complete TCX XML string\n */\nfunction generateTcxString(powerData) {\n  // Validate input data\n  if (!Array.isArray(powerData) || powerData.length === 0) {\n    throw new Error('Input power data array is empty or invalid');\n  }\n\n  // Filter and normalize data\n  const validDataPoints = powerData.filter(\n    (dataPoint) =>\n      dataPoint &&\n      typeof dataPoint === 'object' &&\n      dataPoint.timestamp !== undefined &&\n      !isNaN(new Date(dataPoint.timestamp).getTime())\n  );\n\n  if (validDataPoints.length === 0) {\n    throw new Error('No valid data points found');\n  }\n\n  // Transform data\n  const normalizeDataPoint = (item) => ({\n    time: item.timestamp,\n    ...(item.power !== undefined && { power: item.power }),\n    ...(item.heartRate !== undefined && { heartRate: item.heartRate }),\n    ...(item.cadence !== undefined && { cadence: item.cadence }),\n  });\n\n  // Process data\n  let processedData = validDataPoints.map(normalizeDataPoint).sort((a, b) => a.time - b.time);\n\n  // Remove leading/trailing entries without power\n  const isEmptyPower = (dataPoint) => !dataPoint.power || dataPoint.power <= 0;\n  while (processedData.length > 0 && isEmptyPower(processedData[0])) {\n    processedData.shift();\n  }\n  while (processedData.length > 0 && isEmptyPower(processedData[processedData.length - 1])) {\n    processedData.pop();\n  }\n\n  if (processedData.length === 0) {\n    throw new Error('No valid power data found after processing');\n  }\n\n  // Calculate exercise statistics\n  const validPowerReadings = processedData\n    .filter((d) => d.power && d.power > 0)\n    .map((d) => parseFloat(d.power));\n  const avgPower =\n    validPowerReadings.length > 0\n      ? Math.round(validPowerReadings.reduce((a, b) => a + b, 0) / validPowerReadings.length)\n      : 0;\n  const maxPower = validPowerReadings.length > 0 ? Math.max(...validPowerReadings) : 0;\n\n  const startTime = processedData[0].time;\n  const endTime = processedData[processedData.length - 1].time;\n  const duration = Math.round((endTime - startTime) / 1000 / 60); // duration in minutes\n\n  // Generate activity notes with exercise description and power averages\n  const exerciseDescription = 'Indoor cycling session recorded with Power Saver app.';\n\n  let powerAveragesText = '';\n  if (typeof powerAverages !== 'undefined' && powerAverages) {\n    const averagesList = [];\n\n    if (powerAverages['10s'] && powerAverages['10s'].best > 0) {\n      averagesList.push(`10s: ${powerAverages['10s'].best}W`);\n    }\n    if (powerAverages['30s'] && powerAverages['30s'].best > 0) {\n      averagesList.push(`30s: ${powerAverages['30s'].best}W`);\n    }\n    if (powerAverages['1m'] && powerAverages['1m'].best > 0) {\n      averagesList.push(`1min: ${powerAverages['1m'].best}W`);\n    }\n    if (powerAverages['2m'] && powerAverages['2m'].best > 0) {\n      averagesList.push(`2min: ${powerAverages['2m'].best}W`);\n    }\n    if (powerAverages['4m'] && powerAverages['4m'].best > 0) {\n      averagesList.push(`4min: ${powerAverages['4m'].best}W`);\n    }\n    if (powerAverages['8m'] && powerAverages['8m'].best > 0) {\n      averagesList.push(`8min: ${powerAverages['8m'].best}W`);\n    }\n\n    if (averagesList.length > 0) {\n      powerAveragesText = `\\n\\nBest Power Averages: ${averagesList.join(', ')}`;\n    }\n  }\n\n  const sessionStats = `\\nSession Stats: Duration: ${duration} min, Avg Power: ${avgPower}W, Max Power: ${maxPower}W`;\n  const activityNotes = exerciseDescription + sessionStats + powerAveragesText;\n\n  // Helper function to escape XML special characters\n  const escapeXml = (text) => {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;')\n      .replace(/\"/g, '&quot;')\n      .replace(/'/g, '&apos;');\n  };\n\n  // Generate XML\n  const trackpoints = processedData.map(createTrackpoint).join('\\n');\n  const startTimeISO = new Date(startTime).toISOString();\n\n  const rawXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<TrainingCenterDatabase\n  xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\"\n  xmlns:ns2=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\">\n  <Activities>\n    <Activity Sport=\"Biking\">\n      <Id>${startTimeISO}</Id>\n      <Name>E Bike Indoor Cycling Trainer</Name>\n      <Notes>${escapeXml(activityNotes)}</Notes>\n      <Lap StartTime=\"${startTimeISO}\">\n        <Track>\n        ${trackpoints}\n        </Track>\n      </Lap>\n    </Activity>\n  </Activities>\n</TrainingCenterDatabase>`;\n\n  return rawXml;\n}\n\n// Summary Image Generation Functions\n/**\n * Generates a comprehensive summary image with power averages and timeline charts\n * @returns {Promise<HTMLCanvasElement>} Canvas containing the summary image\n */\nasync function generateSummaryImage() {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  // Calculate required height based on available data\n  let requiredHeight = 200; // Base height for title and headers\n\n  // Add height for power averages if available\n  if (Object.values(powerAverages).some((avg) => avg.current > 0 || avg.best > 0)) {\n    requiredHeight += 200;\n  }\n\n  // Add height for each chart\n  const singleChartHeight = 350;\n  if (powerData.length > 0) requiredHeight += singleChartHeight;\n  if (heartData.length > 0) requiredHeight += singleChartHeight;\n  if (cadenceData.length > 0) requiredHeight += singleChartHeight;\n\n  // Set canvas size for high resolution export\n  const width = 1200;\n  const height = Math.max(600, requiredHeight);\n  canvas.width = width;\n  canvas.height = height;\n\n  // Set background\n  ctx.fillStyle = '#1a1a2e';\n  ctx.fillRect(0, 0, width, height);\n\n  // Title\n  ctx.fillStyle = '#ffffff';\n  ctx.font = 'bold 36px Arial, sans-serif';\n  ctx.textAlign = 'center';\n  ctx.fillText('Power Meter Summary', width / 2, 50);\n\n  // Date and time\n  ctx.font = '18px Arial, sans-serif';\n  ctx.fillStyle = '#cccccc';\n  const now = new Date();\n  ctx.fillText(now.toLocaleDateString() + ' ' + now.toLocaleTimeString(), width / 2, 80);\n\n  // Session duration\n  if (sessionStartTime && powerData.length > 0) {\n    const sessionEnd = powerData[powerData.length - 1].timestamp;\n    const duration = Math.round((sessionEnd - sessionStartTime) / 1000 / 60); // minutes\n    ctx.fillText(`Session Duration: ${duration} minutes`, width / 2, 105);\n  }\n\n  let yOffset = 130;\n\n  // Power Averages Section\n  if (Object.values(powerAverages).some((avg) => avg.current > 0 || avg.best > 0)) {\n    ctx.fillStyle = '#ffffff';\n    ctx.font = 'bold 24px Arial, sans-serif';\n    ctx.textAlign = 'left';\n    ctx.fillText('Power Averages', 50, yOffset);\n    yOffset += 40;\n\n    const avgData = [\n      { label: '10s', data: powerAverages['10s'] },\n      { label: '30s', data: powerAverages['30s'] },\n      { label: '1m', data: powerAverages['1m'] },\n      { label: '2m', data: powerAverages['2m'] },\n      { label: '4m', data: powerAverages['4m'] },\n      { label: '8m', data: powerAverages['8m'] },\n    ];\n\n    // Draw power averages table\n    ctx.font = '16px Arial, sans-serif';\n    ctx.fillStyle = '#cccccc';\n    ctx.fillText('Duration', 70, yOffset);\n    ctx.fillText('Current', 200, yOffset);\n    ctx.fillText('Best', 320, yOffset);\n    ctx.fillText('Duration', 470, yOffset);\n    ctx.fillText('Current', 600, yOffset);\n    ctx.fillText('Best', 720, yOffset);\n    yOffset += 30;\n\n    // Draw averages in two columns\n    for (let i = 0; i < avgData.length; i++) {\n      const avg = avgData[i];\n      const xBase = i < 3 ? 70 : 470;\n      const row = i < 3 ? i : i - 3;\n      const y = yOffset + row * 25;\n\n      ctx.fillStyle = '#ffffff';\n      ctx.fillText(avg.label, xBase, y);\n      ctx.fillStyle = avg.data.current > 0 ? '#3498db' : '#666666';\n      ctx.fillText(avg.data.current + 'W', xBase + 130, y);\n      ctx.fillStyle = avg.data.best > 0 ? '#e74c3c' : '#666666';\n      ctx.fillText(avg.data.best + 'W', xBase + 250, y);\n    }\n\n    yOffset += 100;\n  }\n\n  // If no data is available, show a message\n  const hasData = powerData.length > 0 || heartData.length > 0 || cadenceData.length > 0;\n  if (!hasData) {\n    ctx.fillStyle = '#cccccc';\n    ctx.font = '24px Arial, sans-serif';\n    ctx.textAlign = 'center';\n    ctx.fillText('No data recorded yet', width / 2, height / 2);\n    ctx.font = '16px Arial, sans-serif';\n    ctx.fillText('Start recording to see your activity summary', width / 2, height / 2 + 40);\n    return canvas;\n  }\n\n  // Charts section\n  const chartHeight = 300;\n  const chartWidth = width - 100;\n  const chartStartX = 50;\n\n  // Power Chart\n  if (powerData.length > 0) {\n    yOffset += 20;\n    ctx.fillStyle = '#ffffff';\n    ctx.font = 'bold 20px Arial, sans-serif';\n    ctx.fillText('Power Timeline', chartStartX, yOffset);\n    yOffset += 30;\n\n    drawTimelineChart(\n      ctx,\n      powerData,\n      'power',\n      chartStartX,\n      yOffset,\n      chartWidth,\n      chartHeight,\n      '#3498db',\n      'W'\n    );\n    yOffset += chartHeight + 50;\n  }\n\n  // Heart Rate Chart\n  if (heartData.length > 0) {\n    ctx.fillStyle = '#ffffff';\n    ctx.font = 'bold 20px Arial, sans-serif';\n    ctx.fillText('Heart Rate Timeline', chartStartX, yOffset);\n    yOffset += 30;\n\n    drawTimelineChart(\n      ctx,\n      heartData,\n      'heartRate',\n      chartStartX,\n      yOffset,\n      chartWidth,\n      chartHeight,\n      '#e74c3c',\n      'BPM'\n    );\n    yOffset += chartHeight + 50;\n  }\n\n  // Cadence Chart\n  if (cadenceData.length > 0) {\n    ctx.fillStyle = '#ffffff';\n    ctx.font = 'bold 20px Arial, sans-serif';\n    ctx.fillText('Cadence Timeline', chartStartX, yOffset);\n    yOffset += 30;\n\n    drawTimelineChart(\n      ctx,\n      cadenceData,\n      'cadence',\n      chartStartX,\n      yOffset,\n      chartWidth,\n      chartHeight,\n      '#f39c12',\n      'RPM'\n    );\n    yOffset += chartHeight + 50;\n  }\n\n  return canvas;\n}\n\n/**\n * Draws a timeline chart for the given data\n */\nfunction drawTimelineChart(ctx, data, valueKey, x, y, width, height, color, unit) {\n  if (data.length === 0) return;\n\n  // Draw chart background\n  ctx.fillStyle = 'rgba(255, 255, 255, 0.05)';\n  ctx.fillRect(x, y, width, height);\n\n  // Draw border\n  ctx.strokeStyle = 'rgba(255, 255, 255, 0.2)';\n  ctx.lineWidth = 1;\n  ctx.strokeRect(x, y, width, height);\n\n  // Find min/max values for scaling\n  const values = data.map((d) => d[valueKey]).filter((v) => v > 0);\n  if (values.length === 0) return;\n\n  const minValue = Math.min(...values);\n  const maxValue = Math.max(...values);\n  const range = maxValue - minValue || 1;\n\n  // Draw Y-axis labels\n  ctx.fillStyle = '#cccccc';\n  ctx.font = '12px Arial, sans-serif';\n  ctx.textAlign = 'right';\n\n  for (let i = 0; i <= 4; i++) {\n    const value = Math.round(minValue + (range * i) / 4);\n    const labelY = y + height - (height * i) / 4;\n    ctx.fillText(value + unit, x - 10, labelY + 4);\n  }\n\n  // Draw chart line\n  ctx.strokeStyle = color;\n  ctx.lineWidth = 2;\n  ctx.beginPath();\n\n  let firstPoint = true;\n  for (let i = 0; i < data.length; i++) {\n    const point = data[i];\n    const value = point[valueKey];\n\n    if (value > 0) {\n      const chartX = x + (i / (data.length - 1)) * width;\n      const chartY = y + height - ((value - minValue) / range) * height;\n\n      if (firstPoint) {\n        ctx.moveTo(chartX, chartY);\n        firstPoint = false;\n      } else {\n        ctx.lineTo(chartX, chartY);\n      }\n    }\n  }\n\n  ctx.stroke();\n\n  // Draw data points\n  ctx.fillStyle = color;\n  for (let i = 0; i < data.length; i += Math.max(1, Math.floor(data.length / 50))) {\n    const point = data[i];\n    const value = point[valueKey];\n\n    if (value > 0) {\n      const chartX = x + (i / (data.length - 1)) * width;\n      const chartY = y + height - ((value - minValue) / range) * height;\n\n      ctx.beginPath();\n      ctx.arc(chartX, chartY, 3, 0, 2 * Math.PI);\n      ctx.fill();\n    }\n  }\n\n  // Draw grid lines\n  ctx.strokeStyle = 'rgba(255, 255, 255, 0.1)';\n  ctx.lineWidth = 1;\n\n  // Horizontal grid lines\n  for (let i = 1; i < 4; i++) {\n    const gridY = y + (height * i) / 4;\n    ctx.beginPath();\n    ctx.moveTo(x, gridY);\n    ctx.lineTo(x + width, gridY);\n    ctx.stroke();\n  }\n\n  // Add time axis labels\n  if (data.length > 1) {\n    ctx.fillStyle = '#cccccc';\n    ctx.font = '12px Arial, sans-serif';\n    ctx.textAlign = 'center';\n\n    const startTime = new Date(data[0].timestamp);\n    const endTime = new Date(data[data.length - 1].timestamp);\n\n    // Start time\n    ctx.fillText(startTime.toLocaleTimeString(), x, y + height + 20);\n\n    // End time\n    ctx.fillText(endTime.toLocaleTimeString(), x + width, y + height + 20);\n\n    // Middle time if session is long enough\n    if (data.length > 10) {\n      const middleTime = new Date(data[Math.floor(data.length / 2)].timestamp);\n      ctx.fillText(middleTime.toLocaleTimeString(), x + width / 2, y + height + 20);\n    }\n  }\n\n  // Add min/max annotations\n  ctx.fillStyle = '#ffffff';\n  ctx.font = '12px Arial, sans-serif';\n  ctx.textAlign = 'left';\n  ctx.fillText(`Max: ${maxValue}${unit}`, x + 10, y + 20);\n  ctx.fillText(`Min: ${minValue}${unit}`, x + 10, y + 35);\n  ctx.fillText(\n    `Avg: ${Math.round(values.reduce((a, b) => a + b, 0) / values.length)}${unit}`,\n    x + 10,\n    y + 50\n  );\n}\n\n// Data Persistence Functions\nconst SESSION_STORAGE_KEY = 'powerMeterSession';\nconst SESSION_TIMEOUT = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n\n/**\n * Save current session data to localStorage\n */\nfunction saveSessionData() {\n  try {\n    const sessionData = {\n      timestamp: Date.now(),\n      powerData: powerData,\n      heartData: heartData,\n      cadenceData: cadenceData,\n      rawPowerMeasurements: rawPowerMeasurements,\n      powerReadings: powerReadings,\n      powerAverages: powerAverages,\n      lastPowerValue: lastPowerValue,\n      lastHeartRateValue: lastHeartRateValue,\n      lastCadenceValue: lastCadenceValue,\n      sessionStartTime: sessionStartTime,\n    };\n\n    localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n  } catch (error) {\n    console.warn('Failed to save session data:', error);\n  }\n}\n\n/**\n * Load session data from localStorage if available and recent\n * Returns the session data object if available, null if not\n */\nfunction loadSessionData() {\n  try {\n    const savedData = localStorage.getItem(SESSION_STORAGE_KEY);\n    if (!savedData) return null;\n\n    const sessionData = JSON.parse(savedData);\n    const now = Date.now();\n\n    // Check if session is too old (older than 24 hours)\n    if (now - sessionData.timestamp > SESSION_TIMEOUT) {\n      localStorage.removeItem(SESSION_STORAGE_KEY);\n      return null;\n    }\n\n    return sessionData;\n  } catch (error) {\n    console.warn('Failed to load session data:', error);\n    localStorage.removeItem(SESSION_STORAGE_KEY);\n    return null;\n  }\n}\n\n/**\n * Apply session data to restore the session\n */\nfunction restoreSessionData(sessionData) {\n  try {\n    // Restore data arrays\n    if (sessionData.powerData) ((powerData.length = 0), powerData.push(...sessionData.powerData));\n    if (sessionData.heartData) ((heartData.length = 0), heartData.push(...sessionData.heartData));\n    if (sessionData.cadenceData)\n      ((cadenceData.length = 0), cadenceData.push(...sessionData.cadenceData));\n    if (sessionData.rawPowerMeasurements)\n      ((rawPowerMeasurements.length = 0),\n        rawPowerMeasurements.push(...sessionData.rawPowerMeasurements));\n    if (sessionData.powerReadings)\n      ((powerReadings.length = 0), powerReadings.push(...sessionData.powerReadings));\n\n    // Restore power averages completely\n    if (sessionData.powerAverages) {\n      Object.assign(powerAverages, sessionData.powerAverages);\n    }\n\n    // Restore last values\n    if (sessionData.lastPowerValue !== undefined) lastPowerValue = sessionData.lastPowerValue;\n    if (sessionData.lastHeartRateValue !== undefined)\n      lastHeartRateValue = sessionData.lastHeartRateValue;\n    if (sessionData.lastCadenceValue !== undefined) lastCadenceValue = sessionData.lastCadenceValue;\n    if (sessionData.sessionStartTime !== undefined) sessionStartTime = sessionData.sessionStartTime;\n\n    // Update displays with restored data\n    updateDisplaysFromRestoredData();\n\n    return true;\n  } catch (error) {\n    console.warn('Failed to restore session data:', error);\n    return false;\n  }\n}\n\n/**\n * Update displays after restoring session data\n */\nfunction updateDisplaysFromRestoredData() {\n  // Update current metric values\n  powerValueElement.textContent = lastPowerValue || '--';\n  hrValueElement.textContent = lastHeartRateValue || '--';\n  cadenceValueElement.textContent = lastCadenceValue || '--';\n\n  // Update power averages display\n  updatePowerAveragesDisplay();\n\n  // Show session restoration notification\n  if (powerData.length > 0) {\n    showSessionRestoredNotification();\n  }\n}\n\n/**\n * Show notification that session was restored\n */\nfunction showSessionRestoredNotification() {\n  const notification = document.createElement('div');\n  notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #4CAF50;\n        color: white;\n        padding: 1rem 1.5rem;\n        border-radius: 8px;\n        z-index: 1000;\n        font-size: 0.9rem;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        animation: slideIn 0.3s ease-out;\n    `;\n  notification.textContent = `Session restored! ${powerData.length} data points recovered.`;\n\n  // Add animation\n  const style = document.createElement('style');\n  style.textContent = `\n        @keyframes slideIn {\n            from { transform: translateX(100%); opacity: 0; }\n            to { transform: translateX(0); opacity: 1; }\n        }\n    `;\n  document.head.appendChild(style);\n\n  document.body.appendChild(notification);\n\n  // Remove notification after 5 seconds\n  setTimeout(() => {\n    notification.style.animation = 'slideIn 0.3s ease-out reverse';\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification);\n      }\n      if (style.parentNode) {\n        style.parentNode.removeChild(style);\n      }\n    }, 300);\n  }, 5000);\n}\n\n/**\n * Clear session data from localStorage\n */\nfunction clearSessionData() {\n  localStorage.removeItem(SESSION_STORAGE_KEY);\n}\n\nconst connectButton = document.getElementById('connectButton');\nconst statusText = document.getElementById('status');\nconst powerValueElement = document.getElementById('power-value');\nconst hrValueElement = document.getElementById('hr-value');\nconst cadenceValueElement = document.getElementById('cadence-value');\nconst deviceNameElement = document.getElementById('device-name');\nconst exportJsonButton = document.getElementById('exportJsonButton');\nconst exportCsvButton = document.getElementById('exportCsvButton');\nconst exportTcxButton = document.getElementById('exportTcxButton');\nconst exportRawJsonButton = document.getElementById('exportRawJsonButton');\nconst exportRawCsvButton = document.getElementById('exportRawCsvButton');\nconst exportImageButton = document.getElementById('exportImageButton');\nconst clearSessionButton = document.getElementById('clearSessionButton');\n\n// Power averages elements\nconst avg10sCurrentElement = document.getElementById('avg10s-current');\nconst avg10sBestElement = document.getElementById('avg10s-best');\nconst avg30sCurrentElement = document.getElementById('avg30s-current');\nconst avg30sBestElement = document.getElementById('avg30s-best');\nconst avg1mCurrentElement = document.getElementById('avg1m-current');\nconst avg1mBestElement = document.getElementById('avg1m-best');\nconst avg2mCurrentElement = document.getElementById('avg2m-current');\nconst avg2mBestElement = document.getElementById('avg2m-best');\nconst avg4mCurrentElement = document.getElementById('avg4m-current');\nconst avg4mBestElement = document.getElementById('avg4m-best');\nconst avg8mCurrentElement = document.getElementById('avg8m-current');\nconst avg8mBestElement = document.getElementById('avg8m-best');\n\n// Toggle elements\nconst toggleConnectSection = document.getElementById('toggleConnectSection');\nconst toggleExportSection = document.getElementById('toggleExportSection');\nconst connectSection = document.getElementById('connectSection');\nconst exportSection = document.getElementById('exportSection');\nconst powerAveragesSection = document.getElementById('powerAveragesSection');\nconst connectToggleText = document.getElementById('connectToggleText');\nconst exportToggleText = document.getElementById('exportToggleText');\n\n// Hamburger menu elements\nconst hamburgerBtn = document.getElementById('hamburgerButton');\nconst menuDropdown = document.getElementById('menuDropdown');\nconst powerAveragesToggle = document.getElementById('powerAveragesToggle');\nconst powerMetricToggle = document.getElementById('powerMetricToggle');\nconst heartRateMetricToggle = document.getElementById('heartRateMetricToggle');\nconst cadenceMetricToggle = document.getElementById('cadenceMetricToggle');\nconst connectSectionToggle = document.getElementById('connectSectionToggle');\nconst exportSectionToggle = document.getElementById('exportSectionToggle');\nconst loadDebugDataMenuItem = document.getElementById('loadDebugDataMenuItem');\nconst showInfoMenuItem = document.getElementById('showInfoMenuItem');\nconst showQrCodeMenuItem = document.getElementById('showQrCodeMenuItem');\n\n// Metric card elements\nconst powerCard = document.querySelector('.power-card');\nconst heartRateCard = document.querySelector('.hr-card');\nconst cadenceCard = document.querySelector('.cadence-card');\n\n// Status indicator elements\nconst powerStatusIndicator = document.getElementById('power-status-indicator');\nconst hrStatusIndicator = document.getElementById('hr-status-indicator');\nconst cadenceStatusIndicator = document.getElementById('cadence-status-indicator');\n\n// Initialize all status indicators to disconnected state\npowerStatusIndicator.className = 'status-indicator';\nhrStatusIndicator.className = 'status-indicator';\ncadenceStatusIndicator.className = 'status-indicator';\n\n// Only add event listeners if elements exist\nif (hamburgerBtn && menuDropdown) {\n  // Hamburger menu functionality\n  hamburgerBtn.addEventListener('click', function () {\n    const isActive = menuDropdown.classList.contains('active');\n    if (isActive) {\n      menuDropdown.classList.remove('active');\n    } else {\n      menuDropdown.classList.add('active');\n    }\n  });\n\n  // Close menu when clicking outside\n  document.addEventListener('click', function (event) {\n    if (!event.target.closest('.hamburger-menu')) {\n      menuDropdown.classList.remove('active');\n    }\n  });\n} else {\n  console.error('Hamburger menu elements not found:', {\n    hamburgerBtn: !!hamburgerBtn,\n    menuDropdown: !!menuDropdown,\n  });\n}\n\nif (powerAveragesToggle && powerAveragesSection) {\n  // Power averages toggle via hamburger menu\n  let powerAveragesVisible = false;\n  powerAveragesToggle.addEventListener('click', function () {\n    powerAveragesVisible = !powerAveragesVisible;\n\n    if (powerAveragesVisible) {\n      powerAveragesSection.style.display = 'block';\n      powerAveragesToggle.classList.add('active');\n    } else {\n      powerAveragesSection.style.display = 'none';\n      powerAveragesToggle.classList.remove('active');\n    }\n    manageCollapsedSectionsLayout();\n  });\n} else {\n  console.error('Power averages toggle elements not found:', {\n    powerAveragesToggle: !!powerAveragesToggle,\n    powerAveragesSection: !!powerAveragesSection,\n  });\n}\n\n// Power metric toggle via hamburger menu\nif (powerMetricToggle && powerCard) {\n  let powerMetricVisible = true; // Start visible by default\n  powerMetricToggle.classList.add('active'); // Set initial active state\n\n  powerMetricToggle.addEventListener('click', function () {\n    powerMetricVisible = !powerMetricVisible;\n\n    if (powerMetricVisible) {\n      powerCard.style.display = 'block';\n      powerMetricToggle.classList.add('active');\n    } else {\n      powerCard.style.display = 'none';\n      powerMetricToggle.classList.remove('active');\n    }\n  });\n} else {\n  console.error('Power metric toggle elements not found:', {\n    powerMetricToggle: !!powerMetricToggle,\n    powerCard: !!powerCard,\n  });\n}\n\n// Heart rate metric toggle via hamburger menu\nif (heartRateMetricToggle && heartRateCard) {\n  let heartRateMetricVisible = true; // Start visible by default\n  heartRateMetricToggle.classList.add('active'); // Set initial active state\n\n  heartRateMetricToggle.addEventListener('click', function () {\n    heartRateMetricVisible = !heartRateMetricVisible;\n\n    if (heartRateMetricVisible) {\n      heartRateCard.style.display = 'block';\n      heartRateMetricToggle.classList.add('active');\n    } else {\n      heartRateCard.style.display = 'none';\n      heartRateMetricToggle.classList.remove('active');\n    }\n  });\n} else {\n  console.error('Heart rate metric toggle elements not found:', {\n    heartRateMetricToggle: !!heartRateMetricToggle,\n    heartRateCard: !!heartRateCard,\n  });\n}\n\n// Cadence metric toggle via hamburger menu\nif (cadenceMetricToggle && cadenceCard) {\n  let cadenceMetricVisible = true; // Start visible by default\n  cadenceMetricToggle.classList.add('active'); // Set initial active state\n\n  cadenceMetricToggle.addEventListener('click', function () {\n    cadenceMetricVisible = !cadenceMetricVisible;\n\n    if (cadenceMetricVisible) {\n      cadenceCard.style.display = 'block';\n      cadenceMetricToggle.classList.add('active');\n    } else {\n      cadenceCard.style.display = 'none';\n      cadenceMetricToggle.classList.remove('active');\n    }\n  });\n} else {\n  console.error('Cadence metric toggle elements not found:', {\n    cadenceMetricToggle: !!cadenceMetricToggle,\n    cadenceCard: !!cadenceCard,\n  });\n}\n\n// Connect section toggle via hamburger menu\nif (connectSectionToggle && connectSection) {\n  let connectSectionVisible = true; // Start visible by default\n  connectSectionToggle.classList.add('active'); // Set initial active state\n\n  connectSectionToggle.addEventListener('click', function () {\n    connectSectionVisible = !connectSectionVisible;\n\n    if (connectSectionVisible) {\n      connectSection.style.display = 'block';\n      connectSectionToggle.classList.add('active');\n    } else {\n      connectSection.style.display = 'none';\n      connectSectionToggle.classList.remove('active');\n    }\n  });\n} else {\n  console.error('Connect section toggle elements not found:', {\n    connectSectionToggle: !!connectSectionToggle,\n    connectSection: !!connectSection,\n  });\n}\n\n// Export section toggle via hamburger menu\nif (exportSectionToggle && exportSection) {\n  let exportSectionVisible = false; // Start hidden by default (as it currently is)\n  // exportSectionToggle starts inactive since export section is initially hidden\n\n  exportSectionToggle.addEventListener('click', function () {\n    exportSectionVisible = !exportSectionVisible;\n\n    if (exportSectionVisible) {\n      exportSection.style.display = 'block';\n      exportSectionToggle.classList.add('active');\n    } else {\n      exportSection.style.display = 'none';\n      exportSectionToggle.classList.remove('active');\n    }\n  });\n} else {\n  console.error('Export section toggle elements not found:', {\n    exportSectionToggle: !!exportSectionToggle,\n    exportSection: !!exportSection,\n  });\n}\n\n// Debug data functionality\nif (loadDebugDataMenuItem) {\n  loadDebugDataMenuItem.addEventListener('click', function () {\n    loadDebugData();\n    // Close the menu after loading debug data\n    if (menuDropdown) {\n      menuDropdown.classList.remove('active');\n    }\n  });\n} else {\n  console.error('Load debug data menu item not found');\n}\n\n// Info functionality\nif (showInfoMenuItem) {\n  showInfoMenuItem.addEventListener('click', function () {\n    showAppInfo();\n    // Close the menu after showing info\n    if (menuDropdown) {\n      menuDropdown.classList.remove('active');\n    }\n  });\n} else {\n  console.error('Show info menu item not found');\n}\n\n// QR Code functionality\nif (showQrCodeMenuItem) {\n  showQrCodeMenuItem.addEventListener('click', function () {\n    showQrCodeModal();\n    // Close the menu after showing QR code\n    if (menuDropdown) {\n      menuDropdown.classList.remove('active');\n    }\n  });\n} else {\n  console.error('Show QR code menu item not found');\n}\n\n// Toggle functionality for connect section\ntoggleConnectSection.addEventListener('click', () => {\n  const connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\n  const sectionHeader = connectSection.querySelector('.section-header');\n  const isHidden = connectButtons[0].style.display === 'none';\n  if (isHidden) {\n    connectButtons.forEach((btn) => (btn.style.display = 'block'));\n    connectToggleText.textContent = 'Hide Connect Devices';\n    toggleConnectSection.classList.remove('collapsed');\n    connectSection.classList.remove('collapsed');\n    sectionHeader.classList.remove('collapsed');\n  } else {\n    connectButtons.forEach((btn) => (btn.style.display = 'none'));\n    connectToggleText.textContent = 'Show Connect Devices';\n    toggleConnectSection.classList.add('collapsed');\n    connectSection.classList.add('collapsed');\n    sectionHeader.classList.add('collapsed');\n  }\n  // Don't call updateDashboardLayout for bottom controls\n});\n\n// Toggle functionality for export section\ntoggleExportSection.addEventListener('click', () => {\n  const exportButtons = document.getElementById('export-buttons');\n  const sectionHeader = exportSection.querySelector('.section-header');\n  const isHidden = exportButtons.style.display === 'none';\n  if (isHidden) {\n    exportSection.style.display = 'block';\n    exportButtons.style.display = 'flex';\n    exportToggleText.textContent = 'Hide Export Data';\n    toggleExportSection.classList.remove('collapsed');\n    exportSection.classList.remove('collapsed');\n    sectionHeader.classList.remove('collapsed');\n  } else {\n    exportButtons.style.display = 'none';\n    exportToggleText.textContent = 'Show Export Data';\n    toggleExportSection.classList.add('collapsed');\n    exportSection.classList.add('collapsed');\n    sectionHeader.classList.add('collapsed');\n  }\n  // Don't call updateDashboardLayout for bottom controls\n});\n\n// Function to update dashboard layout based on visible sections\nfunction updateDashboardLayout() {\n  const dashboard = document.querySelector('.dashboard');\n  const powerAveragesHidden = powerAveragesSection && powerAveragesSection.style.display === 'none';\n\n  if (powerAveragesHidden) {\n    dashboard.classList.add('maximized');\n  } else {\n    dashboard.classList.remove('maximized');\n  }\n\n  // Manage horizontal layout for collapsed sections (excluding bottom controls)\n  manageCollapsedSectionsLayout();\n}\n\n// Function to manage horizontal layout of collapsed sections\nfunction manageCollapsedSectionsLayout() {\n  const dashboard = document.querySelector('.dashboard');\n\n  // Only manage power averages section for collapsed layout -\n  // connect and export sections are now bottom controls and stay at bottom\n  // Note: collapsedSections logic simplified since only power averages section is managed now\n\n  // Remove any existing collapsed sections row\n  const existingRow = document.querySelector('.collapsed-sections-row');\n  if (existingRow) {\n    // Move sections back to their original positions\n    const sectionsInRow = existingRow.querySelectorAll('.power-averages-section');\n    sectionsInRow.forEach((section) => {\n      // Insert sections back after the dashboard\n      dashboard.parentNode.insertBefore(section, dashboard.nextSibling);\n    });\n    existingRow.remove();\n  }\n\n  // Power averages section doesn't need horizontal grouping since it's the only\n  // section that can be managed this way now\n  dashboard.classList.remove('has-collapsed-sections');\n}\n\n// Initialize sections - connect section visible, export section hidden (controlled by hamburger menu)\nconst connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\nconnectButtons.forEach((btn) => (btn.style.display = 'block'));\n\n// Initialize export section as hidden (controlled by hamburger menu)\nexportSection.style.display = 'none';\n\n// Initialize power averages section as hidden (controlled by hamburger menu)\npowerAveragesSection.style.display = 'none';\n\nupdateDashboardLayout();\n\nlet powerData = [];\nlet rawPowerMeasurements = [];\nlet lastPowerValue = 0;\nlet sessionStartTime = null;\n\n// Power averaging data structures\nlet powerReadings = []; // Array to store timestamped power readings\nlet powerAverages = {\n  '10s': { current: 0, best: 0 },\n  '30s': { current: 0, best: 0 },\n  '1m': { current: 0, best: 0 },\n  '2m': { current: 0, best: 0 },\n  '4m': { current: 0, best: 0 },\n  '8m': { current: 0, best: 0 },\n};\n\n// Power averaging functions\nfunction addPowerReading(power) {\n  const now = Date.now();\n  powerReadings.push({ timestamp: now, power: power });\n\n  // Keep only the last 8 minutes of readings (plus some buffer)\n  const eightMinutesAgo = now - 9 * 60 * 1000; // 9 minutes to be safe\n  powerReadings = powerReadings.filter((reading) => reading.timestamp > eightMinutesAgo);\n\n  // Calculate current averages\n  calculatePowerAverages();\n  updatePowerAveragesDisplay();\n}\n\nfunction calculatePowerAverages() {\n  const now = Date.now();\n  const periods = {\n    '10s': 10 * 1000,\n    '30s': 30 * 1000,\n    '1m': 60 * 1000,\n    '2m': 120 * 1000,\n    '4m': 240 * 1000,\n    '8m': 480 * 1000,\n  };\n\n  for (const [periodKey, periodMs] of Object.entries(periods)) {\n    const cutoffTime = now - periodMs;\n    const relevantReadings = powerReadings.filter((reading) => reading.timestamp >= cutoffTime);\n\n    if (relevantReadings.length > 0) {\n      const sum = relevantReadings.reduce((total, reading) => total + reading.power, 0);\n      const average = Math.round(sum / relevantReadings.length);\n      powerAverages[periodKey].current = average;\n\n      // Update best if current is better\n      if (average > powerAverages[periodKey].best) {\n        powerAverages[periodKey].best = average;\n      }\n    } else {\n      powerAverages[periodKey].current = 0;\n    }\n  }\n}\n\nfunction updatePowerAveragesDisplay() {\n  avg10sCurrentElement.textContent = powerAverages['10s'].current || '--';\n  avg10sBestElement.textContent = powerAverages['10s'].best || '--';\n  avg30sCurrentElement.textContent = powerAverages['30s'].current || '--';\n  avg30sBestElement.textContent = powerAverages['30s'].best || '--';\n  avg1mCurrentElement.textContent = powerAverages['1m'].current || '--';\n  avg1mBestElement.textContent = powerAverages['1m'].best || '--';\n  avg2mCurrentElement.textContent = powerAverages['2m'].current || '--';\n  avg2mBestElement.textContent = powerAverages['2m'].best || '--';\n  avg4mCurrentElement.textContent = powerAverages['4m'].current || '--';\n  avg4mBestElement.textContent = powerAverages['4m'].best || '--';\n  avg8mCurrentElement.textContent = powerAverages['8m'].current || '--';\n  avg8mBestElement.textContent = powerAverages['8m'].best || '--';\n}\n\nfunction resetPowerAverages() {\n  powerReadings = [];\n  for (const period of Object.keys(powerAverages)) {\n    powerAverages[period].current = 0;\n    powerAverages[period].best = 0;\n  }\n  updatePowerAveragesDisplay();\n}\n\n/**\n * Reset all session data (called when all devices disconnect)\n */\nfunction resetAllSessionData() {\n  // Clear all data arrays\n  powerData.length = 0;\n  heartData.length = 0;\n  cadenceData.length = 0;\n  rawPowerMeasurements.length = 0;\n  powerReadings.length = 0;\n\n  // Reset power averages\n  for (const period of Object.keys(powerAverages)) {\n    powerAverages[period].current = 0;\n    powerAverages[period].best = 0;\n  }\n\n  // Reset last values\n  lastPowerValue = 0;\n  lastHeartRateValue = 0;\n  lastCadenceValue = 0;\n  sessionStartTime = null;\n\n  // Update displays\n  updatePowerAveragesDisplay();\n  powerValueElement.textContent = '--';\n  hrValueElement.textContent = '--';\n  cadenceValueElement.textContent = '--';\n\n  // Clear localStorage\n  clearSessionData();\n}\n\n/**\n * Load debug data with 1000 data points for testing\n */\nfunction loadDebugData() {\n  console.log('Loading debug data...');\n\n  // Clear existing data first\n  resetAllSessionData();\n\n  // Set session start time to 1 hour ago\n  const now = Date.now();\n  sessionStartTime = now - 60 * 60 * 1000; // 1 hour ago\n\n  // Generate 1000 data points over 1 hour (one every 3.6 seconds)\n  const dataPointInterval = (60 * 60 * 1000) / 1000; // 3.6 seconds\n\n  for (let i = 0; i < 1000; i++) {\n    const timestamp = sessionStartTime + i * dataPointInterval;\n\n    // Generate realistic power data (150-400W with some variation)\n    const basePower = 250;\n    const powerVariation = 150;\n    const powerNoise = (Math.random() - 0.5) * 50;\n    const powerWave = Math.sin(i / 100) * powerVariation;\n    const power = Math.max(0, Math.round(basePower + powerWave + powerNoise));\n\n    // Generate realistic heart rate data (120-180 BPM)\n    const baseHR = 150;\n    const hrVariation = 30;\n    const hrNoise = (Math.random() - 0.5) * 10;\n    const hrWave = Math.sin(i / 150) * hrVariation;\n    const heartRate = Math.max(60, Math.min(200, Math.round(baseHR + hrWave + hrNoise)));\n\n    // Generate realistic cadence data (70-110 RPM)\n    const baseCadence = 90;\n    const cadenceVariation = 20;\n    const cadenceNoise = (Math.random() - 0.5) * 8;\n    const cadenceWave = Math.sin(i / 80) * cadenceVariation;\n    const cadence = Math.max(0, Math.round(baseCadence + cadenceWave + cadenceNoise));\n\n    // Add to data arrays\n    powerData.push({ timestamp, power, heartRate, cadence });\n    heartData.push({ timestamp, heartRate });\n    cadenceData.push({ timestamp, cadence });\n\n    // Add power reading for averages calculation\n    powerReadings.push({ timestamp, power });\n\n    // Add raw measurement for TCX export\n    rawPowerMeasurements.push({\n      timestamp,\n      flags: 0,\n      rawBytes: '00 00 ' + power.toString(16).padStart(4, '0'),\n      dataLength: 4,\n      instantaneousPower: power,\n    });\n  }\n\n  // Update last values to the most recent data point\n  const lastData = powerData[powerData.length - 1];\n  lastPowerValue = lastData.power;\n  lastHeartRateValue = lastData.heartRate;\n  lastCadenceValue = lastData.cadence;\n\n  // Calculate power averages for all the debug data\n  calculateAllPowerAverages();\n\n  // Update displays\n  powerValueElement.textContent = lastPowerValue;\n  hrValueElement.textContent = lastHeartRateValue;\n  cadenceValueElement.textContent = lastCadenceValue;\n  updatePowerAveragesDisplay();\n\n  // Save to localStorage\n  saveSessionData();\n\n  // Show success message\n  alert(\n    `Debug data loaded successfully!\\n1000 data points generated over 1 hour.\\nPower: ${lastPowerValue}W, HR: ${lastHeartRateValue}BPM, Cadence: ${lastCadenceValue}RPM`\n  );\n\n  console.log('Debug data loaded:', {\n    powerDataPoints: powerData.length,\n    heartDataPoints: heartData.length,\n    cadenceDataPoints: cadenceData.length,\n  });\n}\n\n/**\n * Calculate power averages for all periods based on current powerReadings\n */\nfunction calculateAllPowerAverages() {\n  const periods = {\n    '10s': 10 * 1000,\n    '30s': 30 * 1000,\n    '1m': 60 * 1000,\n    '2m': 2 * 60 * 1000,\n    '4m': 4 * 60 * 1000,\n    '8m': 8 * 60 * 1000,\n  };\n\n  const now = Date.now();\n\n  for (const [periodKey, duration] of Object.entries(periods)) {\n    const periodStart = now - duration;\n    const periodReadings = powerReadings.filter((reading) => reading.timestamp >= periodStart);\n\n    if (periodReadings.length > 0) {\n      const averagePower = Math.round(\n        periodReadings.reduce((sum, reading) => sum + reading.power, 0) / periodReadings.length\n      );\n\n      powerAverages[periodKey].current = averagePower;\n\n      // Update best if this current average is better\n      if (averagePower > powerAverages[periodKey].best) {\n        powerAverages[periodKey].best = averagePower;\n      }\n    }\n  }\n}\n\n/**\n * Show application information and usage instructions\n */\nfunction showAppInfo() {\n  const modal = document.createElement('div');\n  modal.className = 'modal-backdrop';\n  modal.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n    `;\n\n  const modalContent = document.createElement('div');\n  modalContent.className = 'modal';\n  modalContent.style.cssText = `\n        background: #1a1a2e;\n        border-radius: 12px;\n        padding: 2rem;\n        max-width: 600px;\n        max-height: 80vh;\n        overflow-y: auto;\n        margin: 20px;\n        border: 1px solid rgba(255, 255, 255, 0.2);\n    `;\n\n  modalContent.innerHTML = `\n        <div style=\"text-align: center; margin-bottom: 1.5rem;\">\n            <h2 style=\"color: #3498db; margin: 0 0 0.5rem 0; font-size: 1.8rem;\">🚴 Web Bluetooth Power Meter</h2>\n            <p style=\"color: #cccccc; margin: 0; font-size: 1rem;\">Real-time cycling data analysis</p>\n        </div>\n\n        <div style=\"color: #ffffff; line-height: 1.6;\">\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">📱 What is this app?</h3>\n            <p style=\"margin-bottom: 1rem;\">\n                This is a web-based power meter application that connects to Bluetooth cycling devices \n                to provide real-time power, heart rate, and cadence data analysis. Perfect for indoor \n                training, data logging, and performance tracking.\n            </p>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">🔗 How to connect devices:</h3>\n            <ol style=\"margin-bottom: 1rem; padding-left: 1.5rem;\">\n                <li><strong>Power Meter:</strong> Click \"Connect Power Meter\" and select your cycling power device</li>\n                <li><strong>Heart Rate:</strong> Click \"Connect Heart Rate\" to pair your HR monitor</li>\n                <li><strong>Cadence:</strong> Click \"Connect Cadence\" for speed/cadence sensors</li>\n            </ol>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">📊 Features:</h3>\n            <ul style=\"margin-bottom: 1rem; padding-left: 1.5rem;\">\n                <li><strong>Real-time Metrics:</strong> Live power, heart rate, and cadence display</li>\n                <li><strong>Power Averages:</strong> 10s, 30s, 1m, 2m, 4m, and 8m rolling averages</li>\n                <li><strong>Data Export:</strong> JSON, CSV, TCX, and visual summary image formats</li>\n                <li><strong>Session Persistence:</strong> Data automatically saved and restored</li>\n                <li><strong>Custom Dashboard:</strong> Toggle metrics and sections via hamburger menu</li>\n            </ul>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">⚙️ Using the hamburger menu:</h3>\n            <ul style=\"margin-bottom: 1rem; padding-left: 1.5rem;\">\n                <li><strong>Toggle Sections:</strong> Show/hide different parts of the interface</li>\n                <li><strong>Load Debug Data:</strong> Generate 1000 test data points for testing</li>\n                <li><strong>Customize View:</strong> Control which metrics are visible</li>\n            </ul>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">🌐 Browser Support:</h3>\n            <p style=\"margin-bottom: 1rem;\">\n                Requires a browser with Web Bluetooth support:\n                <br>• Chrome 56+ • Edge 79+ • Opera 43+\n            </p>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">💡 Tips:</h3>\n            <ul style=\"margin-bottom: 1.5rem; padding-left: 1.5rem;\">\n                <li>Make sure your devices are in pairing mode before connecting</li>\n                <li>Data is automatically saved to your browser's local storage</li>\n                <li>Use the export functions to save your workout data</li>\n                <li>The app works offline once loaded</li>\n            </ul>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 2rem;\">\n            <button id=\"closeInfoModal\" style=\"\n                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);\n                color: white;\n                border: none;\n                padding: 12px 24px;\n                border-radius: 8px;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.3s ease;\n            \">Got it!</button>\n        </div>\n    `;\n\n  modal.appendChild(modalContent);\n  document.body.appendChild(modal);\n\n  // Close modal event listeners\n  const closeButton = modalContent.querySelector('#closeInfoModal');\n  const closeModal = () => {\n    document.body.removeChild(modal);\n  };\n\n  closeButton.addEventListener('click', closeModal);\n  modal.addEventListener('click', (e) => {\n    if (e.target === modal) {\n      closeModal();\n    }\n  });\n\n  // Close on Escape key\n  const handleEscape = (e) => {\n    if (e.key === 'Escape') {\n      closeModal();\n      document.removeEventListener('keydown', handleEscape);\n    }\n  };\n  document.addEventListener('keydown', handleEscape);\n\n  // Add hover effect to button\n  closeButton.addEventListener('mouseenter', () => {\n    closeButton.style.transform = 'translateY(-2px)';\n    closeButton.style.boxShadow = '0 8px 24px rgba(52, 152, 219, 0.4)';\n  });\n\n  closeButton.addEventListener('mouseleave', () => {\n    closeButton.style.transform = 'translateY(0)';\n    closeButton.style.boxShadow = 'none';\n  });\n}\n\n/**\n * Show QR code modal with link to the app\n */\nfunction showQrCodeModal() {\n  const appUrl = 'https://colscoding.github.io/power-saver/';\n\n  const modal = document.createElement('div');\n  modal.className = 'modal-backdrop';\n  modal.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n    `;\n\n  const modalContent = document.createElement('div');\n  modalContent.className = 'modal';\n  modalContent.style.cssText = `\n        background: #1a1a2e;\n        border-radius: 12px;\n        padding: 2rem;\n        max-width: 400px;\n        max-height: 80vh;\n        overflow-y: auto;\n        margin: 20px;\n        border: 1px solid rgba(255, 255, 255, 0.2);\n        text-align: center;\n    `;\n\n  // Create QR code canvas\n  const qrCanvas = document.createElement('canvas');\n  qrCanvas.width = 256;\n  qrCanvas.height = 256;\n  qrCanvas.style.cssText = `\n        background: white;\n        border-radius: 8px;\n        margin: 1rem 0;\n        max-width: 100%;\n        height: auto;\n    `;\n\n  // Generate QR code\n  generateQRCode(qrCanvas, appUrl);\n\n  modalContent.innerHTML = `\n        <div style=\"margin-bottom: 1.5rem;\">\n            <h2 style=\"color: #9b59b6; margin: 0 0 0.5rem 0; font-size: 1.8rem;\">📱 Share Power Meter App</h2>\n            <p style=\"color: #cccccc; margin: 0; font-size: 1rem;\">Scan to access the app on any device</p>\n        </div>\n        \n        <div id=\"qr-container\" style=\"margin: 1.5rem 0;\"></div>\n        \n        <div style=\"margin: 1.5rem 0;\">\n            <p style=\"color: #ffffff; margin: 0 0 0.5rem 0; font-weight: 600;\">Or visit directly:</p>\n            <a href=\"${appUrl}\" target=\"_blank\" style=\"\n                color: #9b59b6; \n                text-decoration: none; \n                font-size: 0.9rem;\n                word-break: break-all;\n                line-height: 1.4;\n            \">${appUrl}</a>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 2rem;\">\n            <button id=\"closeQrModal\" style=\"\n                background: linear-gradient(135deg, #9b59b6 0%, #8e44ad 100%);\n                color: white;\n                border: none;\n                padding: 12px 24px;\n                border-radius: 8px;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.3s ease;\n            \">Close</button>\n        </div>\n    `;\n\n  // Insert QR code canvas\n  const qrContainer = modalContent.querySelector('#qr-container');\n  qrContainer.appendChild(qrCanvas);\n\n  modal.appendChild(modalContent);\n  document.body.appendChild(modal);\n\n  // Close modal event listeners\n  const closeButton = modalContent.querySelector('#closeQrModal');\n  const closeModal = () => {\n    document.body.removeChild(modal);\n  };\n\n  closeButton.addEventListener('click', closeModal);\n  modal.addEventListener('click', (e) => {\n    if (e.target === modal) {\n      closeModal();\n    }\n  });\n\n  // Close on Escape key\n  const handleEscape = (e) => {\n    if (e.key === 'Escape') {\n      closeModal();\n      document.removeEventListener('keydown', handleEscape);\n    }\n  };\n  document.addEventListener('keydown', handleEscape);\n\n  // Add hover effect to button\n  closeButton.addEventListener('mouseenter', () => {\n    closeButton.style.transform = 'translateY(-2px)';\n    closeButton.style.boxShadow = '0 8px 24px rgba(155, 89, 182, 0.4)';\n  });\n\n  closeButton.addEventListener('mouseleave', () => {\n    closeButton.style.transform = 'translateY(0)';\n    closeButton.style.boxShadow = 'none';\n  });\n}\n\n/**\n * Generate QR code on canvas using a simple QR code generation algorithm\n */\nfunction generateQRCode(canvas, text) {\n  const ctx = canvas.getContext('2d');\n  const size = canvas.width;\n\n  // Clear canvas with white background\n  ctx.fillStyle = '#ffffff';\n  ctx.fillRect(0, 0, size, size);\n\n  // Simple QR code generation using an online QR code API as fallback\n  // For a production app, you'd want to include a proper QR code library\n  const qrApiUrl = `https://api.qrserver.com/v1/create-qr-code/?size=${size}x${size}&data=${encodeURIComponent(text)}`;\n\n  const img = new Image();\n  img.crossOrigin = 'anonymous';\n\n  img.onload = function () {\n    ctx.drawImage(img, 0, 0, size, size);\n  };\n\n  img.onerror = function () {\n    // Fallback: draw a simple pattern if QR API fails\n    drawFallbackQR(ctx, size);\n  };\n\n  img.src = qrApiUrl;\n}\n\n/**\n * Fallback QR code representation when API is unavailable\n */\nfunction drawFallbackQR(ctx, size) {\n  ctx.fillStyle = '#000000';\n  ctx.font = '12px Arial';\n  ctx.textAlign = 'center';\n\n  // Draw a simple grid pattern\n  const cellSize = size / 25;\n  for (let i = 0; i < 25; i++) {\n    for (let j = 0; j < 25; j++) {\n      if ((i + j) % 3 === 0 || i === 0 || i === 24 || j === 0 || j === 24) {\n        ctx.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);\n      }\n    }\n  }\n\n  // Add text in center\n  ctx.fillStyle = '#ffffff';\n  ctx.fillRect(size * 0.2, size * 0.4, size * 0.6, size * 0.2);\n  ctx.fillStyle = '#000000';\n  ctx.fillText('QR Code', size / 2, size / 2 - 10);\n  ctx.fillText('Unavailable', size / 2, size / 2 + 10);\n}\n\nlet lastHeartRateValue = 0;\nlet lastCadenceValue = 0;\nlet dataLoggerInterval = null;\nlet powerMeterDevice = null;\nconst CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID = 'cycling_power_feature';\nconst CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\n\nconnectButton.addEventListener('click', async () => {\n  await requestWakeLock();\n  if (!navigator.bluetooth) {\n    statusText.textContent = 'Web Bluetooth API is not available.';\n    return;\n  }\n\n  // Reset data from previous session\n  powerData = [];\n  rawPowerMeasurements = [];\n  lastPowerValue = 0;\n  resetPowerAverages();\n  if (dataLoggerInterval) {\n    clearInterval(dataLoggerInterval);\n  }\n\n  try {\n    statusText.textContent = 'Scanning for power meters...';\n    powerStatusIndicator.className = 'status-indicator connecting';\n\n    // Scan specifically for devices advertising the Cycling Power service\n    powerMeterDevice = await navigator.bluetooth.requestDevice({\n      filters: [\n        {\n          services: [CYCLING_POWER_SERVICE_UUID],\n        },\n      ],\n    });\n\n    statusText.textContent = 'Connecting to device...';\n    deviceNameElement.textContent = `Device: ${powerMeterDevice.name || 'Unknown Device'}`;\n\n    powerMeterDevice.addEventListener('gattserverdisconnected', onDisconnected);\n\n    const server = await powerMeterDevice.gatt.connect();\n    const service = await server.getPrimaryService(CYCLING_POWER_SERVICE_UUID);\n    const characteristic = await service.getCharacteristic(\n      CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID\n    );\n\n    // Check for and subscribe to advanced power features if available\n    try {\n      const featureCharacteristic = await service.getCharacteristic(\n        CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID\n      );\n      // eslint-disable-next-line no-unused-vars\n      const features = await featureCharacteristic.readValue();\n      // This value can be used to determine what the power meter supports,\n      // but for now we just parse what's in the measurement characteristic.\n    } catch {\n      // Cycling Power Feature characteristic not found\n    }\n\n    // Subscribe to power measurement notifications\n    await characteristic.startNotifications();\n\n    characteristic.addEventListener('characteristicvaluechanged', handlePowerMeasurement);\n\n    statusText.textContent = 'Connected and receiving data!';\n    powerStatusIndicator.className = 'status-indicator connected';\n    connectButton.disabled = true;\n\n    // Start session if this is the first connection\n    if (!sessionStartTime) {\n      sessionStartTime = Date.now();\n    }\n\n    // exportButtons.style.display = 'block';\n\n    dataLoggerInterval = setInterval(() => {\n      powerData.push({\n        timestamp: Date.now(),\n        power: lastPowerValue,\n        heartRate: lastHeartRateValue,\n        cadence: lastCadenceValue,\n      });\n\n      // Save session data every 10 seconds\n      if (powerData.length % 100 === 0) {\n        // Every 100 readings = 10 seconds\n        saveSessionData();\n      }\n    }, 100);\n  } catch (error) {\n    statusText.textContent = `Error: ${error.message}`;\n    powerStatusIndicator.className = 'status-indicator';\n    console.error('Connection failed:', error);\n    if (powerMeterDevice) {\n      powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n    }\n  }\n});\n\nexportJsonButton.addEventListener('click', () => {\n  const jsonString = JSON.stringify(powerData, null, 2);\n  const blob = new Blob([jsonString], {\n    type: 'application/json',\n  });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const dateString = `${year}-${month}-${day}`;\n  a.download = `power_data_${dateString}.json`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n});\n\nexportCsvButton.addEventListener('click', () => {\n  let csvContent = 'timestamp,power,heartRate,cadence\\n';\n  powerData.forEach((row) => {\n    csvContent += `${row.timestamp},${row.power},${row.heartRate},${row.cadence}\\n`;\n  });\n\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;',\n  });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const dateString = `${year}-${month}-${day}`;\n  a.download = `power_data_${dateString}.csv`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n});\n\n// Export raw power measurements as JSON\nexportRawJsonButton.addEventListener('click', () => {\n  const jsonString = JSON.stringify(rawPowerMeasurements, null, 2);\n  const blob = new Blob([jsonString], {\n    type: 'application/json',\n  });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const dateString = `${year}-${month}-${day}`;\n  a.download = `raw_power_measurements_${dateString}.json`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n});\n\n// Export raw power measurements as CSV\nexportRawCsvButton.addEventListener('click', () => {\n  let csvContent = 'timestamp,flags,dataLength,instantaneousPower,rawBytes\\n';\n\n  rawPowerMeasurements.forEach((measurement) => {\n    csvContent += `${measurement.timestamp},${measurement.flags},${measurement.dataLength},${measurement.instantaneousPower},\"${measurement.rawBytes}\"\\n`;\n  });\n\n  const blob = new Blob([csvContent], {\n    type: 'text/csv;charset=utf-8;',\n  });\n  const url = URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.href = url;\n  const now = new Date();\n  const year = now.getFullYear();\n  const month = String(now.getMonth() + 1).padStart(2, '0');\n  const day = String(now.getDate()).padStart(2, '0');\n  const dateString = `${year}-${month}-${day}`;\n  a.download = `raw_power_measurements_${dateString}.csv`;\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n  URL.revokeObjectURL(url);\n});\n\n// Export TCX\nexportTcxButton.addEventListener('click', () => {\n  try {\n    if (powerData.length === 0) {\n      alert('No power data available to export.');\n      return;\n    }\n\n    const tcxContent = generateTcxString(powerData);\n\n    const blob = new Blob([tcxContent], {\n      type: 'application/xml;charset=utf-8;',\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.tcx`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n  } catch (error) {\n    console.error('Error generating TCX:', error);\n    alert(`Error generating TCX file: ${error.message}`);\n  }\n});\n\n// Export Summary Image\nexportImageButton.addEventListener('click', async () => {\n  try {\n    if (powerData.length === 0 && heartData.length === 0 && cadenceData.length === 0) {\n      alert('No data available to export. Please record some activity first.');\n      return;\n    }\n\n    const canvas = await generateSummaryImage();\n\n    // Create download link\n    canvas.toBlob((blob) => {\n      const url = URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      const now = new Date();\n      const year = now.getFullYear();\n      const month = String(now.getMonth() + 1).padStart(2, '0');\n      const day = String(now.getDate()).padStart(2, '0');\n      const dateString = `${year}-${month}-${day}`;\n      a.download = `power_meter_summary_${dateString}.png`;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      URL.revokeObjectURL(url);\n    }, 'image/png');\n  } catch (error) {\n    console.error('Error generating summary image:', error);\n    alert(`Error generating summary image: ${error.message}`);\n  }\n});\n\n// Clear Session Data\nclearSessionButton.addEventListener('click', () => {\n  const confirmed = confirm(\n    'Are you sure you want to clear all session data? This action cannot be undone.'\n  );\n  if (confirmed) {\n    resetAllSessionData();\n    alert('Session data cleared successfully!');\n  }\n});\n\nfunction handlePowerMeasurement(event) {\n  const value = event.target.value;\n  const timestamp = Date.now();\n\n  // Store simplified raw measurement data\n  const rawMeasurement = {\n    timestamp: timestamp,\n    flags: value.getUint16(0, true),\n    rawBytes: Array.from(new Uint8Array(value.buffer))\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join(' '),\n    dataLength: value.byteLength,\n  };\n\n  // The data is a DataView object with a flags field and the power value.\n  // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n  // eslint-disable-next-line no-unused-vars\n  const flags = value.getUint16(0, true);\n  let offset = 2;\n\n  // Power is always present\n  const power = value.getInt16(offset, true);\n  rawMeasurement.instantaneousPower = power;\n  powerValueElement.textContent = power;\n  lastPowerValue = power;\n\n  // Add power reading to averaging calculations\n  addPowerReading(power);\n\n  // Store the simplified raw measurement\n  rawPowerMeasurements.push(rawMeasurement);\n}\n/**\n * Parses the Cycling Power Measurement characteristic data.\n * The data is a DataView object with a flags field and the power value.\n * The instantaneous power is a 16-bit signed integer starting at the 3rd byte (offset 2).\n * Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n * Currently unused but kept for potential future use.\n */\n// eslint-disable-next-line no-unused-vars\nfunction parsePowerMeasurement(value) {\n  // The first 2 bytes are flags. The next 2 bytes are the instantaneous power.\n  // The power value is a signed 16-bit integer (sint16)\n  const instantaneousPower = value.getInt16(2, /*littleEndian=*/ true);\n  return instantaneousPower;\n}\n\nfunction onDisconnected() {\n  statusText.textContent = 'Device disconnected.';\n  powerStatusIndicator.className = 'status-indicator';\n  deviceNameElement.textContent = '';\n  powerValueElement.textContent = '--';\n  resetPowerAverages();\n  connectButton.disabled = false;\n  if (dataLoggerInterval) {\n    clearInterval(dataLoggerInterval);\n    dataLoggerInterval = null;\n  }\n  if (powerMeterDevice) {\n    powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n    powerMeterDevice = null;\n  }\n  lastPowerValue = 0;\n}\n\nconst heartData = [];\nconst cadenceData = [];\n// eslint-disable-next-line no-unused-vars\nlet hrDataLoggerInterval = null; // Reserved for future HR data logging functionality\n\nconst hrConnectButton = document.getElementById('hrConnectButton');\nconst hrStatusText = document.getElementById('hrStatus');\nconst hrValue = document.getElementById('hr-value');\nconst hrDeviceName = document.getElementById('hrDeviceName');\n\nlet hrBluetoothDevice = null;\n\nhrConnectButton.addEventListener('click', async () => {\n  await requestWakeLock();\n  if (!navigator.bluetooth) {\n    hrStatusText.textContent = 'Web Bluetooth API is not available.';\n    return;\n  }\n\n  try {\n    hrStatusText.textContent = 'Scanning for devices...';\n    hrStatusIndicator.className = 'status-indicator connecting';\n\n    // Filter for devices that advertise the 'heart_rate' service\n    hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n      filters: [\n        {\n          services: ['heart_rate'],\n        },\n      ],\n    });\n\n    hrStatusText.textContent = 'Connecting to device...';\n    hrDeviceName.textContent = `Device: ${hrBluetoothDevice.name}`;\n\n    // Add a listener for when the device gets disconnected\n    hrBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedHr);\n\n    const hrServer = await hrBluetoothDevice.gatt.connect();\n    const hrService = await hrServer.getPrimaryService('heart_rate');\n    const hrCharacteristic = await hrService.getCharacteristic('heart_rate_measurement');\n\n    // Start notifications to receive heart rate data\n    await hrCharacteristic.startNotifications();\n\n    hrCharacteristic.addEventListener('characteristicvaluechanged', handleHeartRateChanged);\n\n    hrStatusText.textContent = 'Connected!';\n    hrStatusIndicator.className = 'status-indicator connected';\n    hrConnectButton.disabled = true;\n  } catch (error) {\n    hrStatusText.textContent = `Error: ${error.message}`;\n    hrStatusIndicator.className = 'status-indicator';\n    console.error('Connection failed:', error);\n  }\n});\n\nfunction handleHeartRateChanged(event) {\n  const value = event.target.value;\n  const heartRate = parseHeartRate(value);\n  hrValue.textContent = heartRate;\n  lastHeartRateValue = heartRate;\n}\n\n/**\n * The heart rate measurement is a DataView object.\n * The first byte is a flag, and the subsequent byte(s) are the heart rate value.\n * We need to check the first bit of the flag to see if the value is 8-bit or 16-bit.\n */\nfunction parseHeartRate(value) {\n  const flags = value.getUint8(0);\n  // Check if the heart rate value format is UINT16 (bit 0 is 1) or UINT8 (bit 0 is 0)\n  const is16bit = flags & 0x1;\n  if (is16bit) {\n    // If 16-bit, read 2 bytes starting from the second byte\n    return value.getUint16(1, /*littleEndian=*/ true);\n  } else {\n    // If 8-bit, read 1 byte starting from the second byte\n    return value.getUint8(1);\n  }\n}\n\nfunction onDisconnectedHr() {\n  hrStatusText.textContent = 'Device disconnected.';\n  hrStatusIndicator.className = 'status-indicator';\n  hrDeviceName.textContent = '';\n  hrValue.textContent = '--';\n  hrConnectButton.disabled = false;\n  hrBluetoothDevice = null;\n  lastHeartRateValue = 0;\n}\n\nconst speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\nconst cadenceStatusText = document.getElementById('cadenceStatus');\nconst cadenceDeviceName = document.getElementById('cadenceDeviceName');\nlet speedCadenceBluetoothDevice = null;\n\nspeedCadenceConnectButton.addEventListener('click', async () => {\n  await requestWakeLock();\n  if (!navigator.bluetooth) {\n    cadenceStatusText.textContent = 'Web Bluetooth API is not available.';\n    return;\n  }\n\n  try {\n    cadenceStatusText.textContent = 'Scanning for sensors...';\n    cadenceStatusIndicator.className = 'status-indicator connecting';\n\n    // Reset cadence variables for clean start\n    if (cadenceResetTimer) {\n      clearTimeout(cadenceResetTimer);\n      cadenceResetTimer = null;\n    }\n    lastCrankRevs = 0;\n    lastCrankTime = 0;\n    lastCadenceValue = 0;\n\n    speedCadenceBluetoothDevice = await navigator.bluetooth.requestDevice({\n      filters: [\n        {\n          services: [CYCLING_CADENCE_SERVICE_UUID],\n        },\n      ],\n    });\n\n    cadenceStatusText.textContent = 'Connecting to device...';\n    cadenceDeviceName.textContent = `Device: ${speedCadenceBluetoothDevice.name}`;\n\n    speedCadenceBluetoothDevice.addEventListener(\n      'gattserverdisconnected',\n      onDisconnectedSpeedCadence\n    );\n\n    const server = await speedCadenceBluetoothDevice.gatt.connect();\n    const service = await server.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID);\n    const characteristic = await service.getCharacteristic(CSC_MEASUREMENT_CHARACTERISTIC_UUID);\n\n    await characteristic.startNotifications();\n    characteristic.addEventListener('characteristicvaluechanged', handleSpeedCadenceMeasurement);\n\n    cadenceStatusText.textContent = 'Connected!';\n    cadenceStatusIndicator.className = 'status-indicator connected';\n    speedCadenceConnectButton.disabled = true;\n  } catch (error) {\n    cadenceStatusText.textContent = `Error: ${error.message}`;\n    cadenceStatusIndicator.className = 'status-indicator';\n    console.error('Speed/Cadence connection failed:', error);\n  }\n});\n\nlet lastCrankRevs = 0;\nlet lastCrankTime = 0;\nlet cadenceResetTimer = null;\n\nfunction handleSpeedCadenceMeasurement(event) {\n  const value = event.target.value;\n  const flags = value.getUint8(0);\n  let offset = 1;\n\n  const wheelRevsPresent = flags & 0x01;\n  const crankRevsPresent = flags & 0x02;\n\n  // Skip wheel revolution data since we don't need speed/distance\n  if (wheelRevsPresent) {\n    offset += 6; // Skip wheel data\n  }\n\n  if (crankRevsPresent) {\n    const cumulativeCrankRevolutions = value.getUint16(offset, true);\n    const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n\n    if (lastCrankRevs > 0) {\n      const revs = cumulativeCrankRevolutions - lastCrankRevs;\n      const time = (lastCrankEventTime - lastCrankTime) / 1024; // in seconds\n      if (time > 0) {\n        const cadence = (revs / time) * 60; // RPM\n        cadenceValueElement.textContent = Math.round(cadence);\n        lastCadenceValue = Math.round(cadence);\n\n        // Clear any existing reset timer\n        if (cadenceResetTimer) {\n          clearTimeout(cadenceResetTimer);\n        }\n\n        // Set timer to reset cadence to 0 if no new data comes in for 3 seconds\n        cadenceResetTimer = setTimeout(() => {\n          cadenceValueElement.textContent = '0';\n          lastCadenceValue = 0;\n          cadenceResetTimer = null;\n        }, 3000);\n      }\n    }\n    lastCrankRevs = cumulativeCrankRevolutions;\n    lastCrankTime = lastCrankEventTime;\n  }\n}\n\nfunction onDisconnectedSpeedCadence() {\n  cadenceStatusText.textContent = 'Device disconnected.';\n  cadenceStatusIndicator.className = 'status-indicator';\n  cadenceDeviceName.textContent = '';\n  cadenceValueElement.textContent = '--';\n  speedCadenceConnectButton.disabled = false;\n  speedCadenceBluetoothDevice = null;\n  lastCadenceValue = 0;\n\n  // Clear cadence reset timer and reset variables\n  if (cadenceResetTimer) {\n    clearTimeout(cadenceResetTimer);\n    cadenceResetTimer = null;\n  }\n  lastCrankRevs = 0;\n  lastCrankTime = 0;\n}\n\n// Initialize session on page load\n/**\n * Show restoration dialog to let user choose\n */\nfunction showRestorationDialog(sessionData) {\n  return new Promise((resolve) => {\n    // Create modal backdrop\n    const backdrop = document.createElement('div');\n    backdrop.className = 'modal-backdrop';\n\n    // Create modal dialog\n    const modal = document.createElement('div');\n    modal.className = 'modal';\n\n    // Get session info\n    const sessionAge = Math.round((Date.now() - sessionData.timestamp) / (1000 * 60)); // minutes\n    const dataCount =\n      (sessionData.powerData?.length || 0) +\n      (sessionData.heartData?.length || 0) +\n      (sessionData.cadenceData?.length || 0);\n\n    modal.innerHTML = `\n            <h3>Previous Session Found</h3>\n            <p>\n                A previous session was found from ${sessionAge} minutes ago with ${dataCount} data points.\n            </p>\n            <p>\n                Would you like to restore this session or start fresh?\n            </p>\n            <div class=\"modal-buttons\">\n                <button id=\"startFresh\" class=\"modal-button secondary\">Start Fresh</button>\n                <button id=\"restoreSession\" class=\"modal-button primary\">Restore Session</button>\n            </div>\n        `;\n\n    backdrop.appendChild(modal);\n    document.body.appendChild(backdrop);\n\n    // Handle button clicks\n    modal.querySelector('#startFresh').addEventListener('click', () => {\n      document.body.removeChild(backdrop);\n      localStorage.removeItem(SESSION_STORAGE_KEY);\n      resolve(false);\n    });\n\n    modal.querySelector('#restoreSession').addEventListener('click', () => {\n      document.body.removeChild(backdrop);\n      resolve(true);\n    });\n\n    // Handle backdrop click\n    backdrop.addEventListener('click', (e) => {\n      if (e.target === backdrop) {\n        document.body.removeChild(backdrop);\n        resolve(false);\n      }\n    });\n  });\n}\n\ndocument.addEventListener('DOMContentLoaded', async function () {\n  // Try to load previous session data\n  const sessionData = loadSessionData();\n  if (sessionData) {\n    // Show restoration dialog\n    const shouldRestore = await showRestorationDialog(sessionData);\n    if (shouldRestore) {\n      restoreSessionData(sessionData);\n    } else {\n      sessionStartTime = Date.now();\n    }\n  } else {\n    sessionStartTime = Date.now();\n  }\n\n  // Save session data when page is about to be closed/refreshed\n  window.addEventListener('beforeunload', function () {\n    if (powerData.length > 0) {\n      saveSessionData();\n    }\n  });\n\n  // Save session data periodically (every 30 seconds as backup)\n  setInterval(() => {\n    if (powerData.length > 0) {\n      saveSessionData();\n    }\n  }, 30000);\n});\n"],"names":["wakeLock","requestWakeLock","navigator","request","addEventListener","err","console","error","name","message","releaseWakeLock","release","createTrackpoint","dataPoint","translations","time","Date","toISOString","heartRate","hr","trim","cadence","cad","power","pw","contents","Object","keys","map","key","undefined","filter","x","join","generateTcxString","powerData","Array","isArray","length","Error","validDataPoints","timestamp","isNaN","getTime","processedData","item","sort","a","b","isEmptyPower","shift","pop","validPowerReadings","d","parseFloat","avgPower","Math","round","reduce","maxPower","max","startTime","duration","endTime","powerAveragesText","powerAverages","averagesList","best","push","activityNotes","exerciseDescription","trackpoints","startTimeISO","text","replace","generateSummaryImage","canvas","document","createElement","ctx","getContext","requiredHeight","values","some","avg","current","heartData","cadenceData","height","width","fillStyle","fillRect","font","textAlign","fillText","now","toLocaleDateString","toLocaleTimeString","sessionStartTime","sessionEnd","yOffset","avgData","label","data","i","xBase","y","row","drawTimelineChart","chartHeight","valueKey","color","unit","strokeStyle","lineWidth","strokeRect","v","minValue","min","maxValue","range","value","labelY","beginPath","firstPoint","point","chartX","chartY","moveTo","lineTo","stroke","floor","arc","PI","fill","gridY","middleTime","SESSION_STORAGE_KEY","SESSION_TIMEOUT","saveSessionData","sessionData","rawPowerMeasurements","powerReadings","lastPowerValue","lastHeartRateValue","lastCadenceValue","localStorage","setItem","JSON","stringify","warn","loadSessionData","savedData","getItem","parse","removeItem","restoreSessionData","assign","updateDisplaysFromRestoredData","powerValueElement","textContent","hrValueElement","cadenceValueElement","updatePowerAveragesDisplay","showSessionRestoredNotification","notification","style","cssText","head","appendChild","body","setTimeout","animation","parentNode","removeChild","clearSessionData","connectButton","getElementById","statusText","deviceNameElement","exportJsonButton","exportCsvButton","exportTcxButton","exportRawJsonButton","exportRawCsvButton","exportImageButton","clearSessionButton","avg10sCurrentElement","avg10sBestElement","avg30sCurrentElement","avg30sBestElement","avg1mCurrentElement","avg1mBestElement","avg2mCurrentElement","avg2mBestElement","avg4mCurrentElement","avg4mBestElement","avg8mCurrentElement","avg8mBestElement","toggleConnectSection","toggleExportSection","connectSection","exportSection","powerAveragesSection","connectToggleText","exportToggleText","hamburgerBtn","menuDropdown","powerAveragesToggle","powerMetricToggle","heartRateMetricToggle","cadenceMetricToggle","connectSectionToggle","exportSectionToggle","loadDebugDataMenuItem","showInfoMenuItem","showQrCodeMenuItem","powerCard","querySelector","heartRateCard","cadenceCard","powerStatusIndicator","hrStatusIndicator","cadenceStatusIndicator","className","classList","contains","remove","add","event","target","closest","powerAveragesVisible","display","manageCollapsedSectionsLayout","powerMetricVisible","heartRateMetricVisible","cadenceMetricVisible","connectSectionVisible","exportSectionVisible","updateDashboardLayout","dashboard","existingRow","sectionsInRow","querySelectorAll","forEach","section","insertBefore","nextSibling","loadDebugData","showAppInfo","showQrCodeModal","connectButtons","sectionHeader","btn","exportButtons","addPowerReading","eightMinutesAgo","reading","calculatePowerAverages","periodKey","periodMs","entries","cutoffTime","relevantReadings","average","sum","total","resetPowerAverages","period","resetAllSessionData","log","basePower","sin","random","baseHR","baseCadence","flags","rawBytes","toString","padStart","dataLength","instantaneousPower","lastData","calculateAllPowerAverages","alert","powerDataPoints","heartDataPoints","cadenceDataPoints","periodStart","periodReadings","averagePower","modal","modalContent","innerHTML","closeButton","closeModal","e","handleEscape","removeEventListener","transform","boxShadow","appUrl","qrCanvas","generateQRCode","qrContainer","size","qrApiUrl","encodeURIComponent","img","Image","crossOrigin","onload","drawImage","onerror","drawFallbackQR","src","cellSize","j","dataLoggerInterval","powerMeterDevice","CYCLING_POWER_SERVICE_UUID","CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID","CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID","CYCLING_CADENCE_SERVICE_UUID","CSC_MEASUREMENT_CHARACTERISTIC_UUID","handlePowerMeasurement","rawMeasurement","getUint16","from","Uint8Array","buffer","byteLength","getInt16","parsePowerMeasurement","onDisconnected","disabled","clearInterval","bluetooth","requestDevice","filters","services","server","gatt","connect","service","getPrimaryService","characteristic","getCharacteristic","featureCharacteristic","readValue","startNotifications","setInterval","blob","Blob","type","url","URL","createObjectURL","href","year","getFullYear","month","String","getMonth","day","getDate","dateString","download","click","revokeObjectURL","csvContent","measurement","tcxContent","toBlob","confirm","hrDataLoggerInterval","hrConnectButton","hrStatusText","hrValue","hrDeviceName","hrBluetoothDevice","handleHeartRateChanged","parseHeartRate","getUint8","onDisconnectedHr","hrServer","hrService","hrCharacteristic","speedCadenceConnectButton","cadenceStatusText","cadenceDeviceName","speedCadenceBluetoothDevice","cadenceResetTimer","clearTimeout","lastCrankRevs","lastCrankTime","onDisconnectedSpeedCadence","handleSpeedCadenceMeasurement","offset","wheelRevsPresent","cumulativeCrankRevolutions","lastCrankEventTime","revs","showRestorationDialog","Promise","resolve","backdrop","sessionAge","dataCount","window"],"version":3,"file":"power-saver.70675eea.js.map"}