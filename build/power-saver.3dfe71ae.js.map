{"mappings":"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","sources":["<anon>","src/script.js","src/pwa-install.js","src/pwa-ui.js","node_modules/@parcel/runtime-js/lib/runtime-6c15c40ce601ea96.js","src/session-data.js","src/power-averaging.js","src/ui-management.js","src/bluetooth-connections.js","src/bluetooth-heart-rate.js","src/heart-rate.js","src/wake-lock.js","src/bluetooth-cycling.js","src/export-modals.js","src/data-export.js","src/create-tcx.js","src/utility-modals.js","src/notifications.js","src/ui-event-handlers.js","src/app-info-modal.js","src/metric-icons.js"],"sourcesContent":["/**\n * Power Saver Main Application\n * Coordinates all modules and manages the application state\n */ // Import all required modules\n/**\n * PWA Installation Handler\n * Manages service worker registration and install prompts\n */ /**\n * PWA UI Components\n * Handles PWA-specific UI elements: install prompt, update banner, offline indicator\n */ /**\n * Create and manage the custom install prompt banner\n */ class $491b63e3dddf3ff3$export$6ffdf4c37f7d930c {\n    constructor(){\n        this.banner = null;\n        this.deferredPrompt = null;\n    }\n    /**\n     * Create the install banner HTML\n     */ createBanner() {\n        const banner = document.createElement('div');\n        banner.id = 'pwaInstallBanner';\n        banner.className = 'pwa-install-banner';\n        banner.innerHTML = `\n            <div class=\"pwa-install-content\">\n                <div class=\"pwa-install-icon\">\\u{26A1}</div>\n                <div class=\"pwa-install-text\">\n                    <strong>Install Power Meter</strong>\n                    <span>Add to home screen for quick access</span>\n                </div>\n                <div class=\"pwa-install-actions\">\n                    <button id=\"pwaInstallButton\" class=\"pwa-btn pwa-btn-primary\">Install</button>\n                    <button id=\"pwaInstallClose\" class=\"pwa-btn pwa-btn-secondary\">\\xd7</button>\n                </div>\n            </div>\n        `;\n        return banner;\n    }\n    /**\n     * Show the install banner\n     */ show(deferredPrompt) {\n        // Don't show if already installed or if user dismissed recently\n        if (this.isInstalled() || this.wasRecentlyDismissed()) return;\n        this.deferredPrompt = deferredPrompt;\n        if (!this.banner) {\n            this.banner = this.createBanner();\n            document.body.appendChild(this.banner);\n            this.attachEventListeners();\n        }\n        // Animate in\n        setTimeout(()=>{\n            this.banner.classList.add('pwa-install-banner-visible');\n        }, 500);\n    }\n    /**\n     * Hide the install banner\n     */ hide() {\n        if (this.banner) {\n            this.banner.classList.remove('pwa-install-banner-visible');\n            setTimeout(()=>{\n                if (this.banner && this.banner.parentNode) {\n                    this.banner.parentNode.removeChild(this.banner);\n                    this.banner = null;\n                }\n            }, 300);\n        }\n    }\n    /**\n     * Attach event listeners to banner buttons\n     */ attachEventListeners() {\n        const installBtn = this.banner.querySelector('#pwaInstallButton');\n        const closeBtn = this.banner.querySelector('#pwaInstallClose');\n        installBtn.addEventListener('click', ()=>this.handleInstallClick());\n        closeBtn.addEventListener('click', ()=>this.handleCloseClick());\n    }\n    /**\n     * Handle install button click\n     */ async handleInstallClick() {\n        if (!this.deferredPrompt) {\n            console.log('[PWA] Install prompt not available');\n            return;\n        }\n        // Show native install prompt\n        this.deferredPrompt.prompt();\n        // Wait for user response\n        const { outcome: outcome } = await this.deferredPrompt.userChoice;\n        console.log(`[PWA] Install prompt outcome: ${outcome}`);\n        // Hide banner regardless of outcome\n        this.hide();\n        // Clear the deferred prompt\n        this.deferredPrompt = null;\n        // Show thank you message if accepted\n        if (outcome === 'accepted') this.showThankYouMessage();\n    }\n    /**\n     * Handle close button click\n     */ handleCloseClick() {\n        this.hide();\n        // Store dismissal timestamp\n        localStorage.setItem('pwaInstallDismissed', Date.now().toString());\n    }\n    /**\n     * Check if user dismissed recently (within 7 days)\n     */ wasRecentlyDismissed() {\n        const dismissed = localStorage.getItem('pwaInstallDismissed');\n        if (!dismissed) return false;\n        const sevenDaysMs = 604800000;\n        return Date.now() - parseInt(dismissed) < sevenDaysMs;\n    }\n    /**\n     * Check if app is installed\n     */ isInstalled() {\n        return window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true;\n    }\n    /**\n     * Show thank you message after installation\n     */ showThankYouMessage() {\n        const message = document.createElement('div');\n        message.className = 'pwa-toast pwa-toast-success';\n        message.innerHTML = `\n            <div class=\"pwa-toast-content\">\n                <span class=\"pwa-toast-icon\">\\u{2713}</span>\n                <span>Thanks for installing! Launch from your home screen.</span>\n            </div>\n        `;\n        document.body.appendChild(message);\n        setTimeout(()=>message.classList.add('pwa-toast-visible'), 100);\n        setTimeout(()=>{\n            message.classList.remove('pwa-toast-visible');\n            setTimeout(()=>message.remove(), 300);\n        }, 4000);\n    }\n}\nclass $491b63e3dddf3ff3$export$bf187d7d6e084fc8 {\n    constructor(){\n        this.banner = null;\n        this.waitingWorker = null;\n    }\n    /**\n     * Create the update banner HTML\n     */ createBanner() {\n        const banner = document.createElement('div');\n        banner.id = 'pwaUpdateBanner';\n        banner.className = 'pwa-update-banner';\n        banner.innerHTML = `\n            <div class=\"pwa-update-content\">\n                <div class=\"pwa-update-icon\">\\u{1F504}</div>\n                <div class=\"pwa-update-text\">\n                    <strong>Update Available</strong>\n                    <span>A new version is ready to install</span>\n                </div>\n                <div class=\"pwa-update-actions\">\n                    <button id=\"pwaUpdateButton\" class=\"pwa-btn pwa-btn-primary\">Update Now</button>\n                    <button id=\"pwaUpdateLater\" class=\"pwa-btn pwa-btn-secondary\">Later</button>\n                </div>\n            </div>\n        `;\n        return banner;\n    }\n    /**\n     * Show the update banner\n     */ show(waitingWorker) {\n        this.waitingWorker = waitingWorker;\n        if (!this.banner) {\n            this.banner = this.createBanner();\n            document.body.appendChild(this.banner);\n            this.attachEventListeners();\n        }\n        // Animate in\n        setTimeout(()=>{\n            this.banner.classList.add('pwa-update-banner-visible');\n        }, 500);\n    }\n    /**\n     * Hide the update banner\n     */ hide() {\n        if (this.banner) {\n            this.banner.classList.remove('pwa-update-banner-visible');\n            setTimeout(()=>{\n                if (this.banner && this.banner.parentNode) {\n                    this.banner.parentNode.removeChild(this.banner);\n                    this.banner = null;\n                }\n            }, 300);\n        }\n    }\n    /**\n     * Attach event listeners to banner buttons\n     */ attachEventListeners() {\n        const updateBtn = this.banner.querySelector('#pwaUpdateButton');\n        const laterBtn = this.banner.querySelector('#pwaUpdateLater');\n        updateBtn.addEventListener('click', ()=>this.handleUpdateClick());\n        laterBtn.addEventListener('click', ()=>this.handleLaterClick());\n    }\n    /**\n     * Handle update button click\n     */ handleUpdateClick() {\n        if (!this.waitingWorker) {\n            console.log('[PWA] No waiting worker to activate');\n            return;\n        }\n        // Tell the service worker to skip waiting\n        this.waitingWorker.postMessage({\n            type: 'SKIP_WAITING'\n        });\n        // Show loading message\n        this.showUpdatingMessage();\n        // Reload the page after a brief delay\n        setTimeout(()=>{\n            window.location.reload();\n        }, 1000);\n    }\n    /**\n     * Handle later button click\n     */ handleLaterClick() {\n        this.hide();\n    }\n    /**\n     * Show updating message\n     */ showUpdatingMessage() {\n        this.hide();\n        const message = document.createElement('div');\n        message.className = 'pwa-toast pwa-toast-info';\n        message.innerHTML = `\n            <div class=\"pwa-toast-content\">\n                <span class=\"pwa-toast-icon\">\\u{1F504}</span>\n                <span>Updating app...</span>\n            </div>\n        `;\n        document.body.appendChild(message);\n        setTimeout(()=>message.classList.add('pwa-toast-visible'), 100);\n    }\n}\nclass $491b63e3dddf3ff3$export$9e9e9b04825e5204 {\n    constructor(){\n        this.indicator = null;\n        this.isOnline = navigator.onLine;\n    }\n    /**\n     * Create the offline indicator HTML\n     */ createIndicator() {\n        const indicator = document.createElement('div');\n        indicator.id = 'pwaOfflineIndicator';\n        indicator.className = 'pwa-offline-indicator';\n        indicator.innerHTML = `\n            <div class=\"pwa-offline-content\">\n                <span class=\"pwa-offline-icon\">\\u{1F4F4}</span>\n                <span class=\"pwa-offline-text\">You're offline</span>\n            </div>\n        `;\n        return indicator;\n    }\n    /**\n     * Initialize the offline indicator\n     */ init() {\n        window.addEventListener('online', ()=>this.handleOnline());\n        window.addEventListener('offline', ()=>this.handleOffline());\n        // Check initial state\n        if (!navigator.onLine) this.handleOffline();\n    }\n    /**\n     * Handle online event\n     */ handleOnline() {\n        this.isOnline = true;\n        console.log('[PWA] Connection restored');\n        this.hide();\n        this.showToast(\"\\u2713\", 'Back online', 'success');\n    }\n    /**\n     * Handle offline event\n     */ handleOffline() {\n        this.isOnline = false;\n        console.log('[PWA] Connection lost');\n        this.show();\n    }\n    /**\n     * Show the offline indicator\n     */ show() {\n        if (!this.indicator) {\n            this.indicator = this.createIndicator();\n            document.body.appendChild(this.indicator);\n        }\n        setTimeout(()=>{\n            this.indicator.classList.add('pwa-offline-indicator-visible');\n        }, 100);\n    }\n    /**\n     * Hide the offline indicator\n     */ hide() {\n        if (this.indicator) {\n            this.indicator.classList.remove('pwa-offline-indicator-visible');\n            setTimeout(()=>{\n                if (this.indicator && this.indicator.parentNode) {\n                    this.indicator.parentNode.removeChild(this.indicator);\n                    this.indicator = null;\n                }\n            }, 300);\n        }\n    }\n    /**\n     * Show a toast notification\n     */ showToast(icon, message, type = 'info') {\n        const toast = document.createElement('div');\n        toast.className = `pwa-toast pwa-toast-${type}`;\n        toast.innerHTML = `\n            <div class=\"pwa-toast-content\">\n                <span class=\"pwa-toast-icon\">${icon}</span>\n                <span>${message}</span>\n            </div>\n        `;\n        document.body.appendChild(toast);\n        setTimeout(()=>toast.classList.add('pwa-toast-visible'), 100);\n        setTimeout(()=>{\n            toast.classList.remove('pwa-toast-visible');\n            setTimeout(()=>toast.remove(), 300);\n        }, 3000);\n    }\n}\nfunction $491b63e3dddf3ff3$export$ce029ec95c96b77d() {\n    // Check if iOS Safari and not installed\n    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\n    const isInStandaloneMode = window.navigator.standalone === true;\n    if (isIOS && !isInStandaloneMode) {\n        // Check if user dismissed recently\n        const dismissed = localStorage.getItem('iosInstallDismissed');\n        if (dismissed) {\n            const threeDaysMs = 259200000;\n            if (Date.now() - parseInt(dismissed) < threeDaysMs) return; // Don't show if dismissed within 3 days\n        }\n        const banner = document.createElement('div');\n        banner.className = 'pwa-ios-instructions';\n        banner.innerHTML = `\n            <div class=\"pwa-ios-content\">\n                <div class=\"pwa-ios-header\">\n                    <span class=\"pwa-ios-icon\">\\u{1F4F1}</span>\n                    <strong>Install Power Meter</strong>\n                    <button class=\"pwa-ios-close\" id=\"pwaIOSClose\">\\xd7</button>\n                </div>\n                <div class=\"pwa-ios-steps\">\n                    <p>Tap <strong>Share</strong> <span style=\"font-size: 1.2em;\">\\u{25A1}\\u{2191}</span> then <strong>Add to Home Screen</strong></p>\n                </div>\n            </div>\n        `;\n        document.body.appendChild(banner);\n        setTimeout(()=>banner.classList.add('pwa-ios-instructions-visible'), 500);\n        // Close button handler\n        const closeBtn = banner.querySelector('#pwaIOSClose');\n        closeBtn.addEventListener('click', ()=>{\n            banner.classList.remove('pwa-ios-instructions-visible');\n            setTimeout(()=>banner.remove(), 300);\n            localStorage.setItem('iosInstallDismissed', Date.now().toString());\n        });\n    }\n}\n\n\nlet $c9a4bb8cb8ea0795$var$deferredPrompt = null;\nlet $c9a4bb8cb8ea0795$var$installPrompt = null;\nlet $c9a4bb8cb8ea0795$var$updateBanner = null;\nlet $c9a4bb8cb8ea0795$var$offlineIndicator = null;\nvar $49d40965a96e1948$exports = {};\n$49d40965a96e1948$exports = import.meta.resolve(\"7qU26\");\n\n\nfunction $c9a4bb8cb8ea0795$export$c6245babf0c60892() {\n    // Skip service worker registration in development mode\n    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' || window.location.port) {\n        console.log('[PWA] Development mode detected - skipping service worker registration');\n        // Unregister any existing service workers in development\n        if ('serviceWorker' in navigator) navigator.serviceWorker.getRegistrations().then((registrations)=>{\n            registrations.forEach((registration)=>{\n                registration.unregister();\n                console.log('[PWA] Unregistered existing service worker for development');\n            });\n        });\n        return;\n    }\n    if ('serviceWorker' in navigator) window.addEventListener('load', async ()=>{\n        try {\n            const registration = await navigator.serviceWorker.register($49d40965a96e1948$exports, {\n                updateViaCache: 'none'\n            });\n            console.log('[PWA] Service Worker registered:', registration.scope);\n            // Check for updates immediately\n            registration.update();\n            // Check for updates periodically (every 5 minutes)\n            setInterval(()=>{\n                console.log('[PWA] Checking for updates...');\n                registration.update();\n            }, 300000); // Check every 5 minutes\n            // Handle updates\n            registration.addEventListener('updatefound', ()=>{\n                const newWorker = registration.installing;\n                console.log('[PWA] Update found, installing new service worker...');\n                newWorker.addEventListener('statechange', ()=>{\n                    if (newWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // New service worker available\n                            console.log('[PWA] New version available');\n                            $c9a4bb8cb8ea0795$var$showUpdateNotification(newWorker);\n                        } else // First time install\n                        console.log('[PWA] Content cached for offline use');\n                    }\n                });\n            });\n            // Listen for controlling service worker change\n            navigator.serviceWorker.addEventListener('controllerchange', ()=>{\n                console.log('[PWA] Controller changed, reloading page...');\n                window.location.reload();\n            });\n        } catch (error) {\n            console.error('[PWA] Service Worker registration failed:', error);\n        }\n    });\n    else console.warn('[PWA] Service Workers are not supported in this browser');\n}\n/**\n * Show update notification and allow user to update\n */ function $c9a4bb8cb8ea0795$var$showUpdateNotification(worker) {\n    console.log('[PWA] Update available. New version can be activated.');\n    // Show the custom update banner\n    if (!$c9a4bb8cb8ea0795$var$updateBanner) $c9a4bb8cb8ea0795$var$updateBanner = new (0, $491b63e3dddf3ff3$export$bf187d7d6e084fc8)();\n    $c9a4bb8cb8ea0795$var$updateBanner.show(worker);\n}\nfunction $c9a4bb8cb8ea0795$export$759be308f8e7684d() {\n    // Initialize install prompt UI\n    if (!$c9a4bb8cb8ea0795$var$installPrompt) $c9a4bb8cb8ea0795$var$installPrompt = new (0, $491b63e3dddf3ff3$export$6ffdf4c37f7d930c)();\n    // Capture the beforeinstallprompt event\n    window.addEventListener('beforeinstallprompt', (e)=>{\n        console.log('[PWA] Install prompt available');\n        // Prevent the mini-infobar from appearing on mobile\n        e.preventDefault();\n        // Store the event so it can be triggered later\n        $c9a4bb8cb8ea0795$var$deferredPrompt = e;\n        // Show custom install banner\n        $c9a4bb8cb8ea0795$var$installPrompt.show(e);\n    });\n    // Handle successful installation\n    window.addEventListener('appinstalled', ()=>{\n        console.log('[PWA] App successfully installed');\n        $c9a4bb8cb8ea0795$var$deferredPrompt = null;\n        if ($c9a4bb8cb8ea0795$var$installPrompt) $c9a4bb8cb8ea0795$var$installPrompt.hide();\n    });\n    // Show iOS-specific instructions\n    setTimeout(()=>{\n        (0, $491b63e3dddf3ff3$export$ce029ec95c96b77d)();\n    }, 2000);\n}\nasync function $c9a4bb8cb8ea0795$export$c93c7c5b40a4887c() {\n    if (!$c9a4bb8cb8ea0795$var$deferredPrompt) {\n        console.log('[PWA] Install prompt not available');\n        return false;\n    }\n    // Show the install prompt\n    $c9a4bb8cb8ea0795$var$deferredPrompt.prompt();\n    // Wait for the user to respond to the prompt\n    const { outcome: outcome } = await $c9a4bb8cb8ea0795$var$deferredPrompt.userChoice;\n    console.log(`[PWA] User response to install prompt: ${outcome}`);\n    // Clear the deferred prompt\n    $c9a4bb8cb8ea0795$var$deferredPrompt = null;\n    return outcome === 'accepted';\n}\nfunction $c9a4bb8cb8ea0795$export$1a7ce0848b9df5ad() {\n    return window.matchMedia('(display-mode: standalone)').matches || window.navigator.standalone === true;\n}\nfunction $c9a4bb8cb8ea0795$export$6e550932cf61c00f() {\n    $c9a4bb8cb8ea0795$export$c6245babf0c60892();\n    $c9a4bb8cb8ea0795$export$759be308f8e7684d();\n    // Initialize offline indicator\n    if (!$c9a4bb8cb8ea0795$var$offlineIndicator) $c9a4bb8cb8ea0795$var$offlineIndicator = new (0, $491b63e3dddf3ff3$export$9e9e9b04825e5204)();\n    $c9a4bb8cb8ea0795$var$offlineIndicator.init();\n    // Log installation status\n    if ($c9a4bb8cb8ea0795$export$1a7ce0848b9df5ad()) console.log('[PWA] Running as installed app');\n    else console.log('[PWA] Running in browser');\n}\n\n\n/**\n * Session Data Persistence Module\n * Manages localStorage operations for session data persistence\n */ // Constants for session management\nconst $cc35ee5c64337d79$var$SESSION_STORAGE_KEY = 'powerMeterSession';\nconst $cc35ee5c64337d79$var$SESSION_TIMEOUT_MS = 86400000; // 24 hours in milliseconds\n/**\n * Save current session data to localStorage\n * @param {Object} dataStore - Object containing all session data\n */ function $cc35ee5c64337d79$export$3b97cfd23e0d13d8(dataStore) {\n    try {\n        const sessionData = {\n            timestamp: Date.now(),\n            powerData: dataStore.powerData,\n            lastPowerValue: dataStore.lastPowerValue,\n            lastHeartRateValue: dataStore.lastHeartRateValue,\n            lastCadenceValue: dataStore.lastCadenceValue,\n            sessionStartTime: dataStore.sessionStartTime\n        };\n        localStorage.setItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n    } catch (error) {\n        console.warn('Failed to save session data:', error);\n    }\n}\n/**\n * Validate session data object\n * @param {Object} sessionData - Session data to validate\n * @returns {boolean} True if valid\n */ function $cc35ee5c64337d79$var$validateSessionData(sessionData) {\n    if (!sessionData || typeof sessionData !== 'object') return false;\n    // Check required properties\n    if (!sessionData.timestamp || !sessionData.powerData) return false;\n    // Validate powerData is an array\n    if (!Array.isArray(sessionData.powerData)) return false;\n    return true;\n}\n/**\n * Load session data from localStorage if available and recent\n * @returns {Object|null} Session data object if available and valid, null otherwise\n */ function $cc35ee5c64337d79$export$5ae208508f6870b() {\n    try {\n        const savedData = localStorage.getItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY);\n        if (!savedData) return null;\n        const sessionData = JSON.parse(savedData);\n        // Validate session data structure\n        if (!$cc35ee5c64337d79$var$validateSessionData(sessionData)) {\n            console.warn('Invalid session data structure, clearing...');\n            localStorage.removeItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY);\n            return null;\n        }\n        const now = Date.now();\n        const sessionAge = now - sessionData.timestamp;\n        // Check if session has expired (older than 24 hours)\n        if (sessionAge > $cc35ee5c64337d79$var$SESSION_TIMEOUT_MS) {\n            console.log('Session expired, clearing...');\n            localStorage.removeItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY);\n            return null;\n        }\n        return sessionData;\n    } catch (error) {\n        console.warn('Failed to load session data:', error);\n        localStorage.removeItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY);\n        return null;\n    }\n}\n/**\n * Clear session data from localStorage\n */ function $cc35ee5c64337d79$export$37b6cafab9b29f47() {\n    localStorage.removeItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY);\n}\n\n\n// Constants for time periods\nconst $d8d8e1ee9f4f63bb$var$TIME_PERIODS_MS = {\n    '10s': 10000,\n    '20s': 20000,\n    '30s': 30000,\n    '40s': 40000,\n    '50s': 50000,\n    '1m': 60000,\n    '2m': 120000,\n    '3m': 180000,\n    '4m': 240000,\n    '5m': 300000\n};\n// Timestamp of last power reading\nlet $d8d8e1ee9f4f63bb$var$lastPowerTimestamp = Date.now();\n// Power averaging data structures\nlet $d8d8e1ee9f4f63bb$var$powerAverages = {\n    '10s': {\n        current: 0,\n        best: 0\n    },\n    '20s': {\n        current: 0,\n        best: 0\n    },\n    '30s': {\n        current: 0,\n        best: 0\n    },\n    '40s': {\n        current: 0,\n        best: 0\n    },\n    '50s': {\n        current: 0,\n        best: 0\n    },\n    '1m': {\n        current: 0,\n        best: 0\n    },\n    '2m': {\n        current: 0,\n        best: 0\n    },\n    '3m': {\n        current: 0,\n        best: 0\n    },\n    '4m': {\n        current: 0,\n        best: 0\n    },\n    '5m': {\n        current: 0,\n        best: 0\n    }\n};\n// DOM elements for power averages display\nlet $d8d8e1ee9f4f63bb$var$avg10sCurrentElement, $d8d8e1ee9f4f63bb$var$avg10sBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg20sCurrentElement, $d8d8e1ee9f4f63bb$var$avg20sBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg30sCurrentElement, $d8d8e1ee9f4f63bb$var$avg30sBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg40sCurrentElement, $d8d8e1ee9f4f63bb$var$avg40sBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg50sCurrentElement, $d8d8e1ee9f4f63bb$var$avg50sBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg1mCurrentElement, $d8d8e1ee9f4f63bb$var$avg1mBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg2mCurrentElement, $d8d8e1ee9f4f63bb$var$avg2mBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg3mCurrentElement, $d8d8e1ee9f4f63bb$var$avg3mBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg4mCurrentElement, $d8d8e1ee9f4f63bb$var$avg4mBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg5mCurrentElement, $d8d8e1ee9f4f63bb$var$avg5mBestElement;\nfunction $d8d8e1ee9f4f63bb$export$38b6955d4a0211f4() {\n    // Get DOM elements\n    $d8d8e1ee9f4f63bb$var$avg10sCurrentElement = document.getElementById('avg10s-current');\n    $d8d8e1ee9f4f63bb$var$avg10sBestElement = document.getElementById('avg10s-best');\n    $d8d8e1ee9f4f63bb$var$avg20sCurrentElement = document.getElementById('avg20s-current');\n    $d8d8e1ee9f4f63bb$var$avg20sBestElement = document.getElementById('avg20s-best');\n    $d8d8e1ee9f4f63bb$var$avg30sCurrentElement = document.getElementById('avg30s-current');\n    $d8d8e1ee9f4f63bb$var$avg30sBestElement = document.getElementById('avg30s-best');\n    $d8d8e1ee9f4f63bb$var$avg40sCurrentElement = document.getElementById('avg40s-current');\n    $d8d8e1ee9f4f63bb$var$avg40sBestElement = document.getElementById('avg40s-best');\n    $d8d8e1ee9f4f63bb$var$avg50sCurrentElement = document.getElementById('avg50s-current');\n    $d8d8e1ee9f4f63bb$var$avg50sBestElement = document.getElementById('avg50s-best');\n    $d8d8e1ee9f4f63bb$var$avg1mCurrentElement = document.getElementById('avg1m-current');\n    $d8d8e1ee9f4f63bb$var$avg1mBestElement = document.getElementById('avg1m-best');\n    $d8d8e1ee9f4f63bb$var$avg2mCurrentElement = document.getElementById('avg2m-current');\n    $d8d8e1ee9f4f63bb$var$avg2mBestElement = document.getElementById('avg2m-best');\n    $d8d8e1ee9f4f63bb$var$avg3mCurrentElement = document.getElementById('avg3m-current');\n    $d8d8e1ee9f4f63bb$var$avg3mBestElement = document.getElementById('avg3m-best');\n    $d8d8e1ee9f4f63bb$var$avg4mCurrentElement = document.getElementById('avg4m-current');\n    $d8d8e1ee9f4f63bb$var$avg4mBestElement = document.getElementById('avg4m-best');\n    $d8d8e1ee9f4f63bb$var$avg5mCurrentElement = document.getElementById('avg5m-current');\n    $d8d8e1ee9f4f63bb$var$avg5mBestElement = document.getElementById('avg5m-best');\n}\nfunction $d8d8e1ee9f4f63bb$export$3f67e616c0b42d09(power) {\n    // Validate input\n    if (typeof power !== 'number' || isNaN(power)) return;\n    if (power > 3000 || power < 0) return;\n    // update power averages\n    const now = Date.now();\n    const timeDelta = now - $d8d8e1ee9f4f63bb$var$lastPowerTimestamp;\n    $d8d8e1ee9f4f63bb$var$lastPowerTimestamp = now;\n    for (const [periodKey, periodMs] of Object.entries($d8d8e1ee9f4f63bb$var$TIME_PERIODS_MS)){\n        const currentAvg = $d8d8e1ee9f4f63bb$var$powerAverages[periodKey].current || 0;\n        const nextAvg = Math.round((currentAvg * (periodMs - timeDelta) + power * timeDelta) / periodMs);\n        $d8d8e1ee9f4f63bb$var$powerAverages[periodKey].current = nextAvg;\n        // Update best if current is better\n        if (nextAvg > $d8d8e1ee9f4f63bb$var$powerAverages[periodKey].best) $d8d8e1ee9f4f63bb$var$powerAverages[periodKey].best = nextAvg;\n    }\n    // Update the display after calculating new averages\n    $d8d8e1ee9f4f63bb$export$890cc05f11700e2c();\n}\nfunction $d8d8e1ee9f4f63bb$export$890cc05f11700e2c() {\n    if (!$d8d8e1ee9f4f63bb$var$avg10sCurrentElement) return; // Elements not initialized\n    try {\n        $d8d8e1ee9f4f63bb$var$avg10sCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['10s'].current || '--';\n        $d8d8e1ee9f4f63bb$var$avg10sBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['10s'].best || '--';\n        $d8d8e1ee9f4f63bb$var$avg20sCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['20s'].current || '--';\n        $d8d8e1ee9f4f63bb$var$avg20sBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['20s'].best || '--';\n        $d8d8e1ee9f4f63bb$var$avg30sCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['30s'].current || '--';\n        $d8d8e1ee9f4f63bb$var$avg30sBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['30s'].best || '--';\n        $d8d8e1ee9f4f63bb$var$avg40sCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['40s'].current || '--';\n        $d8d8e1ee9f4f63bb$var$avg40sBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['40s'].best || '--';\n        $d8d8e1ee9f4f63bb$var$avg50sCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['50s'].current || '--';\n        $d8d8e1ee9f4f63bb$var$avg50sBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['50s'].best || '--';\n        $d8d8e1ee9f4f63bb$var$avg1mCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['1m'].current || '--';\n        $d8d8e1ee9f4f63bb$var$avg1mBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['1m'].best || '--';\n        $d8d8e1ee9f4f63bb$var$avg2mCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['2m'].current || '--';\n        $d8d8e1ee9f4f63bb$var$avg2mBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['2m'].best || '--';\n        $d8d8e1ee9f4f63bb$var$avg3mCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['3m'].current || '--';\n        $d8d8e1ee9f4f63bb$var$avg3mBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['3m'].best || '--';\n        $d8d8e1ee9f4f63bb$var$avg4mCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['4m'].current || '--';\n        $d8d8e1ee9f4f63bb$var$avg4mBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['4m'].best || '--';\n        $d8d8e1ee9f4f63bb$var$avg5mCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['5m'].current || '--';\n        $d8d8e1ee9f4f63bb$var$avg5mBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['5m'].best || '--';\n    } catch (error) {\n        console.error('Error updating power averages display:', error.message);\n    }\n}\nfunction $d8d8e1ee9f4f63bb$export$153010588d52d05c() {\n    for (const period of Object.keys($d8d8e1ee9f4f63bb$var$powerAverages)){\n        $d8d8e1ee9f4f63bb$var$powerAverages[period].current = 0;\n        $d8d8e1ee9f4f63bb$var$powerAverages[period].best = 0;\n    }\n    $d8d8e1ee9f4f63bb$export$890cc05f11700e2c();\n}\n\n\n/**\n * UI Management Module\n * Handles DOM element references, event listeners, and UI state management\n */ // DOM element references\nconst $26bf0f38c1315f82$export$7a5d735b2ab6389d = {\n    // Main metric displays\n    powerValueElement: null,\n    hrValueElement: null,\n    cadenceValueElement: null,\n    // Device info displays\n    deviceNameElement: null,\n    cadenceDeviceName: null,\n    // Status displays\n    statusText: null,\n    hrStatusText: null,\n    cadenceStatusText: null,\n    hrConnectionStatus: null,\n    cadenceConnectionStatus: null,\n    // Buttons\n    powerMeterConnectButton: null,\n    hrConnectButton: null,\n    speedCadenceConnectButton: null,\n    // Toggle elements\n    powerAveragesSection: null,\n    // Hamburger menu elements\n    hamburgerBtn: null,\n    menuDropdown: null,\n    showInfoMenuItem: null\n};\nfunction $26bf0f38c1315f82$export$a57455d21a15702b() {\n    // Main metric displays\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement = document.getElementById('power-value');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrValueElement = document.getElementById('hr-value');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceValueElement = document.getElementById('cadence-value');\n    // Device info displays\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.deviceNameElement = document.getElementById('device-name');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceDeviceName = document.getElementById('cadenceDeviceName');\n    // Status displays\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.statusText = document.getElementById('status');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrStatusText = document.getElementById('hrStatus');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceStatusText = document.getElementById('cadenceStatus');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectionStatus = document.getElementById('hrConnectionStatus');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceConnectionStatus = document.getElementById('cadenceConnectionStatus');\n    // Buttons\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerMeterConnectButton = document.getElementById('connectButton');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectButton = document.getElementById('hrConnectButton');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\n    // Toggle elements\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerAveragesSection = document.getElementById('powerAveragesSection');\n    // Hamburger menu elements\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hamburgerBtn = document.getElementById('hamburgerButton');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.menuDropdown = document.getElementById('menuDropdown');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.showInfoMenuItem = document.getElementById('showInfoMenuItem');\n    // Initialize connection status to disconnected state\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectionStatus) $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectionStatus.textContent = 'Disconnected';\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceConnectionStatus) $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceConnectionStatus.textContent = 'Disconnected';\n}\nfunction $26bf0f38c1315f82$export$38408f60e368349d(value) {\n    if (!$26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement) return;\n    const displayValue = value || '--';\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement.textContent = displayValue;\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement.setAttribute('data-value', displayValue);\n}\nfunction $26bf0f38c1315f82$export$3c5e864d031b110c(values) {\n    if (values.power !== undefined && $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement) $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement.textContent = values.power || '--';\n    if (values.heartRate !== undefined && $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrValueElement) $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrValueElement.textContent = values.heartRate || '--';\n    if (values.cadence !== undefined && $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceValueElement) $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceValueElement.textContent = values.cadence || '--';\n}\nfunction $26bf0f38c1315f82$export$d9870def68db0ffb() {\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement) $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement.textContent = '--';\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.hrValueElement) $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrValueElement.textContent = '--';\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceValueElement) $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceValueElement.textContent = '--';\n}\nfunction $26bf0f38c1315f82$export$4d13f4433b58a96(connectionStates) {\n    // Update power meter connect button state\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.powerMeterConnectButton) $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerMeterConnectButton.setAttribute('data-connected', connectionStates.powerMeter ? 'true' : 'false');\n    // Update heart rate connect button state\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectButton) $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectButton.setAttribute('data-connected', connectionStates.heartRate ? 'true' : 'false');\n    // Update speed/cadence connect button state\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.speedCadenceConnectButton) $26bf0f38c1315f82$export$7a5d735b2ab6389d.speedCadenceConnectButton.setAttribute('data-connected', connectionStates.speedCadence ? 'true' : 'false');\n    // Update power averages section visibility based on power meter connection\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.powerAveragesSection) $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerAveragesSection.setAttribute('data-connected', connectionStates.powerMeter ? 'true' : 'false');\n}\nfunction $26bf0f38c1315f82$export$c17ef08f48962999(button, isConnecting) {\n    if (button) button.setAttribute('data-connecting', isConnecting ? 'true' : 'false');\n}\nfunction $26bf0f38c1315f82$export$b5051178064abb72() {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n}\n\n\n/**\n * Bluetooth Connection Orchestration Module\n * Coordinates Bluetooth connections for all sensor types\n */ /**\n * Bluetooth Heart Rate Monitor Module\n * Handles Bluetooth connections for heart rate monitors\n */ /**\n * Parse heart rate measurement from Bluetooth characteristic value\n * \n * The heart rate measurement is a DataView object following the Bluetooth\n * Heart Rate Measurement characteristic format (org.bluetooth.characteristic.heart_rate_measurement).\n * \n * Format:\n * - Byte 0: Flags (bit 0 indicates value format)\n * - Byte 1+: Heart rate value (UINT8 or UINT16 based on flags)\n * \n * @param {DataView} value - The Bluetooth characteristic value\n * @returns {number} Heart rate in beats per minute (BPM)\n * @throws {Error} If the value is invalid or malformed\n */ function $1e429c7e804734cb$export$c0b45cad129009bc(value) {\n    // Bluetooth Heart Rate Format Constants\n    const HR_VALUE_FORMAT_FLAG = 0x01; // Bit 0: Heart Rate Value Format (0 = UINT8, 1 = UINT16)\n    const HR_FLAGS_OFFSET = 0;\n    const HR_VALUE_OFFSET = 1;\n    // Validate input\n    if (!value || !(value instanceof DataView)) throw new Error('Invalid heart rate data: value must be a DataView');\n    // Need at least 2 bytes (flags + value)\n    if (value.byteLength < 2) throw new Error(`Invalid heart rate data: insufficient data (${value.byteLength} bytes)`);\n    const flags = value.getUint8(HR_FLAGS_OFFSET);\n    const isUint16Format = (flags & HR_VALUE_FORMAT_FLAG) !== 0;\n    // Need at least 3 bytes for 16-bit format (flags + 2-byte value)\n    if (isUint16Format && value.byteLength < 3) throw new Error(`Invalid heart rate data: insufficient data for UINT16 format (${value.byteLength} bytes)`);\n    const heartRate = isUint16Format ? value.getUint16(HR_VALUE_OFFSET, /* littleEndian= */ true) : value.getUint8(HR_VALUE_OFFSET);\n    if (typeof heartRate !== 'number' || heartRate < 0 || heartRate > 300) throw new Error(`Invalid heart rate value: ${heartRate}`);\n    return heartRate;\n}\n\n\n/**\n * Screen Wake Lock Management Module\n * Handles requesting and releasing screen wake locks to prevent device sleep during sessions\n */ let $ee8dba17fe5eb4b4$var$wakeLock = null;\nasync function $ee8dba17fe5eb4b4$export$1d0d101be0e1eace() {\n    // Check if Wake Lock API is supported\n    if (!('wakeLock' in navigator)) {\n        console.warn('Wake Lock API is not supported in this browser');\n        return false;\n    }\n    try {\n        $ee8dba17fe5eb4b4$var$wakeLock = await navigator.wakeLock.request('screen');\n        $ee8dba17fe5eb4b4$var$wakeLock.addEventListener('release', ()=>{\n            console.log('Screen wake lock was released');\n        });\n        console.log('Screen wake lock acquired');\n        return true;\n    } catch (error) {\n        console.error('Failed to acquire wake lock:', error.name, error.message);\n        return false;\n    }\n}\nasync function $ee8dba17fe5eb4b4$export$59fac9bdf8c1da6a() {\n    if ($ee8dba17fe5eb4b4$var$wakeLock !== null) try {\n        await $ee8dba17fe5eb4b4$var$wakeLock.release();\n        $ee8dba17fe5eb4b4$var$wakeLock = null;\n        console.log('Screen wake lock released');\n        return true;\n    } catch (error) {\n        console.error('Failed to release wake lock:', error.name, error.message);\n        return false;\n    }\n    return false;\n}\nfunction $ee8dba17fe5eb4b4$export$9db35d3a32ab0a16() {\n    return $ee8dba17fe5eb4b4$var$wakeLock !== null;\n}\n\n\n// Device connection state\nlet $fe739546a31d388a$var$hrBluetoothDevice = null;\nlet $fe739546a31d388a$var$hrDisconnectHandler = null;\nlet $fe739546a31d388a$var$reconnectionAttempts = 0;\nconst $fe739546a31d388a$var$MAX_RECONNECTION_ATTEMPTS = 3;\nlet $fe739546a31d388a$var$reconnectionTimeout = null;\n// Store characteristics for proper cleanup and persistent connections\nlet $fe739546a31d388a$var$hrCharacteristic = null;\nlet $fe739546a31d388a$var$hrCharacteristicHandler = null;\nasync function $fe739546a31d388a$export$830e9b592dbab083(callbacks, elements) {\n    // Stop any ongoing reconnection attempts before starting a new manual connection\n    if ($fe739546a31d388a$var$reconnectionTimeout) {\n        clearTimeout($fe739546a31d388a$var$reconnectionTimeout);\n        $fe739546a31d388a$var$reconnectionTimeout = null;\n        console.log('[HR] Canceled automatic reconnection due to new connection attempt.');\n    }\n    $fe739546a31d388a$var$reconnectionAttempts = 0; // Reset counter\n    await (0, $ee8dba17fe5eb4b4$export$1d0d101be0e1eace)();\n    console.log('[HR] Connect heart rate monitor requested');\n    if (!navigator.bluetooth) {\n        const message = 'Web Bluetooth API is not available.';\n        console.error('[HR]', message);\n        callbacks.onStatusUpdate(message);\n        return false;\n    }\n    try {\n        callbacks.onStatusUpdate('Scanning for devices...');\n        if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Scanning...';\n        // Clean up any existing connection before creating a new one\n        if ($fe739546a31d388a$var$hrBluetoothDevice) {\n            callbacks.onStatusUpdate('Cleaning up previous connection...');\n            // Clean up characteristic handler\n            if ($fe739546a31d388a$var$hrCharacteristic && $fe739546a31d388a$var$hrCharacteristicHandler) {\n                try {\n                    $fe739546a31d388a$var$hrCharacteristic.removeEventListener('characteristicvaluechanged', $fe739546a31d388a$var$hrCharacteristicHandler);\n                } catch (e) {\n                    console.warn('[HR] Error removing HR characteristic listener:', e);\n                }\n                $fe739546a31d388a$var$hrCharacteristicHandler = null;\n                $fe739546a31d388a$var$hrCharacteristic = null;\n            }\n            if ($fe739546a31d388a$var$hrDisconnectHandler) {\n                $fe739546a31d388a$var$hrBluetoothDevice.removeEventListener('gattserverdisconnected', $fe739546a31d388a$var$hrDisconnectHandler);\n                $fe739546a31d388a$var$hrDisconnectHandler = null;\n            }\n            if ($fe739546a31d388a$var$hrBluetoothDevice.gatt.connected) $fe739546a31d388a$var$hrBluetoothDevice.gatt.disconnect();\n            $fe739546a31d388a$var$hrBluetoothDevice = null;\n        }\n        // Show device selection with name prefix filter to help distinguish devices\n        // This allows users to see device names in the selection dialog\n        callbacks.onStatusUpdate('Opening device picker...');\n        // CRITICAL: requestDevice must be called directly in user gesture context on mobile\n        // Cannot be deferred or wrapped in Promise on mobile browsers\n        $fe739546a31d388a$var$hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        'heart_rate'\n                    ]\n                }\n            ],\n            optionalServices: [\n                'device_information',\n                'battery_service'\n            ] // Get additional info if available\n        });\n        // Validate that we got a device\n        if (!$fe739546a31d388a$var$hrBluetoothDevice) throw new Error('No device selected');\n        const deviceName = $fe739546a31d388a$var$hrBluetoothDevice.name || 'Unknown';\n        callbacks.onStatusUpdate(`Device selected: ${deviceName}`);\n        console.log('[HR] Device selected:', deviceName);\n        // Mobile compatibility: Ensure we're still in a valid execution context\n        // Some mobile browsers are strict about timing after user gesture\n        await $fe739546a31d388a$var$connectToHRDevice($fe739546a31d388a$var$hrBluetoothDevice, callbacks, elements);\n        return true;\n    } catch (error) {\n        // Handle user cancellation separately from actual errors\n        if (error.name === 'NotFoundError') {\n            const message = 'No device selected.';\n            console.log('[HR]', message);\n            callbacks.onStatusUpdate(message);\n            if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Disconnected';\n        } else if (error.name === 'NetworkError') {\n            // Network errors are common on mobile when Bluetooth is off or device out of range\n            const message = 'Connection failed. Check Bluetooth is enabled and device is nearby.';\n            console.error('[HR] Network error (mobile Bluetooth issue):', error);\n            callbacks.onStatusUpdate(message);\n            if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Connection Failed';\n        } else if (error.name === 'NotSupportedError') {\n            // Mobile browser may not support all Bluetooth features\n            const message = 'Heart rate monitor not supported on this device.';\n            console.error('[HR] Not supported error:', error);\n            callbacks.onStatusUpdate(message);\n            if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Not Supported';\n        } else if (error.name === 'SecurityError') {\n            // Security errors can happen if not in secure context or user gesture missing\n            const message = 'Connection blocked. Ensure HTTPS and try again.';\n            console.error('[HR] Security error (HTTPS or user gesture required):', error);\n            callbacks.onStatusUpdate(message);\n            if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Security Error';\n        } else {\n            const message = `Error: ${error.message}`;\n            console.error('[HR] Connection failed:', error);\n            callbacks.onStatusUpdate(message);\n            if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Connection Failed';\n        }\n        // Clean up on error\n        if ($fe739546a31d388a$var$hrCharacteristic && $fe739546a31d388a$var$hrCharacteristicHandler) {\n            try {\n                $fe739546a31d388a$var$hrCharacteristic.removeEventListener('characteristicvaluechanged', $fe739546a31d388a$var$hrCharacteristicHandler);\n            } catch  {\n            // Ignore cleanup errors\n            }\n            $fe739546a31d388a$var$hrCharacteristicHandler = null;\n            $fe739546a31d388a$var$hrCharacteristic = null;\n        }\n        if ($fe739546a31d388a$var$hrBluetoothDevice && $fe739546a31d388a$var$hrDisconnectHandler) {\n            $fe739546a31d388a$var$hrBluetoothDevice.removeEventListener('gattserverdisconnected', $fe739546a31d388a$var$hrDisconnectHandler);\n            $fe739546a31d388a$var$hrDisconnectHandler = null;\n        }\n        $fe739546a31d388a$var$hrBluetoothDevice = null;\n        return false;\n    }\n}\n/**\n * Connect to HR device with enhanced device information\n * @param {BluetoothDevice} device - The Bluetooth device to connect to\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */ async function $fe739546a31d388a$var$connectToHRDevice(device, callbacks, elements) {\n    const deviceName = device.name || 'Unknown Device';\n    callbacks.onStatusUpdate(`Connecting to ${deviceName}...`);\n    console.log('[HR] Starting connection to:', deviceName);\n    // Add disconnect listener BEFORE connecting\n    // CRITICAL: Use async function to prevent blocking on mobile\n    $fe739546a31d388a$var$hrDisconnectHandler = async ()=>{\n        // Add small delay to allow GATT state to settle on mobile\n        await new Promise((resolve)=>setTimeout(resolve, 100));\n        $fe739546a31d388a$var$onHeartRateDisconnected(callbacks, elements);\n    };\n    device.addEventListener('gattserverdisconnected', $fe739546a31d388a$var$hrDisconnectHandler);\n    try {\n        // Validate device is not already connected (mobile compatibility)\n        if (device.gatt.connected) {\n            callbacks.onStatusUpdate('Resetting existing connection...');\n            device.gatt.disconnect();\n            // Wait for disconnect to complete on mobile\n            await new Promise((resolve)=>setTimeout(resolve, 200));\n        }\n        // Connect to GATT server\n        callbacks.onStatusUpdate('Establishing GATT connection...');\n        const hrServer = await device.gatt.connect();\n        // Validate connection was successful (mobile compatibility check)\n        if (!hrServer || !device.gatt.connected) throw new Error('GATT server connection failed - device not connected');\n        // CRITICAL: Mobile devices need a small delay after GATT connection\n        // before accessing services to allow the connection to fully stabilize\n        await new Promise((resolve)=>setTimeout(resolve, 300));\n        callbacks.onStatusUpdate('Getting heart rate service...');\n        // Add timeout for service discovery (mobile can hang here)\n        const hrService = await Promise.race([\n            hrServer.getPrimaryService('heart_rate'),\n            new Promise((_, reject)=>setTimeout(()=>reject(new Error('Service discovery timeout - device may be out of range')), 10000))\n        ]);\n        // Small delay before getting characteristic (mobile compatibility)\n        await new Promise((resolve)=>setTimeout(resolve, 200));\n        callbacks.onStatusUpdate('Configuring notifications...');\n        // Add timeout for characteristic discovery\n        $fe739546a31d388a$var$hrCharacteristic = await Promise.race([\n            hrService.getCharacteristic('heart_rate_measurement'),\n            new Promise((_, reject)=>setTimeout(()=>reject(new Error('Characteristic discovery timeout')), 10000))\n        ]);\n        // Clean up any existing handler before adding a new one\n        if ($fe739546a31d388a$var$hrCharacteristicHandler) try {\n            $fe739546a31d388a$var$hrCharacteristic.removeEventListener('characteristicvaluechanged', $fe739546a31d388a$var$hrCharacteristicHandler);\n        } catch (e) {\n            console.warn('[HR] Error removing old characteristic listener:', e);\n        }\n        // Start notifications to receive heart rate data\n        callbacks.onStatusUpdate('Starting heart rate notifications...');\n        // Add timeout for startNotifications (can hang on mobile)\n        await Promise.race([\n            $fe739546a31d388a$var$hrCharacteristic.startNotifications(),\n            new Promise((_, reject)=>setTimeout(()=>reject(new Error('Notification start timeout - try reconnecting')), 10000))\n        ]);\n        // Validate notifications started successfully (mobile compatibility)\n        if (!$fe739546a31d388a$var$hrCharacteristic || !$fe739546a31d388a$var$hrCharacteristic.value) callbacks.onStatusUpdate('Waiting for heart rate data...');\n        // Store the handler reference for proper cleanup\n        $fe739546a31d388a$var$hrCharacteristicHandler = (event)=>{\n            $fe739546a31d388a$var$handleHeartRateChanged(event, callbacks);\n        };\n        $fe739546a31d388a$var$hrCharacteristic.addEventListener('characteristicvaluechanged', $fe739546a31d388a$var$hrCharacteristicHandler);\n        console.log('[HR] Connection complete!');\n        callbacks.onStatusUpdate(`Connected to ${deviceName}!`);\n        if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Connected';\n        // Reset reconnection attempts on successful connection\n        $fe739546a31d388a$var$reconnectionAttempts = 0;\n    } catch (error) {\n        console.error('[HR] Connection error:', error);\n        // Provide specific error messages for common mobile issues\n        if (error.message && error.message.includes('timeout')) {\n            const msg = error.message;\n            callbacks.onStatusUpdate(msg);\n            console.error('[HR] Timeout - device may be out of range or connection is slow');\n        } else if (error.message && error.message.includes('GATT')) {\n            const msg = 'GATT connection failed (check device is on and nearby)';\n            callbacks.onStatusUpdate(msg);\n            console.error('[HR] GATT connection issue - common on mobile devices');\n        } else callbacks.onStatusUpdate(`Connection failed: ${error.message}`);\n        // Clean up characteristic handler on connection failure\n        if ($fe739546a31d388a$var$hrCharacteristic && $fe739546a31d388a$var$hrCharacteristicHandler) {\n            try {\n                $fe739546a31d388a$var$hrCharacteristic.removeEventListener('characteristicvaluechanged', $fe739546a31d388a$var$hrCharacteristicHandler);\n            } catch  {\n            // Ignore cleanup errors\n            }\n            $fe739546a31d388a$var$hrCharacteristicHandler = null;\n            $fe739546a31d388a$var$hrCharacteristic = null;\n        }\n        // Clean up event listener on connection failure\n        device.removeEventListener('gattserverdisconnected', $fe739546a31d388a$var$hrDisconnectHandler);\n        $fe739546a31d388a$var$hrDisconnectHandler = null;\n        throw error; // Re-throw to be caught by parent function\n    }\n}\nfunction $fe739546a31d388a$export$e8a0920d368e1227() {\n    // Enhanced check for mobile compatibility - verify both device and GATT state\n    return $fe739546a31d388a$var$hrBluetoothDevice && $fe739546a31d388a$var$hrBluetoothDevice.gatt && $fe739546a31d388a$var$hrBluetoothDevice.gatt.connected === true;\n}\nfunction $fe739546a31d388a$export$93b781bfb49be82f() {\n    // Stop any pending reconnection attempts\n    if ($fe739546a31d388a$var$reconnectionTimeout) {\n        clearTimeout($fe739546a31d388a$var$reconnectionTimeout);\n        $fe739546a31d388a$var$reconnectionTimeout = null;\n        console.log('[HR] Canceled automatic reconnection due to manual disconnect.');\n    }\n    $fe739546a31d388a$var$reconnectionAttempts = 0;\n    // Enhanced disconnect for mobile compatibility\n    if ($fe739546a31d388a$var$hrBluetoothDevice) {\n        // Clean up characteristic listener first\n        if ($fe739546a31d388a$var$hrCharacteristic && $fe739546a31d388a$var$hrCharacteristicHandler) try {\n            $fe739546a31d388a$var$hrCharacteristic.removeEventListener('characteristicvaluechanged', $fe739546a31d388a$var$hrCharacteristicHandler);\n            $fe739546a31d388a$var$hrCharacteristicHandler = null;\n        } catch (e) {\n            console.warn('[HR] Error cleaning up characteristic listener:', e);\n        }\n        // Stop notifications if possible\n        if ($fe739546a31d388a$var$hrCharacteristic && $fe739546a31d388a$var$hrBluetoothDevice.gatt && $fe739546a31d388a$var$hrBluetoothDevice.gatt.connected) try {\n            $fe739546a31d388a$var$hrCharacteristic.stopNotifications().catch(()=>{\n            // Ignore stopNotifications errors\n            });\n        } catch (e) {\n            console.warn('[HR] Error stopping notifications:', e);\n        }\n        $fe739546a31d388a$var$hrCharacteristic = null;\n        // Remove disconnect handler to prevent automatic reconnection\n        if ($fe739546a31d388a$var$hrDisconnectHandler) try {\n            $fe739546a31d388a$var$hrBluetoothDevice.removeEventListener('gattserverdisconnected', $fe739546a31d388a$var$hrDisconnectHandler);\n            $fe739546a31d388a$var$hrDisconnectHandler = null;\n        } catch (e) {\n            console.warn('[HR] Error removing disconnect handler:', e);\n        }\n        // Disconnect GATT\n        if ($fe739546a31d388a$var$hrBluetoothDevice.gatt && $fe739546a31d388a$var$hrBluetoothDevice.gatt.connected) try {\n            $fe739546a31d388a$var$hrBluetoothDevice.gatt.disconnect();\n        } catch (e) {\n            console.warn('[HR] Error disconnecting GATT:', e);\n        }\n        // Reset the device reference\n        $fe739546a31d388a$var$hrBluetoothDevice = null;\n    }\n}\n/**\n * Handle heart rate measurement data\n * @param {Event} event - The characteristic value changed event\n * @param {Object} callbacks - Object containing callback functions\n */ function $fe739546a31d388a$var$handleHeartRateChanged(event, callbacks) {\n    try {\n        const value = event.target.value;\n        const heartRate = (0, $1e429c7e804734cb$export$c0b45cad129009bc)(value);\n        // Validate the heart rate is a reasonable number\n        if (isNaN(heartRate) || heartRate < 0) {\n            console.error('Invalid heart rate value:', heartRate);\n            return;\n        }\n        callbacks.onHeartRateChange(heartRate);\n    } catch (error) {\n        console.error('Error parsing heart rate data:', error.message);\n    // Don't update the UI with invalid data, just log the error\n    }\n}\n/**\n * Handle heart rate monitor disconnection\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */ async function $fe739546a31d388a$var$onHeartRateDisconnected(callbacks, elements) {\n    console.log('[HR] Device disconnected event triggered');\n    callbacks.onStatusUpdate('Heart rate monitor disconnected.');\n    if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Disconnected';\n    const wasConnected = $fe739546a31d388a$var$hrBluetoothDevice !== null;\n    // Clean up characteristic handler\n    if ($fe739546a31d388a$var$hrCharacteristic && $fe739546a31d388a$var$hrCharacteristicHandler) {\n        try {\n            $fe739546a31d388a$var$hrCharacteristic.removeEventListener('characteristicvaluechanged', $fe739546a31d388a$var$hrCharacteristicHandler);\n        } catch (e) {\n            console.warn('[HR] Error removing HR characteristic listener on disconnect:', e);\n        }\n        $fe739546a31d388a$var$hrCharacteristicHandler = null;\n        $fe739546a31d388a$var$hrCharacteristic = null;\n    }\n    // Clean up event listener\n    if ($fe739546a31d388a$var$hrBluetoothDevice && $fe739546a31d388a$var$hrDisconnectHandler) {\n        try {\n            $fe739546a31d388a$var$hrBluetoothDevice.removeEventListener('gattserverdisconnected', $fe739546a31d388a$var$hrDisconnectHandler);\n        } catch (e) {\n            console.warn('[HR] Error removing disconnect listener:', e);\n        }\n        $fe739546a31d388a$var$hrDisconnectHandler = null;\n    }\n    // Only attempt to reconnect if there was a device connected previously\n    if (wasConnected && $fe739546a31d388a$var$reconnectionAttempts < $fe739546a31d388a$var$MAX_RECONNECTION_ATTEMPTS) {\n        $fe739546a31d388a$var$reconnectionAttempts++;\n        const delay = 5000; // 5-second delay before attempting to reconnect\n        console.log(`[HR] Reconnection attempt ${$fe739546a31d388a$var$reconnectionAttempts}/${$fe739546a31d388a$var$MAX_RECONNECTION_ATTEMPTS} in ${delay / 1000}s`);\n        callbacks.onStatusUpdate('Reconnecting...');\n        if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Reconnecting...';\n        $fe739546a31d388a$var$reconnectionTimeout = setTimeout(async ()=>{\n            try {\n                console.log('[HR] Attempting to reconnect...');\n                await $fe739546a31d388a$var$connectToHRDevice($fe739546a31d388a$var$hrBluetoothDevice, callbacks, elements);\n                console.log('[HR] Reconnection successful!');\n            } catch (error) {\n                console.error('[HR] Reconnection failed:', error);\n            // The disconnect handler will be called again, triggering the next attempt if applicable\n            }\n        }, delay);\n    } else {\n        if (wasConnected) {\n            console.log('[HR] Maximum reconnection attempts reached.');\n            callbacks.onStatusUpdate('Disconnected. Max reconnect attempts reached.');\n        }\n        $fe739546a31d388a$var$hrBluetoothDevice = null;\n        callbacks.onHeartRateChange(0);\n        if (callbacks.onDisconnected) callbacks.onDisconnected();\n    }\n}\nfunction $fe739546a31d388a$export$af01912f1cd2e0f() {\n    // Stop any pending reconnection attempts\n    if ($fe739546a31d388a$var$reconnectionTimeout) {\n        clearTimeout($fe739546a31d388a$var$reconnectionTimeout);\n        $fe739546a31d388a$var$reconnectionTimeout = null;\n    }\n    if ($fe739546a31d388a$var$hrBluetoothDevice && $fe739546a31d388a$var$hrDisconnectHandler) {\n        $fe739546a31d388a$var$hrBluetoothDevice.removeEventListener('gattserverdisconnected', $fe739546a31d388a$var$hrDisconnectHandler);\n        $fe739546a31d388a$var$hrDisconnectHandler = null;\n    }\n}\n\n\n/**\n * Bluetooth Cycling Sensors Module\n * Handles Bluetooth connections for power meters and cadence sensors\n */ \n// Bluetooth service UUIDs (using standard Bluetooth GATT service names)\nconst $67670bb3fd2c11fb$var$CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst $67670bb3fd2c11fb$var$CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst $67670bb3fd2c11fb$var$CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst $67670bb3fd2c11fb$var$CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\n// Constants for cadence calculation\nconst $67670bb3fd2c11fb$var$CADENCE_RESET_TIMEOUT_MS = 3000; // Reset cadence after 3 seconds of no data\n// Device connection state\nlet $67670bb3fd2c11fb$var$powerMeterDevice = null;\nlet $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice = null;\n// Store event listener references for proper cleanup\nlet $67670bb3fd2c11fb$var$powerMeterDisconnectHandler = null;\nlet $67670bb3fd2c11fb$var$speedCadenceDisconnectHandler = null;\n// Cadence calculation variables\nlet $67670bb3fd2c11fb$var$lastCrankRevs = 0;\nlet $67670bb3fd2c11fb$var$lastCrankTime = 0;\nlet $67670bb3fd2c11fb$var$cadenceResetTimer = null;\n/**\n * Generic Bluetooth device connection function\n * @param {Object} config - Configuration object\n * @param {string} config.serviceUuid - Bluetooth service UUID\n * @param {string} config.characteristicUuid - Bluetooth characteristic UUID\n * @param {string} config.scanningMessage - Message to display while scanning\n * @param {string} config.connectedMessage - Message to display when connected\n * @param {string} config.errorPrefix - Prefix for error messages\n * @param {Object} config.deviceRef - Object containing device and handler references\n * @param {Function} config.onDisconnected - Disconnection handler function\n * @param {Function} config.onCharacteristicChange - Characteristic value change handler\n * @param {Function} config.preConnect - Optional function to run before connection (e.g., reset variables)\n * @param {Object} config.elements - UI elements configuration\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n * @returns {Promise<boolean>} - True if connection successful\n */ async function $67670bb3fd2c11fb$var$connectBluetoothDevice(config, callbacks, elements) {\n    await (0, $ee8dba17fe5eb4b4$export$1d0d101be0e1eace)();\n    if (!navigator.bluetooth) {\n        callbacks.onStatusUpdate('Web Bluetooth API is not available.');\n        return false;\n    }\n    try {\n        callbacks.onStatusUpdate(config.scanningMessage);\n        // Update status if element exists\n        if (config.elements.statusElement && elements[config.elements.statusElement]) elements[config.elements.statusElement].textContent = 'Connecting...';\n        // Run pre-connection setup if provided\n        if (config.preConnect) config.preConnect();\n        // Clean up any existing connection before creating a new one\n        if (config.deviceRef.device) {\n            if (config.deviceRef.handler) {\n                config.deviceRef.device.removeEventListener('gattserverdisconnected', config.deviceRef.handler);\n                config.deviceRef.handler = null;\n            }\n            if (config.deviceRef.device.gatt.connected) config.deviceRef.device.gatt.disconnect();\n            config.deviceRef.device = null;\n        }\n        // Scan for device\n        config.deviceRef.device = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        config.serviceUuid\n                    ]\n                }\n            ]\n        });\n        // Validate that we got a device\n        if (!config.deviceRef.device) throw new Error('No device selected');\n        callbacks.onStatusUpdate('Connecting to device...');\n        // Update device name if element exists\n        if (config.elements.nameElement && elements[config.elements.nameElement]) elements[config.elements.nameElement].textContent = `Device: ${config.deviceRef.device.name || 'Unknown Device'}`;\n        // Add disconnect listener BEFORE connecting\n        config.deviceRef.handler = ()=>{\n            config.onDisconnected(callbacks, elements);\n        };\n        config.deviceRef.device.addEventListener('gattserverdisconnected', config.deviceRef.handler);\n        const server = await config.deviceRef.device.gatt.connect();\n        const service = await server.getPrimaryService(config.serviceUuid);\n        const characteristic = await service.getCharacteristic(config.characteristicUuid);\n        // Subscribe to notifications\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', (event)=>{\n            config.onCharacteristicChange(event, callbacks);\n        });\n        callbacks.onStatusUpdate(config.connectedMessage);\n        // Update status if element exists\n        if (config.elements.statusElement && elements[config.elements.statusElement]) elements[config.elements.statusElement].textContent = 'Connected';\n        return true;\n    } catch (error) {\n        // Handle user cancellation separately from actual errors\n        if (error.name === 'NotFoundError') callbacks.onStatusUpdate('No device selected.');\n        else {\n            callbacks.onStatusUpdate(`Error: ${error.message}`);\n            console.error(`${config.errorPrefix} connection failed:`, error);\n        }\n        // Update error status if element exists\n        if (config.elements.statusElement && elements[config.elements.statusElement]) elements[config.elements.statusElement].textContent = 'Connection Failed';\n        // Clean up on error\n        if (config.deviceRef.device) {\n            if (config.deviceRef.handler) {\n                config.deviceRef.device.removeEventListener('gattserverdisconnected', config.deviceRef.handler);\n                config.deviceRef.handler = null;\n            }\n            config.deviceRef.device = null;\n        }\n        return false;\n    }\n}\nasync function $67670bb3fd2c11fb$export$7cd63989f2e13954(callbacks, elements) {\n    const config = {\n        serviceUuid: $67670bb3fd2c11fb$var$CYCLING_POWER_SERVICE_UUID,\n        characteristicUuid: $67670bb3fd2c11fb$var$CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID,\n        scanningMessage: 'Scanning for power meters...',\n        connectedMessage: 'Connected and receiving data!',\n        errorPrefix: 'Power meter',\n        deviceRef: {\n            device: $67670bb3fd2c11fb$var$powerMeterDevice,\n            handler: $67670bb3fd2c11fb$var$powerMeterDisconnectHandler\n        },\n        onDisconnected: $67670bb3fd2c11fb$var$onPowerMeterDisconnected,\n        onCharacteristicChange: $67670bb3fd2c11fb$var$handlePowerMeasurement,\n        elements: {\n            nameElement: 'deviceNameElement',\n            statusElement: null\n        }\n    };\n    const result = await $67670bb3fd2c11fb$var$connectBluetoothDevice(config, callbacks, elements);\n    // Update module-level variables after connection\n    $67670bb3fd2c11fb$var$powerMeterDevice = config.deviceRef.device;\n    $67670bb3fd2c11fb$var$powerMeterDisconnectHandler = config.deviceRef.handler;\n    return result;\n}\nasync function $67670bb3fd2c11fb$export$15696ad475844a91(callbacks, elements) {\n    const config = {\n        serviceUuid: $67670bb3fd2c11fb$var$CYCLING_CADENCE_SERVICE_UUID,\n        characteristicUuid: $67670bb3fd2c11fb$var$CSC_MEASUREMENT_CHARACTERISTIC_UUID,\n        scanningMessage: 'Scanning for sensors...',\n        connectedMessage: 'Connected!',\n        errorPrefix: 'Speed/Cadence',\n        deviceRef: {\n            device: $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice,\n            handler: $67670bb3fd2c11fb$var$speedCadenceDisconnectHandler\n        },\n        onDisconnected: $67670bb3fd2c11fb$var$onCadenceDisconnected,\n        onCharacteristicChange: $67670bb3fd2c11fb$var$handleSpeedCadenceMeasurement,\n        preConnect: ()=>{\n            // Reset cadence variables for clean start\n            if ($67670bb3fd2c11fb$var$cadenceResetTimer) {\n                clearTimeout($67670bb3fd2c11fb$var$cadenceResetTimer);\n                $67670bb3fd2c11fb$var$cadenceResetTimer = null;\n            }\n            $67670bb3fd2c11fb$var$lastCrankRevs = 0;\n            $67670bb3fd2c11fb$var$lastCrankTime = 0;\n        },\n        elements: {\n            nameElement: 'cadenceDeviceName',\n            statusElement: 'cadenceConnectionStatus'\n        }\n    };\n    const result = await $67670bb3fd2c11fb$var$connectBluetoothDevice(config, callbacks, elements);\n    // Update module-level variables after connection\n    $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice = config.deviceRef.device;\n    $67670bb3fd2c11fb$var$speedCadenceDisconnectHandler = config.deviceRef.handler;\n    return result;\n}\nfunction $67670bb3fd2c11fb$export$3aa2dffa9bc119b1() {\n    return $67670bb3fd2c11fb$var$powerMeterDevice && $67670bb3fd2c11fb$var$powerMeterDevice.gatt.connected;\n}\nfunction $67670bb3fd2c11fb$export$3508b7cf9f8826e8() {\n    return $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice && $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice.gatt.connected;\n}\nfunction $67670bb3fd2c11fb$export$f70db003224cf603() {\n    if ($67670bb3fd2c11fb$var$powerMeterDevice) {\n        // Remove disconnect handler to prevent it from firing during manual disconnect\n        if ($67670bb3fd2c11fb$var$powerMeterDisconnectHandler) try {\n            $67670bb3fd2c11fb$var$powerMeterDevice.removeEventListener('gattserverdisconnected', $67670bb3fd2c11fb$var$powerMeterDisconnectHandler);\n            $67670bb3fd2c11fb$var$powerMeterDisconnectHandler = null;\n        } catch (e) {\n            console.warn('[Power] Error removing disconnect handler:', e);\n        }\n        // Disconnect GATT\n        if ($67670bb3fd2c11fb$var$powerMeterDevice.gatt && $67670bb3fd2c11fb$var$powerMeterDevice.gatt.connected) try {\n            $67670bb3fd2c11fb$var$powerMeterDevice.gatt.disconnect();\n        } catch (e) {\n            console.warn('[Power] Error disconnecting GATT:', e);\n        }\n        // Reset the device reference\n        $67670bb3fd2c11fb$var$powerMeterDevice = null;\n    }\n}\nfunction $67670bb3fd2c11fb$export$2b2e150fd067be82() {\n    if ($67670bb3fd2c11fb$var$speedCadenceBluetoothDevice) {\n        // Remove disconnect handler to prevent it from firing during manual disconnect\n        if ($67670bb3fd2c11fb$var$speedCadenceDisconnectHandler) try {\n            $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice.removeEventListener('gattserverdisconnected', $67670bb3fd2c11fb$var$speedCadenceDisconnectHandler);\n            $67670bb3fd2c11fb$var$speedCadenceDisconnectHandler = null;\n        } catch (e) {\n            console.warn('[Cadence] Error removing disconnect handler:', e);\n        }\n        // Disconnect GATT\n        if ($67670bb3fd2c11fb$var$speedCadenceBluetoothDevice.gatt && $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice.gatt.connected) try {\n            $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice.gatt.disconnect();\n        } catch (e) {\n            console.warn('[Cadence] Error disconnecting GATT:', e);\n        }\n        // Reset the device reference\n        $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice = null;\n        // Clear cadence reset timer and reset variables\n        if ($67670bb3fd2c11fb$var$cadenceResetTimer) {\n            clearTimeout($67670bb3fd2c11fb$var$cadenceResetTimer);\n            $67670bb3fd2c11fb$var$cadenceResetTimer = null;\n        }\n        $67670bb3fd2c11fb$var$lastCrankRevs = 0;\n        $67670bb3fd2c11fb$var$lastCrankTime = 0;\n    }\n}\n/**\n * Handle power measurement data\n * @param {Event} event - The characteristic value changed event\n * @param {Object} callbacks - Object containing callback functions\n */ function $67670bb3fd2c11fb$var$handlePowerMeasurement(event, callbacks) {\n    try {\n        const value = event.target.value;\n        // Validate input\n        if (!value || !(value instanceof DataView)) {\n            console.error('Invalid power measurement data: value must be a DataView');\n            return;\n        }\n        // Need at least 4 bytes (2 bytes flags + 2 bytes power)\n        if (value.byteLength < 4) {\n            console.error(`Invalid power measurement data: insufficient data (${value.byteLength} bytes)`);\n            return;\n        }\n        // The data is a DataView object with a flags field and the power value.\n        // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n        const offset = 2;\n        const power = value.getInt16(offset, true);\n        // Validate power is a reasonable value\n        // Negative power can occur (e.g., when coasting with resistance)\n        // but extremely negative values are likely errors\n        if (isNaN(power)) {\n            console.error('Invalid power value: NaN');\n            return;\n        }\n        // Warn about unusual values (professional cyclists max ~2000W, errors often show up as very high values)\n        if (power > 3000) console.warn(`Unusually high power detected: ${power}W`);\n        else if (power < -500) console.warn(`Unusually low power detected: ${power}W`);\n        callbacks.onPowerMeasurement(power);\n    } catch (error) {\n        console.error('Error parsing power measurement data:', error.message);\n    // Don't update the UI with invalid data, just log the error\n    }\n}\n/**\n * Handle speed/cadence measurement data\n * @param {Event} event - The characteristic value changed event\n * @param {Object} callbacks - Object containing callback functions\n */ function $67670bb3fd2c11fb$var$handleSpeedCadenceMeasurement(event, callbacks) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n    const wheelRevsPresent = flags & 0x01;\n    const crankRevsPresent = flags & 0x02;\n    // Skip wheel revolution data since we don't need speed/distance\n    if (wheelRevsPresent) offset += 6; // Skip wheel data\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n        if ($67670bb3fd2c11fb$var$lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - $67670bb3fd2c11fb$var$lastCrankRevs;\n            const time = (lastCrankEventTime - $67670bb3fd2c11fb$var$lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = revs / time * 60; // RPM\n                const roundedCadence = Math.round(cadence);\n                callbacks.onCadenceChange(roundedCadence);\n                // Clear any existing reset timer\n                if ($67670bb3fd2c11fb$var$cadenceResetTimer) clearTimeout($67670bb3fd2c11fb$var$cadenceResetTimer);\n                // Set timer to reset cadence to 0 if no new data comes in\n                $67670bb3fd2c11fb$var$cadenceResetTimer = setTimeout(()=>{\n                    callbacks.onCadenceChange(0);\n                    $67670bb3fd2c11fb$var$cadenceResetTimer = null;\n                }, $67670bb3fd2c11fb$var$CADENCE_RESET_TIMEOUT_MS);\n            }\n        }\n        $67670bb3fd2c11fb$var$lastCrankRevs = cumulativeCrankRevolutions;\n        $67670bb3fd2c11fb$var$lastCrankTime = lastCrankEventTime;\n    }\n}\n/**\n * Handle power meter disconnection\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */ function $67670bb3fd2c11fb$var$onPowerMeterDisconnected(callbacks, elements) {\n    callbacks.onStatusUpdate('Power meter disconnected.');\n    if (elements.deviceNameElement) elements.deviceNameElement.textContent = '';\n    // Clean up event listener\n    if ($67670bb3fd2c11fb$var$powerMeterDevice && $67670bb3fd2c11fb$var$powerMeterDisconnectHandler) {\n        $67670bb3fd2c11fb$var$powerMeterDevice.removeEventListener('gattserverdisconnected', $67670bb3fd2c11fb$var$powerMeterDisconnectHandler);\n        $67670bb3fd2c11fb$var$powerMeterDisconnectHandler = null;\n    }\n    $67670bb3fd2c11fb$var$powerMeterDevice = null;\n    callbacks.onDisconnected();\n}\n/**\n * Handle cadence sensor disconnection\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */ function $67670bb3fd2c11fb$var$onCadenceDisconnected(callbacks, elements) {\n    callbacks.onStatusUpdate('Device disconnected.');\n    if (elements.cadenceConnectionStatus) elements.cadenceConnectionStatus.textContent = 'Disconnected';\n    if (elements.cadenceDeviceName) elements.cadenceDeviceName.textContent = '';\n    $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice = null;\n    callbacks.onCadenceChange(0);\n    if (callbacks.onDisconnected) callbacks.onDisconnected();\n    // Clear cadence reset timer and reset variables\n    if ($67670bb3fd2c11fb$var$cadenceResetTimer) {\n        clearTimeout($67670bb3fd2c11fb$var$cadenceResetTimer);\n        $67670bb3fd2c11fb$var$cadenceResetTimer = null;\n    }\n    $67670bb3fd2c11fb$var$lastCrankRevs = 0;\n    $67670bb3fd2c11fb$var$lastCrankTime = 0;\n}\nfunction $67670bb3fd2c11fb$export$36918546c5d6251f() {\n    if ($67670bb3fd2c11fb$var$powerMeterDevice && $67670bb3fd2c11fb$var$powerMeterDisconnectHandler) {\n        $67670bb3fd2c11fb$var$powerMeterDevice.removeEventListener('gattserverdisconnected', $67670bb3fd2c11fb$var$powerMeterDisconnectHandler);\n        $67670bb3fd2c11fb$var$powerMeterDisconnectHandler = null;\n    }\n    if ($67670bb3fd2c11fb$var$speedCadenceBluetoothDevice && $67670bb3fd2c11fb$var$speedCadenceDisconnectHandler) {\n        $67670bb3fd2c11fb$var$speedCadenceBluetoothDevice.removeEventListener('gattserverdisconnected', $67670bb3fd2c11fb$var$speedCadenceDisconnectHandler);\n        $67670bb3fd2c11fb$var$speedCadenceDisconnectHandler = null;\n    }\n}\n\n\nfunction $305aaf8b9a43c26d$export$47445d94160b987c() {\n    // Clean up heart rate listeners\n    (0, $fe739546a31d388a$export$af01912f1cd2e0f)();\n    // Clean up cycling sensors listeners\n    (0, $67670bb3fd2c11fb$export$36918546c5d6251f)();\n}\n\n\n/**\n * Export Modals Module\n * Handles modal-based export functionality with user-friendly dialogs\n */ // Import required functions from data-export module\n/**\n * Data Export Module\n * Handles all data export functionality including JSON, CSV, and TCX exports\n */ /**\n * TCX (Training Center XML) Generation Module\n * Generates Garmin Training Center Database XML files for cycling activities\n */ /**\n * Check if a data point has valid power data\n * @param {Object} dataPoint - Data point to check\n * @returns {boolean} True if power is present and greater than 0\n */ function $bdf94e4d5edca10a$var$hasValidPower(dataPoint) {\n    return dataPoint.power !== undefined && dataPoint.power > 0;\n}\n/**\n * Check if a timestamp is valid\n * @param {number} timestamp - Timestamp to validate\n * @returns {boolean} True if timestamp is valid\n */ function $bdf94e4d5edca10a$var$isValidTimestamp(timestamp) {\n    return timestamp !== undefined && !isNaN(new Date(timestamp).getTime());\n}\n/**\n * Creates a trackpoint XML element for a single data point\n * @param {Object} dataPoint - Data point with time, power, heartRate, cadence\n * @returns {string} XML trackpoint string\n */ function $bdf94e4d5edca10a$var$createTrackpoint(dataPoint) {\n    const xmlBuilders = {\n        time: (time)=>`<Time>${new Date(time).toISOString()}</Time>`,\n        heartRate: (hr)=>`<HeartRateBpm>\n      <Value>${Math.round(hr)}</Value>\n    </HeartRateBpm>`,\n        cadence: (cad)=>`<Cadence>${Math.round(cad)}</Cadence>`,\n        power: (pw)=>{\n            // Ensure power is a non-negative integer (TCX spec: unsignedShort 0-65535)\n            const watts = Math.max(0, Math.min(2000, Math.round(pw)));\n            return `<Extensions>\n      <TPX xmlns=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\">\n        <Watts>${watts}</Watts>\n      </TPX>\n    </Extensions>`;\n        }\n    };\n    const contents = Object.keys(xmlBuilders).map((key)=>{\n        if (dataPoint[key] === undefined) return '';\n        return xmlBuilders[key](dataPoint[key]);\n    }).filter(Boolean) // Remove empty strings\n    .join('\\n');\n    return `<Trackpoint>\n${contents}\n</Trackpoint>`;\n}\n/**\n * Normalize a data point to the format expected by TCX\n * @param {Object} item - Raw data point\n * @returns {Object} Normalized data point with time, power, heartRate, and cadence properties\n */ function $bdf94e4d5edca10a$var$normalizeDataPoint(item) {\n    return {\n        time: item.timestamp,\n        ...item.power !== undefined && {\n            power: item.power\n        },\n        ...item.heartRate !== undefined && {\n            heartRate: item.heartRate\n        },\n        ...item.cadence !== undefined && {\n            cadence: item.cadence\n        }\n    };\n}\n/**\n * Remove leading and trailing data points without valid power data\n * @param {Array<Object>} dataPoints - Array of data points\n * @returns {Array<Object>} Trimmed array\n */ function $bdf94e4d5edca10a$var$trimEmptyPowerEntries(dataPoints) {\n    const result = [\n        ...dataPoints\n    ];\n    // Remove leading entries without power\n    while(result.length > 0 && !$bdf94e4d5edca10a$var$hasValidPower(result[0]))result.shift();\n    // Remove trailing entries without power\n    while(result.length > 0 && !$bdf94e4d5edca10a$var$hasValidPower(result[result.length - 1]))result.pop();\n    return result;\n}\n/**\n * Calculate total time in seconds from start to end of data\n * @param {Array<Object>} dataPoints - Array of data points with time property\n * @returns {number} Total time in seconds\n */ function $bdf94e4d5edca10a$var$calculateTotalTime(dataPoints) {\n    if (dataPoints.length === 0) return 0;\n    const startTime = dataPoints[0].time;\n    const endTime = dataPoints[dataPoints.length - 1].time;\n    // Convert milliseconds to seconds\n    return Math.round((endTime - startTime) / 1000);\n}\n/**\n * Generates TCX XML string from power data for cycling activities\n * @param {Array<Object>} powerData - Array of power measurement objects\n * @returns {string} Complete TCX XML string, or empty string if no valid data\n */ function $bdf94e4d5edca10a$export$84088f6ac1d2df1d(powerData) {\n    // Validate input data\n    if (!Array.isArray(powerData) || powerData.length === 0) return '';\n    // Filter valid data points (must be objects with valid timestamps)\n    const validDataPoints = powerData.filter((dataPoint)=>dataPoint && typeof dataPoint === 'object' && $bdf94e4d5edca10a$var$isValidTimestamp(dataPoint.timestamp));\n    if (validDataPoints.length === 0) return '';\n    // Normalize and sort data by time\n    const processedData = validDataPoints.map($bdf94e4d5edca10a$var$normalizeDataPoint).sort((a, b)=>a.time - b.time);\n    // Remove entries without power at the beginning and end\n    const trimmedData = $bdf94e4d5edca10a$var$trimEmptyPowerEntries(processedData);\n    if (trimmedData.length === 0) return '';\n    // Generate trackpoints XML\n    const trackpoints = trimmedData.map($bdf94e4d5edca10a$var$createTrackpoint).join('\\n');\n    const startTime = trimmedData[0].time;\n    const startTimeISO = new Date(startTime).toISOString();\n    // Calculate total time for lap summary\n    const totalTimeSeconds = $bdf94e4d5edca10a$var$calculateTotalTime(trimmedData);\n    // Build complete TCX document with proper formatting and required fields\n    const tcxXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<TrainingCenterDatabase\n  xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\n    http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\">\n  <Activities>\n    <Activity Sport=\"Biking\">\n      <Id>${startTimeISO}</Id>\n      <Lap StartTime=\"${startTimeISO}\">\n        <TotalTimeSeconds>${totalTimeSeconds}</TotalTimeSeconds>\n        <DistanceMeters>0</DistanceMeters>\n        <Calories>0</Calories>\n        <Intensity>Active</Intensity>\n        <TriggerMethod>Manual</TriggerMethod>\n        <Track>\n${trackpoints}\n        </Track>\n      </Lap>\n    </Activity>\n  </Activities>\n</TrainingCenterDatabase>`;\n    return tcxXml;\n}\n\n\n\n// Constants for export operations\nconst $8ca4b0f2a2d350fa$var$EXPORT_DELAY_MS = 100; // Delay between downloads to prevent browser blocking\nconst $8ca4b0f2a2d350fa$var$MIME_TYPES = {\n    JSON: 'application/json;charset=utf-8;',\n    CSV: 'text/csv;charset=utf-8;',\n    XML: 'application/vnd.garmin.tcx+xml;charset=utf-8;'\n};\n/**\n * Validate power data array and its contents\n * @param {Array} powerData - Array to validate\n * @returns {boolean} True if valid\n * @throws {Error} If data is invalid with specific reason\n */ function $8ca4b0f2a2d350fa$var$validatePowerData(powerData) {\n    if (!powerData) throw new Error('Power data is null or undefined');\n    if (!Array.isArray(powerData)) throw new Error('Power data must be an array');\n    if (powerData.length === 0) throw new Error('Power data array is empty');\n    // Validate array contents\n    const invalidItems = powerData.filter((item)=>!item || typeof item !== 'object' || item.timestamp === undefined);\n    if (invalidItems.length > 0) throw new Error(`Power data contains ${invalidItems.length} invalid item(s)`);\n    return true;\n}\nfunction $8ca4b0f2a2d350fa$export$20b155984c11fcae(powerData) {\n    $8ca4b0f2a2d350fa$var$validatePowerData(powerData);\n    const exportData = {\n        mainSensors: powerData\n    };\n    const jsonString = JSON.stringify(exportData, null, 2);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: $8ca4b0f2a2d350fa$var$MIME_TYPES.JSON\n    });\n    $8ca4b0f2a2d350fa$var$downloadFile(blob, `power_data_${(0, $26bf0f38c1315f82$export$b5051178064abb72)()}.json`);\n}\nfunction $8ca4b0f2a2d350fa$export$dfe05421fb7443f9(powerData) {\n    $8ca4b0f2a2d350fa$var$validatePowerData(powerData);\n    // Build header with main columns\n    let csvContent = 'timestamp,power,heartRate,cadence\\n';\n    // Add data rows - main sensor data\n    powerData.forEach((row)=>{\n        const timestamp = row.timestamp ?? '';\n        const power = row.power ?? '';\n        const heartRate = row.heartRate ?? '';\n        const cadence = row.cadence ?? '';\n        csvContent += `${timestamp},${power},${heartRate},${cadence}\\n`;\n    });\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: $8ca4b0f2a2d350fa$var$MIME_TYPES.CSV\n    });\n    $8ca4b0f2a2d350fa$var$downloadFile(blob, `power_data_${(0, $26bf0f38c1315f82$export$b5051178064abb72)()}.csv`);\n}\nfunction $8ca4b0f2a2d350fa$export$55f444e58fd8eb49(powerData) {\n    $8ca4b0f2a2d350fa$var$validatePowerData(powerData);\n    try {\n        const tcxContent = (0, $bdf94e4d5edca10a$export$84088f6ac1d2df1d)(powerData);\n        if (!tcxContent) throw new Error('Failed to generate TCX content');\n        const blob = new Blob([\n            tcxContent\n        ], {\n            type: $8ca4b0f2a2d350fa$var$MIME_TYPES.XML\n        });\n        $8ca4b0f2a2d350fa$var$downloadFile(blob, `power_data_${(0, $26bf0f38c1315f82$export$b5051178064abb72)()}.tcx`);\n    } catch (error) {\n        console.error('Error generating TCX:', error);\n        throw error;\n    }\n}\n/**\n * Helper function to trigger file download\n * @param {Blob} blob - The blob to download\n * @param {string} filename - The filename for the download\n */ function $8ca4b0f2a2d350fa$var$downloadFile(blob, filename) {\n    try {\n        if (!blob || !(blob instanceof Blob)) throw new Error('Invalid blob provided for download');\n        if (!filename || typeof filename !== 'string') throw new Error('Invalid filename provided for download');\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    } catch (error) {\n        console.error('Error during file download:', error);\n        throw error;\n    }\n}\n/**\n * Helper function to delay execution (used to prevent browser blocking on multiple downloads)\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise<void>}\n */ function $8ca4b0f2a2d350fa$var$delay(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\nasync function $8ca4b0f2a2d350fa$export$1d4030922ae5cd5b(powerData, apiKey) {\n    $8ca4b0f2a2d350fa$var$validatePowerData(powerData);\n    if (!apiKey || typeof apiKey !== 'string' || apiKey.trim() === '') throw new Error('API key is required');\n    try {\n        // Generate TCX content\n        const tcxContent = (0, $bdf94e4d5edca10a$export$84088f6ac1d2df1d)(powerData);\n        if (!tcxContent) throw new Error('Failed to generate TCX content for upload');\n        // Parse API key (format: \"athleteId:apiKey\" or just \"apiKey\")\n        const apiKeyTrimmed = apiKey.trim();\n        const hasAthleteId = apiKeyTrimmed.includes(':');\n        // Create file for upload\n        const blob = new Blob([\n            tcxContent\n        ], {\n            type: $8ca4b0f2a2d350fa$var$MIME_TYPES.XML\n        });\n        const file = new File([\n            blob\n        ], `workout_${(0, $26bf0f38c1315f82$export$b5051178064abb72)()}.tcx`, {\n            type: $8ca4b0f2a2d350fa$var$MIME_TYPES.XML\n        });\n        // Prepare form data\n        const formData = new FormData();\n        formData.append('file', file);\n        // Make request to intervals.icu API\n        const apiUrl = 'https://intervals.icu/api/v1/athlete/i' + (hasAthleteId ? '' : '0') + '/activities';\n        const headers = {\n            'Authorization': `Basic ${btoa(apiKeyTrimmed)}`\n        };\n        const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: headers,\n            body: formData\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`Upload failed: ${response.status} ${response.statusText}. ${errorText}`);\n        }\n        const result = await response.json();\n        console.log(\"\\u2705 Successfully uploaded to intervals.icu:\", result);\n        return result;\n    } catch (error) {\n        console.error('Error uploading to intervals.icu:', error);\n        throw error;\n    }\n}\nasync function $8ca4b0f2a2d350fa$export$64da5a70f1570a50(data) {\n    const { powerData: powerData } = data;\n    $8ca4b0f2a2d350fa$var$validatePowerData(powerData);\n    const errors = [];\n    const exports = [\n        {\n            name: 'Summary JSON',\n            fn: ()=>$8ca4b0f2a2d350fa$export$20b155984c11fcae(powerData)\n        },\n        {\n            name: 'Summary CSV',\n            fn: ()=>$8ca4b0f2a2d350fa$export$dfe05421fb7443f9(powerData)\n        },\n        {\n            name: 'TCX',\n            fn: ()=>$8ca4b0f2a2d350fa$export$55f444e58fd8eb49(powerData)\n        }\n    ];\n    // Execute exports with delays between them\n    for (const { name: name, fn: fn } of exports){\n        try {\n            fn();\n            console.log(`\\u{2713} ${name} exported`);\n        } catch (error) {\n            errors.push(`${name}: ${error.message}`);\n        }\n        await $8ca4b0f2a2d350fa$var$delay($8ca4b0f2a2d350fa$var$EXPORT_DELAY_MS);\n    }\n    // Report any errors\n    if (errors.length > 0) {\n        const errorMessage = `Some exports failed:\\n${errors.join('\\n')}`;\n        console.warn('Export errors:', errors);\n        throw new Error(errorMessage);\n    }\n    console.log(\"\\u2705 All exports completed successfully!\");\n}\n\n\n// Constants for modal animations\nconst $1fea2fc27e5705f2$var$MODAL_ANIMATION_DELAY_MS = 300;\n/**\n * Handle export error with user-friendly message\n * @param {Error} error - The error that occurred\n * @param {string} exportType - Type of export that failed\n */ function $1fea2fc27e5705f2$var$handleExportError(error, exportType) {\n    const message = `Error during ${exportType} export: ${error.message}`;\n    console.error(message, error);\n    alert(message);\n}\nfunction $1fea2fc27e5705f2$export$a32390f93c1373db(dataStore) {\n    const modal = $1fea2fc27e5705f2$var$createExportModal(\"\\uD83D\\uDCC4 Exports\", 'Export your session data in various formats');\n    const buttons = [\n        {\n            text: \"\\uD83D\\uDCE5 Export All Files\",\n            description: 'Download all export formats at once',\n            className: 'export-all primary',\n            onClick: async ()=>{\n                try {\n                    await (0, $8ca4b0f2a2d350fa$export$64da5a70f1570a50)({\n                        powerData: dataStore.powerData\n                    });\n                    $1fea2fc27e5705f2$var$closeModal(modal);\n                    alert('All export files downloaded successfully!');\n                } catch (error) {\n                    $1fea2fc27e5705f2$var$handleExportError(error, 'all files');\n                }\n            }\n        },\n        {\n            text: \"\\uD83D\\uDCCA Export JSON\",\n            description: 'JavaScript Object Notation format',\n            onClick: ()=>{\n                try {\n                    (0, $8ca4b0f2a2d350fa$export$20b155984c11fcae)(dataStore.powerData);\n                    $1fea2fc27e5705f2$var$closeModal(modal);\n                } catch (error) {\n                    $1fea2fc27e5705f2$var$handleExportError(error, 'JSON');\n                }\n            }\n        },\n        {\n            text: \"\\uD83D\\uDCCA Export CSV\",\n            description: 'Comma-Separated Values format',\n            onClick: ()=>{\n                try {\n                    (0, $8ca4b0f2a2d350fa$export$dfe05421fb7443f9)(dataStore.powerData);\n                    $1fea2fc27e5705f2$var$closeModal(modal);\n                } catch (error) {\n                    $1fea2fc27e5705f2$var$handleExportError(error, 'CSV');\n                }\n            }\n        },\n        {\n            text: \"\\uD83C\\uDFC3 Export TCX\",\n            description: 'Training Center XML format',\n            onClick: ()=>{\n                try {\n                    (0, $8ca4b0f2a2d350fa$export$55f444e58fd8eb49)(dataStore.powerData);\n                    $1fea2fc27e5705f2$var$closeModal(modal);\n                } catch (error) {\n                    $1fea2fc27e5705f2$var$handleExportError(error, 'TCX');\n                }\n            }\n        },\n        {\n            text: \"\\u2601\\uFE0F Upload to intervals.icu\",\n            description: 'Upload workout directly to intervals.icu',\n            onClick: async (event)=>{\n                const apiKey = prompt(\"Enter your intervals.icu API key:\\n\\nFormat: athleteId:apiKey or just apiKey\\nFind it at: intervals.icu \\u2192 Settings \\u2192 Developer Settings\\n\\nNote: API key is not stored and only used for this upload.\");\n                if (!apiKey) return; // User cancelled\n                const button = event.target.closest('button');\n                if (!button) return;\n                try {\n                    // Show loading state\n                    button.innerHTML = '<span>\\u23F3 Uploading...</span><small style=\"opacity: 0.7; font-size: 0.8em;\">Please wait</small>';\n                    button.disabled = true;\n                    await (0, $8ca4b0f2a2d350fa$export$1d4030922ae5cd5b)(dataStore.powerData, apiKey);\n                    $1fea2fc27e5705f2$var$closeModal(modal);\n                    alert(\"\\u2705 Successfully uploaded workout to intervals.icu!\");\n                } catch (error) {\n                    // Restore button state\n                    button.innerHTML = '<span>\\u2601\\uFE0F Upload to intervals.icu</span><small style=\"opacity: 0.7; font-size: 0.8em;\">Upload workout directly to intervals.icu</small>';\n                    button.disabled = false;\n                    $1fea2fc27e5705f2$var$handleExportError(error, 'intervals.icu upload');\n                }\n            }\n        }\n    ];\n    $1fea2fc27e5705f2$var$addButtonsToModal(modal, buttons);\n    $1fea2fc27e5705f2$var$showModal(modal);\n}\n/**\n * Create export modal with header\n * @param {string} title - Modal title\n * @param {string} description - Modal description\n * @returns {HTMLElement} Modal element\n */ function $1fea2fc27e5705f2$var$createExportModal(title, description) {\n    const modal = document.createElement('div');\n    modal.className = 'export-modal';\n    modal.innerHTML = `\n        <div class=\"export-modal-content\">\n            <div class=\"export-modal-header\">\n                <h3 class=\"export-modal-title\">${title}</h3>\n                <button class=\"export-modal-close\" aria-label=\"Close modal\">&times;</button>\n            </div>\n            <div class=\"export-modal-description\">${description}</div>\n            <div class=\"export-modal-buttons\"></div>\n        </div>\n    `;\n    // Add close functionality\n    const closeBtn = modal.querySelector('.export-modal-close');\n    closeBtn.addEventListener('click', ()=>$1fea2fc27e5705f2$var$closeModal(modal));\n    modal.addEventListener('click', (e)=>{\n        if (e.target === modal) $1fea2fc27e5705f2$var$closeModal(modal);\n    });\n    return modal;\n}\n/**\n * Add buttons to modal\n * @param {HTMLElement} modal - Modal element\n * @param {Array} buttons - Array of button configurations\n */ function $1fea2fc27e5705f2$var$addButtonsToModal(modal, buttons) {\n    const buttonsContainer = modal.querySelector('.export-modal-buttons');\n    buttons.forEach((buttonConfig)=>{\n        const button = document.createElement('button');\n        button.className = `export-modal-button ${buttonConfig.className || ''}`;\n        button.disabled = buttonConfig.disabled || false;\n        button.innerHTML = `\n            <span>${buttonConfig.text}</span>\n            ${buttonConfig.description ? `<small style=\"opacity: 0.7; font-size: 0.8em;\">${buttonConfig.description}</small>` : ''}\n        `;\n        button.addEventListener('click', buttonConfig.onClick);\n        buttonsContainer.appendChild(button);\n        // Add separator after \"Export All\" button\n        if (buttonConfig.className && buttonConfig.className.includes('export-all')) {\n            const separator = document.createElement('div');\n            separator.className = 'export-modal-separator';\n            separator.innerHTML = '<span>Individual Exports</span>';\n            buttonsContainer.appendChild(separator);\n        }\n    });\n}\n/**\n * Show modal with animation\n * @param {HTMLElement} modal - Modal element\n */ function $1fea2fc27e5705f2$var$showModal(modal) {\n    document.body.appendChild(modal);\n    // Trigger animation\n    requestAnimationFrame(()=>{\n        modal.classList.add('show');\n    });\n}\n/**\n * Close modal with animation\n * @param {HTMLElement} modal - Modal element\n */ function $1fea2fc27e5705f2$var$closeModal(modal) {\n    modal.classList.remove('show');\n    setTimeout(()=>{\n        if (modal.parentNode) document.body.removeChild(modal);\n    }, $1fea2fc27e5705f2$var$MODAL_ANIMATION_DELAY_MS);\n}\nfunction $1fea2fc27e5705f2$export$313373f1d10aa459(dataStore) {\n    // Basic exports\n    const basicMenuItem = document.getElementById('exportMenuItem');\n    if (basicMenuItem) basicMenuItem.addEventListener('click', ()=>{\n        $1fea2fc27e5705f2$export$a32390f93c1373db(dataStore);\n    });\n}\n\n\n/**\n * Utility Modals Module\n * Handles utility-related modal functionality\n */ // Constants for modal animations\nconst $5b4eaaddc8f9222a$var$MODAL_ANIMATION_DELAY_MS = 300;\nfunction $5b4eaaddc8f9222a$export$a2134b5aa2aa2315(dataStore) {\n    const modal = $5b4eaaddc8f9222a$var$createUtilityModal(\"\\uD83D\\uDEE0\\uFE0F Utilities\", 'Session management and utilities');\n    const buttons = [\n        {\n            text: \"\\u26A1 Disconnect Power Meter\",\n            description: 'Disconnect the connected power meter sensor',\n            className: 'secondary',\n            onClick: ()=>{\n                const connectButton = document.getElementById('connectButton');\n                if (connectButton && connectButton.dataset.connected === 'true') {\n                    const confirmed = confirm('Disconnect power meter?');\n                    if (confirmed) {\n                        connectButton.click();\n                        alert('Power meter disconnected');\n                        $5b4eaaddc8f9222a$var$closeModal(modal);\n                    }\n                } else alert('No power meter connected');\n            }\n        },\n        {\n            text: \"\\u2764\\uFE0F Disconnect Heart Rate\",\n            description: 'Disconnect the connected heart rate monitor',\n            className: 'secondary',\n            onClick: ()=>{\n                const hrButton = document.getElementById('hrConnectButton');\n                if (hrButton && hrButton.dataset.connected === 'true') {\n                    const confirmed = confirm('Disconnect heart rate monitor?');\n                    if (confirmed) {\n                        hrButton.click();\n                        alert('Heart rate monitor disconnected');\n                        $5b4eaaddc8f9222a$var$closeModal(modal);\n                    }\n                } else alert('No heart rate monitor connected');\n            }\n        },\n        {\n            text: \"\\uD83D\\uDEB4 Disconnect Cadence Sensor\",\n            description: 'Disconnect the connected cadence/speed sensor',\n            className: 'secondary',\n            onClick: ()=>{\n                const cadenceButton = document.getElementById('speedCadenceConnectButton');\n                if (cadenceButton && cadenceButton.dataset.connected === 'true') {\n                    const confirmed = confirm('Disconnect cadence sensor?');\n                    if (confirmed) {\n                        cadenceButton.click();\n                        alert('Cadence sensor disconnected');\n                        $5b4eaaddc8f9222a$var$closeModal(modal);\n                    }\n                } else alert('No cadence sensor connected');\n            }\n        },\n        {\n            text: \"\\uD83D\\uDD04 Clear App Cache\",\n            description: 'Clear cached files and force reload (ensures fresh version)',\n            className: 'primary',\n            onClick: async ()=>{\n                const confirmed = confirm('This will clear the app cache and reload to get the latest version. Continue?');\n                if (confirmed) {\n                    await $5b4eaaddc8f9222a$var$clearAppCache();\n                    alert('Cache cleared! The page will now reload.');\n                    window.location.reload(true);\n                }\n            }\n        },\n        {\n            text: \"\\uD83D\\uDDD1\\uFE0F Clear Session Data\",\n            description: 'Clear all session data (cannot be undone)',\n            className: 'danger',\n            onClick: ()=>{\n                const confirmed = confirm('Are you sure you want to clear all session data? This action cannot be undone.');\n                if (confirmed) {\n                    dataStore.resetAllSessionData();\n                    alert('Session data cleared successfully!');\n                    $5b4eaaddc8f9222a$var$closeModal(modal);\n                }\n            }\n        }\n    ];\n    $5b4eaaddc8f9222a$var$addButtonsToModal(modal, buttons);\n    $5b4eaaddc8f9222a$var$showModal(modal);\n}\n/**\n * Clear app cache and service worker cache\n */ async function $5b4eaaddc8f9222a$var$clearAppCache() {\n    try {\n        // Clear all caches\n        if ('caches' in window) {\n            const cacheNames = await caches.keys();\n            await Promise.all(cacheNames.map((cacheName)=>{\n                console.log('Deleting cache:', cacheName);\n                return caches.delete(cacheName);\n            }));\n            console.log('All caches cleared');\n        }\n        // Tell service worker to clear its cache\n        if (navigator.serviceWorker && navigator.serviceWorker.controller) navigator.serviceWorker.controller.postMessage({\n            type: 'CLEAR_CACHE'\n        });\n        // Unregister service worker to ensure clean reload\n        if (navigator.serviceWorker) {\n            const registrations = await navigator.serviceWorker.getRegistrations();\n            for (let registration of registrations){\n                await registration.unregister();\n                console.log('Service worker unregistered');\n            }\n        }\n    } catch (error) {\n        console.error('Error clearing cache:', error);\n    }\n}\n/**\n * Create utility modal with header\n * @param {string} title - Modal title\n * @param {string} description - Modal description\n * @returns {HTMLElement} Modal element\n */ function $5b4eaaddc8f9222a$var$createUtilityModal(title, description) {\n    const modal = document.createElement('div');\n    modal.className = 'export-modal';\n    modal.innerHTML = `\n        <div class=\"export-modal-content\">\n            <div class=\"export-modal-header\">\n                <h3 class=\"export-modal-title\">${title}</h3>\n                <button class=\"export-modal-close\" aria-label=\"Close modal\">&times;</button>\n            </div>\n            <div class=\"export-modal-description\">${description}</div>\n            <div class=\"export-modal-buttons\"></div>\n        </div>\n    `;\n    // Add close functionality\n    const closeBtn = modal.querySelector('.export-modal-close');\n    closeBtn.addEventListener('click', ()=>$5b4eaaddc8f9222a$var$closeModal(modal));\n    modal.addEventListener('click', (e)=>{\n        if (e.target === modal) $5b4eaaddc8f9222a$var$closeModal(modal);\n    });\n    return modal;\n}\n/**\n * Add buttons to modal\n * @param {HTMLElement} modal - Modal element\n * @param {Array} buttons - Array of button configurations\n */ function $5b4eaaddc8f9222a$var$addButtonsToModal(modal, buttons) {\n    const buttonsContainer = modal.querySelector('.export-modal-buttons');\n    buttons.forEach((buttonConfig)=>{\n        const button = document.createElement('button');\n        button.className = `export-modal-button ${buttonConfig.className || ''}`;\n        button.disabled = buttonConfig.disabled || false;\n        button.innerHTML = `\n            <span>${buttonConfig.text}</span>\n            ${buttonConfig.description ? `<small style=\"opacity: 0.7; font-size: 0.8em;\">${buttonConfig.description}</small>` : ''}\n        `;\n        button.addEventListener('click', buttonConfig.onClick);\n        buttonsContainer.appendChild(button);\n    });\n}\n/**\n * Show modal with animation\n * @param {HTMLElement} modal - Modal element\n */ function $5b4eaaddc8f9222a$var$showModal(modal) {\n    document.body.appendChild(modal);\n    // Trigger animation\n    requestAnimationFrame(()=>{\n        modal.classList.add('show');\n    });\n}\n/**\n * Close modal with animation\n * @param {HTMLElement} modal - Modal element\n */ function $5b4eaaddc8f9222a$var$closeModal(modal) {\n    modal.classList.remove('show');\n    setTimeout(()=>{\n        if (modal.parentNode) document.body.removeChild(modal);\n    }, $5b4eaaddc8f9222a$var$MODAL_ANIMATION_DELAY_MS);\n}\nfunction $5b4eaaddc8f9222a$export$683ef427d6d6293b(dataStore) {\n    const utilsMenuItem = document.getElementById('exportUtilsMenuItem');\n    if (utilsMenuItem) utilsMenuItem.addEventListener('click', ()=>{\n        $5b4eaaddc8f9222a$export$a2134b5aa2aa2315(dataStore);\n    });\n}\n\n\n/**\n * Notification System Module\n * Handles displaying temporary notifications to the user\n */ // Constants for notification system\nconst $e75b18aae82f997e$var$NOTIFICATION_DURATION_MS = 5000;\nconst $e75b18aae82f997e$var$ANIMATION_DURATION_MS = 300;\nconst $e75b18aae82f997e$var$NOTIFICATION_COLORS = {\n    success: '#4CAF50',\n    error: '#f44336',\n    warning: '#ff9800',\n    info: '#2196F3'\n};\n/**\n * Ensure animation styles are added to the document\n */ function $e75b18aae82f997e$var$ensureAnimationStyles() {\n    if (!document.getElementById('notification-styles')) {\n        const style = document.createElement('style');\n        style.id = 'notification-styles';\n        style.textContent = `\n            @keyframes slideIn {\n                from { transform: translateX(100%); opacity: 0; }\n                to { transform: translateX(0); opacity: 1; }\n            }\n        `;\n        document.head.appendChild(style);\n    }\n}\n/**\n * Create a notification element with the specified styling\n * @param {string} message - The notification message\n * @param {string} backgroundColor - The background color for the notification\n * @returns {HTMLElement} The notification element\n */ function $e75b18aae82f997e$var$createNotificationElement(message, backgroundColor) {\n    const notification = document.createElement('div');\n    notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: ${backgroundColor};\n        color: white;\n        padding: 1rem 1.5rem;\n        border-radius: 8px;\n        z-index: 1000;\n        font-size: 0.9rem;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        animation: slideIn 0.3s ease-out;\n        max-width: 300px;\n        word-wrap: break-word;\n    `;\n    notification.textContent = message;\n    return notification;\n}\n/**\n * Remove a notification with animation\n * @param {HTMLElement} notification - The notification element to remove\n */ function $e75b18aae82f997e$var$removeNotification(notification) {\n    notification.style.animation = 'slideIn 0.3s ease-out reverse';\n    setTimeout(()=>{\n        if (notification.parentNode) notification.parentNode.removeChild(notification);\n    }, $e75b18aae82f997e$var$ANIMATION_DURATION_MS);\n}\nfunction $e75b18aae82f997e$export$2e6e6fe5543dc30c(dataPointCount) {\n    $e75b18aae82f997e$var$ensureAnimationStyles();\n    const message = `Session restored! ${dataPointCount} data points recovered.`;\n    const notification = $e75b18aae82f997e$var$createNotificationElement(message, $e75b18aae82f997e$var$NOTIFICATION_COLORS.success);\n    document.body.appendChild(notification);\n    // Remove notification after duration\n    setTimeout(()=>{\n        $e75b18aae82f997e$var$removeNotification(notification);\n    }, $e75b18aae82f997e$var$NOTIFICATION_DURATION_MS);\n}\nfunction $e75b18aae82f997e$export$f7dc72e91f29c7d7(message, type = 'info', duration = $e75b18aae82f997e$var$NOTIFICATION_DURATION_MS) {\n    $e75b18aae82f997e$var$ensureAnimationStyles();\n    const backgroundColor = $e75b18aae82f997e$var$NOTIFICATION_COLORS[type] || $e75b18aae82f997e$var$NOTIFICATION_COLORS.info;\n    const notification = $e75b18aae82f997e$var$createNotificationElement(message, backgroundColor);\n    document.body.appendChild(notification);\n    // Remove notification after specified duration\n    setTimeout(()=>{\n        $e75b18aae82f997e$var$removeNotification(notification);\n    }, duration);\n}\n\n\n/**\n * UI Event Handlers Module\n * Handles all UI event listeners for toggles, menus, and interactions\n */ /**\n * Show application information and usage instructions\n */ function $c8a6253a3b39b109$export$f844e123cf67dae8() {\n    const modal = document.createElement('div');\n    modal.className = 'modal-backdrop';\n    modal.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n    `;\n    const modalContent = document.createElement('div');\n    modalContent.className = 'modal';\n    modalContent.style.cssText = `\n        background: #1a1a2e;\n        border-radius: 12px;\n        padding: 2rem;\n        max-width: 600px;\n        max-height: 80vh;\n        overflow-y: auto;\n        margin: 20px;\n        border: 1px solid rgba(255, 255, 255, 0.2);\n    `;\n    // Create QR code canvas\n    const qrCanvas = document.createElement('canvas');\n    qrCanvas.width = 200;\n    qrCanvas.height = 200;\n    qrCanvas.style.cssText = `\n        background: white;\n        border-radius: 8px;\n        margin: 1rem auto;\n        max-width: 100%;\n        height: auto;\n        display: block;\n    `;\n    modalContent.innerHTML = `\n        <div style=\"text-align: center; margin-bottom: 1.5rem;\">\n            <h2 style=\"color: #3498db; margin: 0 0 0.5rem 0; font-size: 1.8rem;\">\\u{1F6B4} Web Bluetooth Power Meter</h2>\n            <p style=\"color: #cccccc; margin: 0; font-size: 1rem;\">Real-time cycling data analysis</p>\n        </div>\n\n        <div style=\"color: #ffffff; line-height: 1.6;\">\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">\\u{1F4F1} Share This App</h3>\n            <div style=\"text-align: center; margin-bottom: 1rem;\">\n                <div id=\"qr-container\" style=\"margin: 1rem 0;\"></div>\n                <p style=\"color: #ffffff; margin: 0.5rem 0; font-weight: 600;\">Scan to access on any device</p>\n                <a href=\"https://colscoding.github.io/power-saver/\" target=\"_blank\" style=\"\n                    color: #9b59b6; \n                    text-decoration: none; \n                    font-size: 0.9rem;\n                    word-break: break-all;\n                    line-height: 1.4;\n                \">https://colscoding.github.io/power-saver/</a>\n            </div>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">\\u{1F4F1} What is this app?</h3>\n            <p style=\"margin-bottom: 1rem;\">\n                This is a web-based power meter application that connects to Bluetooth devices:\n            </p>\n            <ul style=\"margin: 0 0 1rem 1rem; padding-left: 1rem;\">\n                <li>cycling power meter</li>\n                <li>cadence sensor</li>\n                <li>heart rate sensor</li>\n            </ul>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 2rem;\">\n            <button id=\"closeInfoModal\" style=\"\n                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);\n                color: white;\n                border: none;\n                padding: 12px 24px;\n                border-radius: 8px;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.3s ease;\n            \">Got it!</button>\n        </div>\n    `;\n    // Insert QR code canvas\n    const qrContainer = modalContent.querySelector('#qr-container');\n    qrContainer.appendChild(qrCanvas);\n    // Generate QR code\n    $c8a6253a3b39b109$var$generateQRCode(qrCanvas);\n    modal.appendChild(modalContent);\n    document.body.appendChild(modal);\n    // Close modal event listeners\n    const closeButton = modalContent.querySelector('#closeInfoModal');\n    const closeModal = ()=>{\n        document.body.removeChild(modal);\n    };\n    closeButton.addEventListener('click', closeModal);\n    modal.addEventListener('click', (e)=>{\n        if (e.target === modal) closeModal();\n    });\n    // Close on Escape key\n    const handleEscape = (e)=>{\n        if (e.key === 'Escape') {\n            closeModal();\n            document.removeEventListener('keydown', handleEscape);\n        }\n    };\n    document.addEventListener('keydown', handleEscape);\n    // Add hover effect to button\n    closeButton.addEventListener('mouseenter', ()=>{\n        closeButton.style.transform = 'translateY(-2px)';\n        closeButton.style.boxShadow = '0 8px 24px rgba(52, 152, 219, 0.4)';\n    });\n    closeButton.addEventListener('mouseleave', ()=>{\n        closeButton.style.transform = 'translateY(0)';\n        closeButton.style.boxShadow = 'none';\n    });\n}\n/**\n * Generate QR code on canvas using inline base64 data\n */ function $c8a6253a3b39b109$var$generateQRCode(canvas) {\n    const ctx = canvas.getContext('2d');\n    const size = canvas.width;\n    // Clear canvas with white background\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, size, size);\n    // Base64 encoded QR code data\n    const qrBase64 = 'iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAYAAABccqhmAAAPQ0lEQVR4Aeyd23LjRgxE3fn/f94s6FBlOyYAiuBwLie1Y8kCCDQOkn7R1OafP/wDAQgsS+Cfj7//SPqQ1jp/x778R4qZXW7SYQEpnlvqIyeDT+pDq9RWh7HZDMDecCAAgfUIYADr7ZyJIbARsB8YgFHgQGBRAhjAootnbAgYAQzAKHAgsCgBDGDRxTP22gT26TGAnQSvEFiQQMoA/vz58zHSqdqj5H8v26qP5OuQVCUldR8kapb5dyWqYfFMnSjH6lScqE9v8ezMKQPIFiMPAhAYiwAGMNa+UAuBywS+FsAAvtLgPQQWI4ABLLZwxoXAVwIYwFcavIfAYgQwgMUWzrhrE/g5PQbwkwi/Q2AhAhjAQstmVAj8JFBmAJJSl0ika3k/B7jz9+hyR6a3FM+bqdNKS9QnE8/MU5Uj+Xyr+mTqSL4WqSae0ZLNKTOAbEPyIACBZwj81hUD+I0Kn0FgEQIYwCKLZkwI/EYAA/iNCp9BYBECGMAii2bMtQkcTY8BHJHhcwgsQAADWGDJjAiBIwIYwBEZPofAAgQwAGfJkn9xw3n0FWp1cUbytUp6afLeSGpyoasVF2/WVWLenBiAR4cYBCYngAFMvmDGg4BHAAPw6BCDwOQEMIDJF8x4axOIpscAIkLEITAxAQxg4uUyGgQiAhhARIg4BCYmgAFMvFxGW5tAZnoMwKGUuawS5UjxxZqohsUlv47lRMcZ9RWKalj8lXzwxnKic/Dot48lf2ZJ3/L55TwBDOA8M56AwDQEMIBpVskgEDhPAAM4z4wnINA9gaxADCBLijwITEgAA5hwqYwEgSwBDCBLijwITEgAA5hwqYy0NoEz05cZQPS9b1X8zHBXcyW5fznG1fpnno/4Sb5WSal2ktyZJaXqVCRFM1u8ok9VDdPT4lTptTplBmDFOBCAwFgEMICx9oVaCJQSwABKcVIMAs8SONsdAzhLjHwITEQAA5homYwCgbMEMICzxMiHwEQEMICJlskoaxN4Z3oM4B1qPAOBSQikDEBSeDlE6idnkt18G0Py+WYuoHwrePBLVZ2D8q+PJX8eSa/cHt5ImvK/gZQB9LAANEAAAvUEMIB6plSEQHMC7zbEAN4lx3MQmIAABjDBEhkBAu8SwADeJcdzEJiAAAYwwRIZYW0CV6bHAK7Q41kIDE4AAxh8gciHwBUCmwFkLn/MlpOBFs1cUcN6ZOpU5Fiv6EjxhZdWWjJ9onkqakQ9Ro0bm80A7A0HAhAYj8BVxRjAVYI8D4GBCWAAAy8P6RC4SgADuEqQ5yEwMAEMYODlIX1tAhXTYwAVFKkBgUEJYACDLg7ZEKgggAFUUKQGBAYlsBmAFF/+kPrIyXCW+tAq5XRkZopypFwvyc+ruNQi+T0kReNscUnh38KzJTo/pOs1rLx0vY50vcauRfJrWV7mbAaQSSQHAhCYjwAGMN9OmQgCaQIYQBoViRCYjwAGMN9OmWhyApXjYQCVNKkFgcEIYACDLQy5EKgkgAFU0qQWBAYjkDKAiu+GrUYrNtYrOhktLWpYjwotVqfiZLREORkdkv89tqSozRaX5N4V2JKCH5JfQ1JQ4TMsydWS4fJZ6vinRTJ1JF+LJCv1kTKALZMfEIDAdAQwgOlWykAQyBPAAPKsyITAdAQwgOlWykCzErhjLgzgDqrUhMAgBDCAQRaFTAjcQQADuIMqNSEwCAEMYJBFIXNtAndNvxlAdLFAknvBQcrFM0NEWjI1pFhP1MfimV4VOVKsV/JzMjokv4aUi0e9pLhOVMPitoPoWN7VE/WweKaH5XknU6Mqx9Oxx6zXZgD2hgMBCKxHAANYb+dMDIEXAQzghYI3EOiTwJ2qMIA76VIbAp0TwAA6XxDyIHAnAQzgTrrUhkDnBDCAzheEvLUJ3D09BnA3YepDoGMCKQPYLw54r5kZvef3WKZOlLPX8l6jGhaX/AstlhMdya8hKSqxxb1ZLLYlFfywWtGJ2kTPWzyqYXFJ4QU0y/OO9YqOFPeJalhciutIfo43yx6T/BqS9tTwNWUAYRUSIACBIQlgAEOuDdErEGgxIwbQgjI9INApAQyg08UgCwItCGAALSjTAwKdEsAAOl0MstYm0Gp6DKAVafpAoEMCGECHS0ESBFoR2AxAUnjhQvJzMoIlv4YUx6v6ZOpU5NgFkehU9JHasZPiXpKfk5k54paJV/WR/HkkfUR6Mlqk631MR6aX5WwGYG84EIBAHwRaqsAAWtKmFwQ6I4ABdLYQ5ECgJQEMoCVtekGgMwIYQGcLQc7aBFpPjwG0Jk4/CHREAAPoaBlIgUBrApsB2PeG3qkS5fXYY1Evqe33pJGeKC7V6JX8Ojs/7zXSanHv+T1meS2O5M8stYtn5pV8PTu/q68VWiRtZTYD2N7xAwIQeJTAE80xgCeo0xMCnRDAADpZBDIg8AQBDOAJ6vSEQCcEMIBOFoGMtQk8NT0G8BR5+kKgAwIYQAdLQAIEniKAATxFnr4Q6IBAygAyFxcys0gK/+KRqE5GixT3keKcTK8oJ5onG4/6SDXzSHGdrGYvL5qnZdzTuccyevbco1fpd7bSuc+P6n/9PKs3ZQBfC/MeAhCYhwAGMM8umQQCpwlgAKeR8QAE5iGAAcyzSyYZkMDTkjGApzdAfwg8SAADeBA+rSHwNAEM4OkN0B8CDxLAAB6ET+u1CfQwfZkBZC4eVORI8aWJij5Wo2JBVic6mT6SP3fUw+KZPhU51is6kj+PVBOvmMdqSLGeaOaquBRrMc2ZU2YAmWbkQAACfRHAAPraB2og0JQABtAUN80g8Emgl58YQC+bQAcEHiCAATwAnZYQ6IUABtDLJtABgQcIYAAPQKfl2gR6mh4D6GkbaIFAYwKbAUj+xYIqTZLfR1JJK0mX/+YhEyL5dSwnOpJfQ1JUIhWXVDJzpll0oUWKtUQ1LF6hpaKGacmcqJcUc5HinAotu9bNAPZfeIUABNYigAGstW+mfZhAb+0xgN42gh4INCSAATSETSsI9EYAA+htI+iBQEMCGEBD2LRam0CP02MAPW4FTRBoRCBlAFL83WSVXsnvlemT+Z5U8vtIyrRqlhPNVCUk6mNxSe6dg4wWya8hKVMmzJHkapXaxY1ddMKBkglSPJeVShmAJXIgAIH5CGAA8+2UiTok0KskDKDXzaALAg0IYAANINMCAr0SwAB63Qy6INCAAAbQADIt1ibQ8/QYQM/bQRsEbiaAAdwMmPIQ6JlAygCiywsWl3IXDyIYVuvqkdpokeI+mVmkuI7k50RcLS75NaRc3Gp5JzOz9/wey9SRfM2ZGpmcXZP3GtXxnq2ORVosbj1TBmCJHAhA4DyB3p/AAHrfEPogcCMBDOBGuJSGQO8EMIDeN4Q+CNxIAAO4ES6l1yYwwvQYwAhbQiMEbiKAAdwElrIQGIEABjDCltAIgZsIlBmAXSyIzk0z/K9spCMb/1/hHx9k6vx45O1fM72inEzzqIbFM3WiHKsTHcm/5CMpapP624DCIm8kvPtIxMTiksK5sv3LDCDbkDwIQKAfAhhAP7tACQSaE8AAmiOnIQT6IYAB9LMLlExCYKQxMICRtoVWCBQTwACKgVIOAiMRwABG2hZaIVBMAAMoBkq5tQmMNn2ZAUg1lxOkuI50PSezKOl6HymukdFSkWOXSKIjXdcrXa9h80ZaLW55V49Uo1fy62R0Sn4NSZky4UUh6bNOmQGkVJEEAQh0RQAD6GodiIFAWwIYQFvedJuYwIijYQAjbg3NECgigAEUgaQMBEYkgAGMuDU0Q6CIAAZQBJIyaxMYdfrNAOz7VO9khvOe7zGWmSnKycwV1bB4po6k1He70nGe9YpORktUIxOXjnVKn7FMnSgnM09VTqRF+pxLOn6NalTHNwOoLko9CEBgDAIYwBh7QiUEbiGAAdyClaIrERh5Vgxg5O2hHQIXCWAAFwHyOARGJoABjLw9tEPgIgEM4CJAHl+bwOjTYwCjbxD9ELhAYDMA6fhigjRn7AKz16NSzCZzyeRV0HkT1XEefYWkWK8U57wKXngTzWNxqY0WqU2fC7i+PWpsKo4V3QzA3nAgAIH1CGAA6+2ciYsIzFAGA5hhi8wAgTcJYABvguMxCMxAAAOYYYvMAIE3CWAAb4LjsbUJzDI9BjDLJpkDAm8QwADegMYjEJiFQMoAKi4dtKxRtZxIc6aPVHPJRPLrZLRE82TjUa9MnahGy3grvZk+mZxKNikDqGxILQiMTmAm/RjATNtkFgicJIABnARGOgRmIoABzLRNZoHASQIYwElgpK9NYLbpMYDZNso8EDhBAAM4AYtUCMxGAAOYbaPMA4ETBMoMQPIvqkg18ROzXU6VfM2tL214A2W0SP48krwWr1jUS9Ll/42ZpI+oj8Vfog7eSDVaJH1E50DCqY+jHpVxE1ZmAFaMAwEIjEUAAxhrX6iFQCkBDKAUJ8UgMBYBDGCsfaH2IQKztsUAZt0sc0EgQQADSEAiBQKzEsAAZt0sc0EgQQADSEA6Ssl8J3v07NnP7Ttv72Tqec/vsUydaO5MjVY5+1xXXquejbhZvBWXvQ8GsJPgFQILEsAAFlw6I0NgJ4AB7CR4hcCCBDCABZfOyHkCs2diALNvmPkg4BDAABw4hCAwOwEMYPYNMx8EHAIYgAOH0NoEVpgeA7iw5ZYXROySiHcujPHtUa/HHovm/lbw4JeohsX3ft7rQfnXx96zrWMvUQ3eGL/omAwMwChwILAoAQxg0cUzNgSMAAZgFDgQ+EFglV8xgFU2zZwQ+IUABvALFD6CwCoEMIBVNs2cEPiFAAbwCxQ+WpvAStNjACttm1kh8INAmQFElw6q4j/0d/9r5rJJZoiIX6ZGlZaoV6TV4lENi1tedCyvl1OhNaph8cp5ywygUhS1IACBNgQwgDac6TIIgdVkYgCrbZx5IfCFAAbwBQZvIbAaAQxgtY0zLwS+EMAAvsDg7doEVpweA1hx68wMgf8IYAD/geAFAisSSBlA5gJJTzk9LdIubkSnld5Ih8UzWip2XdXHNPdyIi4ZnVENi2fqZPhaTsoALJEDgZkJrDobBrDq5pkbAn8JYAB/IfAHAqsSwABW3TxzQ+AvAQzgLwT+rE1g5ekxgJW3z+zLE8AAlv9XAAArE8AAVt4+sy9PYDOAzMWC2XIym49mztTI5ER9LJ6pU5FjvVqcjNaMjkwdL6cyFunN9IpqWDxTJ5vzLwAAAP///Iym8wAAAAZJREFUAwAOmzCWYdFLzgAAAABJRU5ErkJggg==';\n    // Load base64 encoded QR code\n    const img = new Image();\n    img.onload = function() {\n        ctx.drawImage(img, 0, 0, size, size);\n    };\n    img.onerror = function() {\n        // Fallback: draw a simple pattern if base64 data fails to load\n        $c8a6253a3b39b109$var$drawFallbackQR(ctx, size);\n    };\n    img.src = 'data:image/png;base64,' + qrBase64;\n}\n/**\n * Fallback QR code representation when local image is unavailable\n */ function $c8a6253a3b39b109$var$drawFallbackQR(ctx, size) {\n    ctx.fillStyle = '#000000';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    // Draw a simple grid pattern\n    const cellSize = size / 25;\n    for(let i = 0; i < 25; i++){\n        for(let j = 0; j < 25; j++)if ((i + j) % 3 === 0 || i === 0 || i === 24 || j === 0 || j === 24) ctx.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);\n    }\n    // Add text in center\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(size * 0.2, size * 0.4, size * 0.6, size * 0.2);\n    ctx.fillStyle = '#000000';\n    ctx.fillText('QR Code', size / 2, size / 2 - 10);\n    ctx.fillText('Unavailable', size / 2, size / 2 + 10);\n}\n\n\nfunction $d455cb11b3bc64fd$export$81e17204574dbb93(elements) {\n    if (!elements.hamburgerBtn || !elements.menuDropdown) {\n        console.error('Hamburger menu elements not found:', {\n            hamburgerBtn: !!elements.hamburgerBtn,\n            menuDropdown: !!elements.menuDropdown\n        });\n        return;\n    }\n    // Hamburger menu functionality\n    elements.hamburgerBtn.addEventListener('click', function() {\n        const isActive = elements.menuDropdown.classList.contains('active');\n        if (isActive) elements.menuDropdown.classList.remove('active');\n        else elements.menuDropdown.classList.add('active');\n    });\n    // Close menu when clicking outside\n    document.addEventListener('click', function(event) {\n        if (!event.target.closest('.hamburger-menu')) elements.menuDropdown.classList.remove('active');\n    });\n}\nfunction $d455cb11b3bc64fd$export$66f401d4d3f34334(elements) {\n    // Info functionality\n    if (elements.showInfoMenuItem) elements.showInfoMenuItem.addEventListener('click', function() {\n        (0, $c8a6253a3b39b109$export$f844e123cf67dae8)();\n        // Close the menu after showing info\n        if (elements.menuDropdown) elements.menuDropdown.classList.remove('active');\n    });\n    else console.error('Show info menu item not found');\n}\n/**\n * Function to update dashboard layout based on visible sections\n */ function $d455cb11b3bc64fd$var$updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const powerAveragesSection = document.getElementById('powerAveragesSection');\n    const powerAveragesHidden = powerAveragesSection && powerAveragesSection.style.display === 'none';\n    if (dashboard) {\n        if (powerAveragesHidden) dashboard.classList.add('maximized');\n        else dashboard.classList.remove('maximized');\n    }\n    // Manage horizontal layout for collapsed sections (excluding bottom controls)\n    $d455cb11b3bc64fd$var$manageCollapsedSectionsLayout();\n}\n/**\n * Function to manage horizontal layout of collapsed sections\n */ function $d455cb11b3bc64fd$var$manageCollapsedSectionsLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    if (!dashboard) return;\n    // Only manage power averages section for collapsed layout -\n    // connect and export sections are now bottom controls and stay at bottom\n    // Note: collapsedSections logic simplified since only power averages section is managed now\n    // Remove any existing collapsed sections row\n    const existingRow = document.querySelector('.collapsed-sections-row');\n    if (existingRow) {\n        // Move sections back to their original positions\n        const sectionsInRow = existingRow.querySelectorAll('.power-averages-section');\n        sectionsInRow.forEach((section)=>{\n            // Insert sections back after the dashboard\n            dashboard.parentNode.insertBefore(section, dashboard.nextSibling);\n        });\n        existingRow.remove();\n    }\n    // Power averages section doesn't need horizontal grouping since it's the only\n    // section that can be managed this way now\n    dashboard.classList.remove('has-collapsed-sections');\n}\nfunction $d455cb11b3bc64fd$export$8edd2f9a38e90f85(elements) {\n    // Initialize power averages section as visible by default\n    if (elements.powerAveragesSection) elements.powerAveragesSection.style.display = 'block';\n    $d455cb11b3bc64fd$var$updateDashboardLayout();\n}\n\n\n/**\n * Metric Icon Handlers\n * Handles click events on metric icons to show information\n */ /**\n * Show a modal with metric information\n * @param {string} title - The title of the modal\n * @param {string} description - The description text\n */ function $0bb0154a5714c8a0$var$showMetricInfo(title, description) {\n    // Create modal elements\n    const modal = document.createElement('div');\n    modal.className = 'metric-info-modal';\n    modal.innerHTML = `\n        <div class=\"metric-info-content\">\n            <div class=\"metric-info-header\">\n                <h3>${title}</h3>\n                <button class=\"metric-info-close\" aria-label=\"Close\">\\xd7</button>\n            </div>\n            <div class=\"metric-info-body\">\n                <p>${description}</p>\n            </div>\n        </div>\n    `;\n    // Add to DOM\n    document.body.appendChild(modal);\n    // Trigger animation\n    setTimeout(()=>modal.classList.add('active'), 10);\n    // Close handlers\n    const closeBtn = modal.querySelector('.metric-info-close');\n    const closeModal = ()=>{\n        modal.classList.remove('active');\n        setTimeout(()=>modal.remove(), 300);\n    };\n    closeBtn.addEventListener('click', closeModal);\n    modal.addEventListener('click', (e)=>{\n        if (e.target === modal) closeModal();\n    });\n    // ESC key to close\n    const handleEsc = (e)=>{\n        if (e.key === 'Escape') {\n            closeModal();\n            document.removeEventListener('keydown', handleEsc);\n        }\n    };\n    document.addEventListener('keydown', handleEsc);\n}\nfunction $0bb0154a5714c8a0$export$f3cde82772a9ce5b() {\n    // Power icon\n    const powerIcon = document.getElementById('powerIcon');\n    if (powerIcon) powerIcon.addEventListener('click', (e)=>{\n        e.preventDefault();\n        $0bb0154a5714c8a0$var$showMetricInfo(\"\\u26A1 Power Output\", \"Power output is measured in Watts and represents the amount of work you are doing on the bike. It is calculated by measuring the force applied to the pedals and the speed of pedaling. Higher power output means you are working harder. This metric is the most accurate way to measure cycling effort.\");\n    });\n    // Heart Rate icon\n    const hrIcon = document.getElementById('hrIcon');\n    if (hrIcon) hrIcon.addEventListener('click', (e)=>{\n        e.preventDefault();\n        $0bb0154a5714c8a0$var$showMetricInfo(\"\\u2764\\uFE0F Heart Rate\", \"Heart rate is measured in beats per minute (BPM) and indicates how hard your cardiovascular system is working. Your heart rate increases as exercise intensity increases. Monitoring heart rate helps you train in specific zones for different fitness goals. Connect a Bluetooth heart rate monitor to track this metric.\");\n    });\n    // Cadence icon\n    const cadenceIcon = document.getElementById('cadenceIcon');\n    if (cadenceIcon) cadenceIcon.addEventListener('click', (e)=>{\n        e.preventDefault();\n        $0bb0154a5714c8a0$var$showMetricInfo(\"\\uD83D\\uDEB4 Cadence\", \"Cadence is measured in revolutions per minute (RPM) and represents how fast you are pedaling. Most cyclists aim for a cadence between 80-100 RPM for optimal efficiency. Higher cadence with lower resistance can reduce muscle fatigue, while lower cadence with higher resistance builds strength. Connect a speed & cadence sensor to track this metric.\");\n    });\n}\n\n\n// Application state variables\nlet $b63be9b0371e788c$var$powerData = [];\nlet $b63be9b0371e788c$var$lastPowerValue = 0;\nlet $b63be9b0371e788c$var$lastHeartRateValue = 0;\nlet $b63be9b0371e788c$var$lastCadenceValue = 0;\nlet $b63be9b0371e788c$var$sessionStartTime = null;\nlet $b63be9b0371e788c$var$dataLoggerInterval = null;\nlet $b63be9b0371e788c$var$periodicSaveInterval = null;\nlet $b63be9b0371e788c$var$sessionRestored = false; // Track if session was restored\n// Connection state tracking\nlet $b63be9b0371e788c$var$powerMeterConnecting = false;\nlet $b63be9b0371e788c$var$heartRateConnecting = false;\nlet $b63be9b0371e788c$var$speedCadenceConnecting = false;\n// Constants for data logging\nconst $b63be9b0371e788c$var$DATA_LOGGER_INTERVAL_MS = 100; // Log data every 100ms\nconst $b63be9b0371e788c$var$SESSION_SAVE_INTERVAL = 100; // Save session every 100 readings (10 seconds)\nconst $b63be9b0371e788c$var$PERIODIC_SAVE_INTERVAL_MS = 30000; // Save session every 30 seconds as backup\n/**\n * Update displays after restoring session data\n */ function $b63be9b0371e788c$var$updateDisplaysFromRestoredData() {\n    // Update current metric values\n    (0, $26bf0f38c1315f82$export$3c5e864d031b110c)({\n        power: $b63be9b0371e788c$var$lastPowerValue,\n        heartRate: $b63be9b0371e788c$var$lastHeartRateValue,\n        cadence: $b63be9b0371e788c$var$lastCadenceValue\n    });\n    // Update power averages display\n    (0, $d8d8e1ee9f4f63bb$export$890cc05f11700e2c)();\n    // Show session restoration notification\n    if ($b63be9b0371e788c$var$powerData.length > 0) (0, $e75b18aae82f997e$export$2e6e6fe5543dc30c)($b63be9b0371e788c$var$powerData.length);\n}\n/**\n * Reset all session data\n */ function $b63be9b0371e788c$var$resetAllSessionData() {\n    // Clear all data arrays\n    $b63be9b0371e788c$var$powerData.length = 0;\n    // Reset power averages\n    (0, $d8d8e1ee9f4f63bb$export$153010588d52d05c)();\n    // Reset last values\n    $b63be9b0371e788c$var$lastPowerValue = 0;\n    $b63be9b0371e788c$var$lastHeartRateValue = 0;\n    $b63be9b0371e788c$var$lastCadenceValue = 0;\n    $b63be9b0371e788c$var$sessionStartTime = null;\n    $b63be9b0371e788c$var$sessionRestored = false;\n    // Update displays\n    (0, $26bf0f38c1315f82$export$d9870def68db0ffb)();\n    // Clear localStorage\n    (0, $cc35ee5c64337d79$export$37b6cafab9b29f47)();\n}\n/**\n * Data store object to pass to modules that need access to application data\n */ const $b63be9b0371e788c$var$dataStore = {\n    get powerData () {\n        return $b63be9b0371e788c$var$powerData;\n    },\n    get lastPowerValue () {\n        return $b63be9b0371e788c$var$lastPowerValue;\n    },\n    get lastHeartRateValue () {\n        return $b63be9b0371e788c$var$lastHeartRateValue;\n    },\n    get lastCadenceValue () {\n        return $b63be9b0371e788c$var$lastCadenceValue;\n    },\n    get sessionStartTime () {\n        return $b63be9b0371e788c$var$sessionStartTime;\n    },\n    resetAllSessionData: $b63be9b0371e788c$var$resetAllSessionData,\n    elements: $26bf0f38c1315f82$export$7a5d735b2ab6389d\n};\n// Bluetooth connection callbacks\nconst $b63be9b0371e788c$var$powerMeterCallbacks = {\n    onPowerMeasurement: (power)=>{\n        (0, $26bf0f38c1315f82$export$38408f60e368349d)(power);\n        $b63be9b0371e788c$var$lastPowerValue = power;\n        // Add power reading to averaging calculations\n        (0, $d8d8e1ee9f4f63bb$export$3f67e616c0b42d09)(power);\n    },\n    onDisconnected: ()=>{\n        (0, $26bf0f38c1315f82$export$d9870def68db0ffb)();\n        // Only reset power averages if we don't have historical data\n        if ($b63be9b0371e788c$var$powerData.length === 0) (0, $d8d8e1ee9f4f63bb$export$153010588d52d05c)();\n        if ($b63be9b0371e788c$var$dataLoggerInterval) {\n            clearInterval($b63be9b0371e788c$var$dataLoggerInterval);\n            $b63be9b0371e788c$var$dataLoggerInterval = null;\n        }\n        $b63be9b0371e788c$var$lastPowerValue = 0;\n        $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    },\n    onStatusUpdate: (message)=>{\n        if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).statusText) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).statusText.textContent = message;\n    }\n};\nconst $b63be9b0371e788c$var$heartRateCallbacks = {\n    onHeartRateChange: (heartRate)=>{\n        if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrValueElement) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrValueElement.textContent = heartRate;\n        $b63be9b0371e788c$var$lastHeartRateValue = heartRate;\n    },\n    onStatusUpdate: (message)=>{\n        if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrStatusText) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrStatusText.textContent = message;\n    },\n    onDisconnected: ()=>{\n        $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    }\n};\nconst $b63be9b0371e788c$var$cadenceCallbacks = {\n    onCadenceChange: (cadence)=>{\n        if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).cadenceValueElement) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).cadenceValueElement.textContent = cadence;\n        $b63be9b0371e788c$var$lastCadenceValue = cadence;\n    },\n    onStatusUpdate: (message)=>{\n        if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).cadenceStatusText) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).cadenceStatusText.textContent = message;\n    },\n    onDisconnected: ()=>{\n        $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    }\n};\n/**\n * Update all connect button visibility based on current connection states\n */ function $b63be9b0371e788c$var$updateAllConnectButtonVisibility() {\n    (0, $26bf0f38c1315f82$export$4d13f4433b58a96)({\n        powerMeter: (0, $67670bb3fd2c11fb$export$3aa2dffa9bc119b1)(),\n        heartRate: (0, $fe739546a31d388a$export$e8a0920d368e1227)(),\n        speedCadence: (0, $67670bb3fd2c11fb$export$3508b7cf9f8826e8)()\n    });\n}\n/**\n * Setup connection button event listeners\n */ function $b63be9b0371e788c$var$setupConnectionEventListeners() {\n    // Power meter connection\n    if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).powerMeterConnectButton) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).powerMeterConnectButton.addEventListener('click', async ()=>{\n        // Check if currently connecting - if so, cancel the connection attempt\n        if ($b63be9b0371e788c$var$powerMeterConnecting) {\n            $b63be9b0371e788c$var$powerMeterConnecting = false;\n            (0, $26bf0f38c1315f82$export$c17ef08f48962999)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).powerMeterConnectButton, false);\n            $b63be9b0371e788c$var$powerMeterCallbacks.onStatusUpdate('Connection cancelled');\n            return;\n        }\n        // Check if already connected - if so, show disconnect confirmation\n        if ((0, $67670bb3fd2c11fb$export$3aa2dffa9bc119b1)()) {\n            const shouldDisconnect = confirm('Disconnect power meter?');\n            if (shouldDisconnect) (0, $67670bb3fd2c11fb$export$f70db003224cf603)();\n            return;\n        }\n        // Only reset data if session was not restored\n        if (!$b63be9b0371e788c$var$sessionRestored) {\n            $b63be9b0371e788c$var$powerData.length = 0;\n            $b63be9b0371e788c$var$lastPowerValue = 0;\n            (0, $d8d8e1ee9f4f63bb$export$153010588d52d05c)();\n        }\n        if ($b63be9b0371e788c$var$dataLoggerInterval) clearInterval($b63be9b0371e788c$var$dataLoggerInterval);\n        // Set connecting state\n        $b63be9b0371e788c$var$powerMeterConnecting = true;\n        (0, $26bf0f38c1315f82$export$c17ef08f48962999)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).powerMeterConnectButton, true);\n        const connected = await (0, $67670bb3fd2c11fb$export$7cd63989f2e13954)($b63be9b0371e788c$var$powerMeterCallbacks, (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n        // Clear connecting state\n        $b63be9b0371e788c$var$powerMeterConnecting = false;\n        (0, $26bf0f38c1315f82$export$c17ef08f48962999)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).powerMeterConnectButton, false);\n        if (connected) {\n            // Start session if this is the first connection and no session was restored\n            if (!$b63be9b0371e788c$var$sessionStartTime) $b63be9b0371e788c$var$sessionStartTime = Date.now();\n            // Start data logging\n            $b63be9b0371e788c$var$dataLoggerInterval = setInterval(()=>{\n                $b63be9b0371e788c$var$powerData.push({\n                    timestamp: Date.now(),\n                    power: $b63be9b0371e788c$var$lastPowerValue,\n                    heartRate: $b63be9b0371e788c$var$lastHeartRateValue,\n                    cadence: $b63be9b0371e788c$var$lastCadenceValue\n                });\n                // Save session data periodically (every 100 readings = 10 seconds)\n                if ($b63be9b0371e788c$var$powerData.length % $b63be9b0371e788c$var$SESSION_SAVE_INTERVAL === 0) (0, $cc35ee5c64337d79$export$3b97cfd23e0d13d8)($b63be9b0371e788c$var$dataStore);\n            }, $b63be9b0371e788c$var$DATA_LOGGER_INTERVAL_MS);\n            // Clear the sessionRestored flag after first connection\n            $b63be9b0371e788c$var$sessionRestored = false;\n            // Update button visibility\n            $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n        }\n    });\n    // Heart rate monitor connection\n    if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrConnectButton) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrConnectButton.addEventListener('click', async ()=>{\n        // Check if currently connecting - if so, cancel the connection attempt\n        if ($b63be9b0371e788c$var$heartRateConnecting) {\n            $b63be9b0371e788c$var$heartRateConnecting = false;\n            (0, $26bf0f38c1315f82$export$c17ef08f48962999)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrConnectButton, false);\n            $b63be9b0371e788c$var$heartRateCallbacks.onStatusUpdate('Connection cancelled');\n            return;\n        }\n        // Check if already connected - if so, show disconnect confirmation\n        if ((0, $fe739546a31d388a$export$e8a0920d368e1227)()) {\n            const shouldDisconnect = confirm('Disconnect heart rate monitor?');\n            if (shouldDisconnect) (0, $fe739546a31d388a$export$93b781bfb49be82f)();\n            return;\n        }\n        // Set connecting state\n        $b63be9b0371e788c$var$heartRateConnecting = true;\n        (0, $26bf0f38c1315f82$export$c17ef08f48962999)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrConnectButton, true);\n        const connected = await (0, $fe739546a31d388a$export$830e9b592dbab083)($b63be9b0371e788c$var$heartRateCallbacks, (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n        // Clear connecting state\n        $b63be9b0371e788c$var$heartRateConnecting = false;\n        (0, $26bf0f38c1315f82$export$c17ef08f48962999)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrConnectButton, false);\n        if (connected) $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    });\n    // Speed/cadence sensor connection\n    if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).speedCadenceConnectButton) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).speedCadenceConnectButton.addEventListener('click', async ()=>{\n        // Check if currently connecting - if so, cancel the connection attempt\n        if ($b63be9b0371e788c$var$speedCadenceConnecting) {\n            $b63be9b0371e788c$var$speedCadenceConnecting = false;\n            (0, $26bf0f38c1315f82$export$c17ef08f48962999)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).speedCadenceConnectButton, false);\n            speedCadenceCallbacks.onStatusUpdate('Connection cancelled');\n            return;\n        }\n        // Check if already connected - if so, show disconnect confirmation\n        if ((0, $67670bb3fd2c11fb$export$3508b7cf9f8826e8)()) {\n            const shouldDisconnect = confirm('Disconnect cadence sensor?');\n            if (shouldDisconnect) (0, $67670bb3fd2c11fb$export$2b2e150fd067be82)();\n            return;\n        }\n        // Set connecting state\n        $b63be9b0371e788c$var$speedCadenceConnecting = true;\n        (0, $26bf0f38c1315f82$export$c17ef08f48962999)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).speedCadenceConnectButton, true);\n        const connected = await (0, $67670bb3fd2c11fb$export$15696ad475844a91)(speedCadenceCallbacks, (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n        // Clear connecting state\n        $b63be9b0371e788c$var$speedCadenceConnecting = false;\n        (0, $26bf0f38c1315f82$export$c17ef08f48962999)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).speedCadenceConnectButton, false);\n        if (connected) $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    });\n}\n/**\n * Session restoration functionality\n */ /**\n * Show restoration dialog to let user choose\n */ function $b63be9b0371e788c$var$showRestorationDialog(sessionData) {\n    return new Promise((resolve)=>{\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n        // Create modal dialog\n        const modal = document.createElement('div');\n        modal.className = 'modal';\n        // Get session info\n        const sessionAge = Math.round((Date.now() - sessionData.timestamp) / 60000); // minutes\n        const dataCount = sessionData.powerData?.length || 0;\n        modal.innerHTML = `\n      <h3>Previous Session Found</h3>\n      <p>\n        A previous session was found from ${sessionAge} minutes ago with ${dataCount} data points.\n      </p>\n      <p>\n        Would you like to restore this session or start fresh?\n      </p>\n      <div class=\"modal-buttons\">\n        <button id=\"startFresh\" class=\"modal-button secondary\">Start Fresh</button>\n        <button id=\"restoreSession\" class=\"modal-button primary\">Restore Session</button>\n      </div>\n    `;\n        backdrop.appendChild(modal);\n        document.body.appendChild(backdrop);\n        // Handle button clicks\n        modal.querySelector('#startFresh').addEventListener('click', ()=>{\n            document.body.removeChild(backdrop);\n            (0, $cc35ee5c64337d79$export$37b6cafab9b29f47)();\n            $b63be9b0371e788c$var$sessionRestored = false;\n            resolve(false);\n        });\n        modal.querySelector('#restoreSession').addEventListener('click', ()=>{\n            document.body.removeChild(backdrop);\n            resolve(true);\n        });\n        // Handle backdrop click\n        backdrop.addEventListener('click', (e)=>{\n            if (e.target === backdrop) {\n                document.body.removeChild(backdrop);\n                $b63be9b0371e788c$var$sessionRestored = false;\n                resolve(false);\n            }\n        });\n    });\n}\n/**\n * Apply session data to restore the session\n */ function $b63be9b0371e788c$var$restoreSessionData(sessionData) {\n    try {\n        // Restore data arrays\n        if (sessionData.powerData) {\n            $b63be9b0371e788c$var$powerData.length = 0;\n            $b63be9b0371e788c$var$powerData.push(...sessionData.powerData);\n        }\n        // Restore last values\n        if (sessionData.lastPowerValue !== undefined) $b63be9b0371e788c$var$lastPowerValue = sessionData.lastPowerValue;\n        if (sessionData.lastHeartRateValue !== undefined) $b63be9b0371e788c$var$lastHeartRateValue = sessionData.lastHeartRateValue;\n        if (sessionData.lastCadenceValue !== undefined) $b63be9b0371e788c$var$lastCadenceValue = sessionData.lastCadenceValue;\n        if (sessionData.sessionStartTime !== undefined) $b63be9b0371e788c$var$sessionStartTime = sessionData.sessionStartTime;\n        // Mark that session was restored\n        $b63be9b0371e788c$var$sessionRestored = true;\n        // Update displays with restored data\n        $b63be9b0371e788c$var$updateDisplaysFromRestoredData();\n        console.log(`Session restored: ${$b63be9b0371e788c$var$powerData.length} data points from ${new Date($b63be9b0371e788c$var$sessionStartTime).toLocaleString()}`);\n        return true;\n    } catch (error) {\n        console.warn('Failed to restore session data:', error);\n        return false;\n    }\n}\n/**\n * Initialize the application\n */ async function $b63be9b0371e788c$var$initializeApp() {\n    try {\n        // Initialize all modules and DOM elements\n        (0, $26bf0f38c1315f82$export$a57455d21a15702b)();\n        (0, $d8d8e1ee9f4f63bb$export$38b6955d4a0211f4)();\n        (0, $d455cb11b3bc64fd$export$8edd2f9a38e90f85)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n        (0, $0bb0154a5714c8a0$export$f3cde82772a9ce5b)();\n        // Setup all event listeners\n        (0, $d455cb11b3bc64fd$export$81e17204574dbb93)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n        (0, $d455cb11b3bc64fd$export$66f401d4d3f34334)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n        $b63be9b0371e788c$var$setupConnectionEventListeners();\n        (0, $1fea2fc27e5705f2$export$313373f1d10aa459)($b63be9b0371e788c$var$dataStore);\n        (0, $5b4eaaddc8f9222a$export$683ef427d6d6293b)($b63be9b0371e788c$var$dataStore);\n        // Initialize connect button visibility based on current connection states\n        $b63be9b0371e788c$var$updateAllConnectButtonVisibility(); // Try to load previous session data\n        const sessionData = (0, $cc35ee5c64337d79$export$5ae208508f6870b)();\n        if (sessionData) {\n            // Show restoration dialog\n            const shouldRestore = await $b63be9b0371e788c$var$showRestorationDialog(sessionData);\n            if (shouldRestore) $b63be9b0371e788c$var$restoreSessionData(sessionData);\n            else $b63be9b0371e788c$var$sessionStartTime = Date.now();\n        } else $b63be9b0371e788c$var$sessionStartTime = Date.now();\n        // Save session data when page is about to be closed/refreshed\n        window.addEventListener('beforeunload', $b63be9b0371e788c$var$handleAppCleanup);\n        // Save session data periodically (every 30 seconds as backup)\n        $b63be9b0371e788c$var$periodicSaveInterval = setInterval(()=>{\n            if ($b63be9b0371e788c$var$powerData.length > 0) (0, $cc35ee5c64337d79$export$3b97cfd23e0d13d8)($b63be9b0371e788c$var$dataStore);\n        }, $b63be9b0371e788c$var$PERIODIC_SAVE_INTERVAL_MS);\n    } catch (error) {\n        console.error('Failed to initialize application:', error);\n        alert('Failed to initialize application. Please refresh the page.');\n    }\n}\n/**\n * Clean up resources when app is closing\n */ function $b63be9b0371e788c$var$handleAppCleanup() {\n    // Save session data\n    if ($b63be9b0371e788c$var$powerData.length > 0) (0, $cc35ee5c64337d79$export$3b97cfd23e0d13d8)($b63be9b0371e788c$var$dataStore);\n    // Clear intervals\n    if ($b63be9b0371e788c$var$dataLoggerInterval) {\n        clearInterval($b63be9b0371e788c$var$dataLoggerInterval);\n        $b63be9b0371e788c$var$dataLoggerInterval = null;\n    }\n    if ($b63be9b0371e788c$var$periodicSaveInterval) {\n        clearInterval($b63be9b0371e788c$var$periodicSaveInterval);\n        $b63be9b0371e788c$var$periodicSaveInterval = null;\n    }\n}\n/**\n * Prevent accidental pull-to-refresh\n * Ask user for confirmation before refreshing the page\n */ function $b63be9b0371e788c$var$preventAccidentalRefresh() {\n    let startY = 0;\n    let isPulling = false;\n    // Prevent pull-to-refresh gesture on mobile\n    document.body.addEventListener('touchstart', (e)=>{\n        if (window.scrollY === 0) {\n            startY = e.touches[0].pageY;\n            isPulling = true;\n        }\n    }, {\n        passive: true\n    });\n    document.body.addEventListener('touchmove', (e)=>{\n        if (isPulling && window.scrollY === 0) {\n            const currentY = e.touches[0].pageY;\n            const pullDistance = currentY - startY;\n            // If pulling down more than 10px, prevent default\n            if (pullDistance > 10) e.preventDefault();\n        }\n    }, {\n        passive: false\n    });\n    document.body.addEventListener('touchend', ()=>{\n        isPulling = false;\n    });\n    // Prevent default browser refresh behavior\n    window.addEventListener('beforeunload', (e)=>{\n        // Only ask for confirmation if there's active data\n        if ($b63be9b0371e788c$var$powerData.length > 0 || (0, $67670bb3fd2c11fb$export$3aa2dffa9bc119b1)() || (0, $fe739546a31d388a$export$e8a0920d368e1227)() || (0, $67670bb3fd2c11fb$export$3508b7cf9f8826e8)()) {\n            const message = 'You have active data or connections. Are you sure you want to refresh?';\n            e.preventDefault();\n            e.returnValue = message;\n            return message;\n        }\n    });\n    // Add CSS to prevent overscroll on body\n    document.body.style.overscrollBehavior = 'contain';\n}\n// Initialize the application when DOM is ready\ndocument.addEventListener('DOMContentLoaded', ()=>{\n    $b63be9b0371e788c$var$initializeApp();\n    $b63be9b0371e788c$var$preventAccidentalRefresh();\n});\n// Initialize PWA features (service worker, install prompt)\n(0, $c9a4bb8cb8ea0795$export$6e550932cf61c00f)();\n\n\n//# sourceMappingURL=power-saver.3dfe71ae.js.map\n","/**\n * Power Saver Main Application\n * Coordinates all modules and manages the application state\n */\n\n// Import all required modules\nimport { initializePWA } from \"./pwa-install.js\";\nimport { loadSessionData, saveSessionData, clearSessionData } from \"./session-data.js\";\nimport {\n  initializePowerAveraging,\n  addPowerReading,\n  resetPowerAverages,\n  updatePowerAveragesDisplay,\n} from \"./power-averaging.js\";\nimport {\n  elements,\n  initializeElements,\n  updatePowerValue,\n  updateMetricDisplays,\n  resetMetricDisplays,\n  updateConnectButtonVisibility,\n  setButtonConnectingState\n} from \"./ui-management.js\";\nimport {\n  connectPowerMeter,\n  connectHeartRateMonitor,\n  connectSpeedCadenceSensor,\n  isPowerMeterConnected,\n  isHeartRateConnected,\n  isSpeedCadenceConnected,\n  disconnectPowerMeter,\n  disconnectHeartRate,\n  disconnectSpeedCadence\n} from \"./bluetooth-connections.js\";\nimport { setupExportMenuListeners } from \"./export-modals.js\";\nimport { setupUtilityMenuListeners } from \"./utility-modals.js\";\nimport { showSessionRestoredNotification } from \"./notifications.js\";\nimport {\n  setupHamburgerMenu,\n  setupMenuItems,\n  initializeSections\n} from \"./ui-event-handlers.js\";\nimport { initializeMetricIcons } from \"./metric-icons.js\";\n\n// Application state variables\nlet powerData = [];\nlet lastPowerValue = 0;\nlet lastHeartRateValue = 0;\nlet lastCadenceValue = 0;\nlet sessionStartTime = null;\nlet dataLoggerInterval = null;\nlet periodicSaveInterval = null;\nlet sessionRestored = false; // Track if session was restored\n\n// Connection state tracking\nlet powerMeterConnecting = false;\nlet heartRateConnecting = false;\nlet speedCadenceConnecting = false;\n\n// Constants for data logging\nconst DATA_LOGGER_INTERVAL_MS = 100; // Log data every 100ms\nconst SESSION_SAVE_INTERVAL = 100; // Save session every 100 readings (10 seconds)\nconst PERIODIC_SAVE_INTERVAL_MS = 30000; // Save session every 30 seconds as backup\n\n/**\n * Update displays after restoring session data\n */\nfunction updateDisplaysFromRestoredData() {\n  // Update current metric values\n  updateMetricDisplays({\n    power: lastPowerValue,\n    heartRate: lastHeartRateValue,\n    cadence: lastCadenceValue\n  });\n\n  // Update power averages display\n  updatePowerAveragesDisplay();\n\n  // Show session restoration notification\n  if (powerData.length > 0) {\n    showSessionRestoredNotification(powerData.length);\n  }\n}\n\n/**\n * Reset all session data\n */\nfunction resetAllSessionData() {\n  // Clear all data arrays\n  powerData.length = 0;\n\n  // Reset power averages\n  resetPowerAverages();\n\n  // Reset last values\n  lastPowerValue = 0;\n  lastHeartRateValue = 0;\n  lastCadenceValue = 0;\n  sessionStartTime = null;\n  sessionRestored = false;\n\n  // Update displays\n  resetMetricDisplays();\n\n  // Clear localStorage\n  clearSessionData();\n}\n\n/**\n * Data store object to pass to modules that need access to application data\n */\nconst dataStore = {\n  get powerData() { return powerData; },\n  get lastPowerValue() { return lastPowerValue; },\n  get lastHeartRateValue() { return lastHeartRateValue; },\n  get lastCadenceValue() { return lastCadenceValue; },\n  get sessionStartTime() { return sessionStartTime; },\n  resetAllSessionData,\n  elements\n};\n\n// Bluetooth connection callbacks\nconst powerMeterCallbacks = {\n  onPowerMeasurement: (power) => {\n    updatePowerValue(power);\n    lastPowerValue = power;\n\n    // Add power reading to averaging calculations\n    addPowerReading(power);\n  },\n  onDisconnected: () => {\n    resetMetricDisplays();\n    // Only reset power averages if we don't have historical data\n    if (powerData.length === 0) {\n      resetPowerAverages();\n    }\n    if (dataLoggerInterval) {\n      clearInterval(dataLoggerInterval);\n      dataLoggerInterval = null;\n    }\n    lastPowerValue = 0;\n    updateAllConnectButtonVisibility();\n  },\n  onStatusUpdate: (message) => {\n    if (elements.statusText) {\n      elements.statusText.textContent = message;\n    }\n  }\n};\n\nconst heartRateCallbacks = {\n  onHeartRateChange: (heartRate) => {\n    if (elements.hrValueElement) {\n      elements.hrValueElement.textContent = heartRate;\n    }\n    lastHeartRateValue = heartRate;\n  },\n  onStatusUpdate: (message) => {\n    if (elements.hrStatusText) {\n      elements.hrStatusText.textContent = message;\n    }\n  },\n  onDisconnected: () => {\n    updateAllConnectButtonVisibility();\n  }\n};\n\nconst cadenceCallbacks = {\n  onCadenceChange: (cadence) => {\n    if (elements.cadenceValueElement) {\n      elements.cadenceValueElement.textContent = cadence;\n    }\n    lastCadenceValue = cadence;\n  },\n  onStatusUpdate: (message) => {\n    if (elements.cadenceStatusText) {\n      elements.cadenceStatusText.textContent = message;\n    }\n  },\n  onDisconnected: () => {\n    updateAllConnectButtonVisibility();\n  }\n};\n\n/**\n * Update all connect button visibility based on current connection states\n */\nfunction updateAllConnectButtonVisibility() {\n  updateConnectButtonVisibility({\n    powerMeter: isPowerMeterConnected(),\n    heartRate: isHeartRateConnected(),\n    speedCadence: isSpeedCadenceConnected()\n  });\n}\n\n/**\n * Setup connection button event listeners\n */\nfunction setupConnectionEventListeners() {\n  // Power meter connection\n  if (elements.powerMeterConnectButton) {\n    elements.powerMeterConnectButton.addEventListener('click', async () => {\n      // Check if currently connecting - if so, cancel the connection attempt\n      if (powerMeterConnecting) {\n        powerMeterConnecting = false;\n        setButtonConnectingState(elements.powerMeterConnectButton, false);\n        powerMeterCallbacks.onStatusUpdate('Connection cancelled');\n        return;\n      }\n\n      // Check if already connected - if so, show disconnect confirmation\n      if (isPowerMeterConnected()) {\n        const shouldDisconnect = confirm('Disconnect power meter?');\n        if (shouldDisconnect) {\n          disconnectPowerMeter();\n        }\n        return;\n      }\n\n      // Only reset data if session was not restored\n      if (!sessionRestored) {\n        powerData.length = 0;\n        lastPowerValue = 0;\n        resetPowerAverages();\n      }\n\n      if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n      }\n\n      // Set connecting state\n      powerMeterConnecting = true;\n      setButtonConnectingState(elements.powerMeterConnectButton, true);\n\n      const connected = await connectPowerMeter(powerMeterCallbacks, elements);\n\n      // Clear connecting state\n      powerMeterConnecting = false;\n      setButtonConnectingState(elements.powerMeterConnectButton, false);\n\n      if (connected) {\n        // Start session if this is the first connection and no session was restored\n        if (!sessionStartTime) {\n          sessionStartTime = Date.now();\n        }\n\n        // Start data logging\n        dataLoggerInterval = setInterval(() => {\n          powerData.push({\n            timestamp: Date.now(),\n            power: lastPowerValue,\n            heartRate: lastHeartRateValue,\n            cadence: lastCadenceValue,\n          });\n\n          // Save session data periodically (every 100 readings = 10 seconds)\n          if (powerData.length % SESSION_SAVE_INTERVAL === 0) {\n            saveSessionData(dataStore);\n          }\n        }, DATA_LOGGER_INTERVAL_MS);\n\n        // Clear the sessionRestored flag after first connection\n        sessionRestored = false;\n\n        // Update button visibility\n        updateAllConnectButtonVisibility();\n      }\n    });\n  }\n\n  // Heart rate monitor connection\n  if (elements.hrConnectButton) {\n    elements.hrConnectButton.addEventListener('click', async () => {\n      // Check if currently connecting - if so, cancel the connection attempt\n      if (heartRateConnecting) {\n        heartRateConnecting = false;\n        setButtonConnectingState(elements.hrConnectButton, false);\n        heartRateCallbacks.onStatusUpdate('Connection cancelled');\n        return;\n      }\n\n      // Check if already connected - if so, show disconnect confirmation\n      if (isHeartRateConnected()) {\n        const shouldDisconnect = confirm('Disconnect heart rate monitor?');\n        if (shouldDisconnect) {\n          disconnectHeartRate();\n        }\n        return;\n      }\n\n      // Set connecting state\n      heartRateConnecting = true;\n      setButtonConnectingState(elements.hrConnectButton, true);\n\n      const connected = await connectHeartRateMonitor(heartRateCallbacks, elements);\n\n      // Clear connecting state\n      heartRateConnecting = false;\n      setButtonConnectingState(elements.hrConnectButton, false);\n\n      if (connected) {\n        updateAllConnectButtonVisibility();\n      }\n    });\n  }\n\n  // Speed/cadence sensor connection\n  if (elements.speedCadenceConnectButton) {\n    elements.speedCadenceConnectButton.addEventListener('click', async () => {\n      // Check if currently connecting - if so, cancel the connection attempt\n      if (speedCadenceConnecting) {\n        speedCadenceConnecting = false;\n        setButtonConnectingState(elements.speedCadenceConnectButton, false);\n        speedCadenceCallbacks.onStatusUpdate('Connection cancelled');\n        return;\n      }\n\n      // Check if already connected - if so, show disconnect confirmation\n      if (isSpeedCadenceConnected()) {\n        const shouldDisconnect = confirm('Disconnect cadence sensor?');\n        if (shouldDisconnect) {\n          disconnectSpeedCadence();\n        }\n        return;\n      }\n\n      // Set connecting state\n      speedCadenceConnecting = true;\n      setButtonConnectingState(elements.speedCadenceConnectButton, true);\n\n      const connected = await connectSpeedCadenceSensor(speedCadenceCallbacks, elements);\n\n      // Clear connecting state\n      speedCadenceConnecting = false;\n      setButtonConnectingState(elements.speedCadenceConnectButton, false);\n\n      if (connected) {\n        updateAllConnectButtonVisibility();\n      }\n    });\n  }\n}\n\n/**\n * Session restoration functionality\n */\n\n/**\n * Show restoration dialog to let user choose\n */\nfunction showRestorationDialog(sessionData) {\n  return new Promise((resolve) => {\n    // Create modal backdrop\n    const backdrop = document.createElement('div');\n    backdrop.className = 'modal-backdrop';\n\n    // Create modal dialog\n    const modal = document.createElement('div');\n    modal.className = 'modal';\n\n    // Get session info\n    const sessionAge = Math.round((Date.now() - sessionData.timestamp) / (1000 * 60)); // minutes\n    const dataCount = sessionData.powerData?.length || 0;\n\n    modal.innerHTML = `\n      <h3>Previous Session Found</h3>\n      <p>\n        A previous session was found from ${sessionAge} minutes ago with ${dataCount} data points.\n      </p>\n      <p>\n        Would you like to restore this session or start fresh?\n      </p>\n      <div class=\"modal-buttons\">\n        <button id=\"startFresh\" class=\"modal-button secondary\">Start Fresh</button>\n        <button id=\"restoreSession\" class=\"modal-button primary\">Restore Session</button>\n      </div>\n    `;\n\n    backdrop.appendChild(modal);\n    document.body.appendChild(backdrop);\n\n    // Handle button clicks\n    modal.querySelector('#startFresh').addEventListener('click', () => {\n      document.body.removeChild(backdrop);\n      clearSessionData();\n      sessionRestored = false;\n      resolve(false);\n    });\n\n    modal.querySelector('#restoreSession').addEventListener('click', () => {\n      document.body.removeChild(backdrop);\n      resolve(true);\n    });\n\n    // Handle backdrop click\n    backdrop.addEventListener('click', (e) => {\n      if (e.target === backdrop) {\n        document.body.removeChild(backdrop);\n        sessionRestored = false;\n        resolve(false);\n      }\n    });\n  });\n}\n\n/**\n * Apply session data to restore the session\n */\nfunction restoreSessionData(sessionData) {\n  try {\n    // Restore data arrays\n    if (sessionData.powerData) {\n      powerData.length = 0;\n      powerData.push(...sessionData.powerData);\n    }\n\n    // Restore last values\n    if (sessionData.lastPowerValue !== undefined) lastPowerValue = sessionData.lastPowerValue;\n    if (sessionData.lastHeartRateValue !== undefined) lastHeartRateValue = sessionData.lastHeartRateValue;\n    if (sessionData.lastCadenceValue !== undefined) lastCadenceValue = sessionData.lastCadenceValue;\n    if (sessionData.sessionStartTime !== undefined) sessionStartTime = sessionData.sessionStartTime;\n\n    // Mark that session was restored\n    sessionRestored = true;\n\n    // Update displays with restored data\n    updateDisplaysFromRestoredData();\n\n    console.log(`Session restored: ${powerData.length} data points from ${new Date(sessionStartTime).toLocaleString()}`);\n\n    return true;\n  } catch (error) {\n    console.warn('Failed to restore session data:', error);\n    return false;\n  }\n}\n\n/**\n * Initialize the application\n */\nasync function initializeApp() {\n  try {\n    // Initialize all modules and DOM elements\n    initializeElements();\n    initializePowerAveraging();\n    initializeSections(elements);\n    initializeMetricIcons();\n\n    // Setup all event listeners\n    setupHamburgerMenu(elements);\n    setupMenuItems(elements);\n    setupConnectionEventListeners();\n    setupExportMenuListeners(dataStore);\n    setupUtilityMenuListeners(dataStore);\n\n    // Initialize connect button visibility based on current connection states\n    updateAllConnectButtonVisibility();    // Try to load previous session data\n    const sessionData = loadSessionData();\n    if (sessionData) {\n      // Show restoration dialog\n      const shouldRestore = await showRestorationDialog(sessionData);\n      if (shouldRestore) {\n        restoreSessionData(sessionData);\n      } else {\n        sessionStartTime = Date.now();\n      }\n    } else {\n      sessionStartTime = Date.now();\n    }\n\n    // Save session data when page is about to be closed/refreshed\n    window.addEventListener('beforeunload', handleAppCleanup);\n\n    // Save session data periodically (every 30 seconds as backup)\n    periodicSaveInterval = setInterval(() => {\n      if (powerData.length > 0) {\n        saveSessionData(dataStore);\n      }\n    }, PERIODIC_SAVE_INTERVAL_MS);\n\n  } catch (error) {\n    console.error('Failed to initialize application:', error);\n    alert('Failed to initialize application. Please refresh the page.');\n  }\n}\n\n/**\n * Clean up resources when app is closing\n */\nfunction handleAppCleanup() {\n  // Save session data\n  if (powerData.length > 0) {\n    saveSessionData(dataStore);\n  }\n\n  // Clear intervals\n  if (dataLoggerInterval) {\n    clearInterval(dataLoggerInterval);\n    dataLoggerInterval = null;\n  }\n\n  if (periodicSaveInterval) {\n    clearInterval(periodicSaveInterval);\n    periodicSaveInterval = null;\n  }\n}\n\n/**\n * Prevent accidental pull-to-refresh\n * Ask user for confirmation before refreshing the page\n */\nfunction preventAccidentalRefresh() {\n  let startY = 0;\n  let isPulling = false;\n\n  // Prevent pull-to-refresh gesture on mobile\n  document.body.addEventListener('touchstart', (e) => {\n    if (window.scrollY === 0) {\n      startY = e.touches[0].pageY;\n      isPulling = true;\n    }\n  }, { passive: true });\n\n  document.body.addEventListener('touchmove', (e) => {\n    if (isPulling && window.scrollY === 0) {\n      const currentY = e.touches[0].pageY;\n      const pullDistance = currentY - startY;\n\n      // If pulling down more than 10px, prevent default\n      if (pullDistance > 10) {\n        e.preventDefault();\n      }\n    }\n  }, { passive: false });\n\n  document.body.addEventListener('touchend', () => {\n    isPulling = false;\n  });\n\n  // Prevent default browser refresh behavior\n  window.addEventListener('beforeunload', (e) => {\n    // Only ask for confirmation if there's active data\n    if (powerData.length > 0 || isPowerMeterConnected() || isHeartRateConnected() || isSpeedCadenceConnected()) {\n      const message = 'You have active data or connections. Are you sure you want to refresh?';\n      e.preventDefault();\n      e.returnValue = message;\n      return message;\n    }\n  });\n\n  // Add CSS to prevent overscroll on body\n  document.body.style.overscrollBehavior = 'contain';\n}\n\n// Initialize the application when DOM is ready\ndocument.addEventListener('DOMContentLoaded', () => {\n  initializeApp();\n  preventAccidentalRefresh();\n});\n\n// Initialize PWA features (service worker, install prompt)\ninitializePWA();","/**\n * PWA Installation Handler\n * Manages service worker registration and install prompts\n */\n\nimport { InstallPrompt, UpdateBanner, OfflineIndicator, showIOSInstallInstructions } from './pwa-ui.js';\n\nlet deferredPrompt = null;\nlet installPrompt = null;\nlet updateBanner = null;\nlet offlineIndicator = null;\n\n/**\n * Register the service worker\n */\nexport function registerServiceWorker() {\n    // Skip service worker registration in development mode\n    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1' || window.location.port) {\n        console.log('[PWA] Development mode detected - skipping service worker registration');\n\n        // Unregister any existing service workers in development\n        if ('serviceWorker' in navigator) {\n            navigator.serviceWorker.getRegistrations().then(registrations => {\n                registrations.forEach(registration => {\n                    registration.unregister();\n                    console.log('[PWA] Unregistered existing service worker for development');\n                });\n            });\n        }\n        return;\n    }\n\n    if ('serviceWorker' in navigator) {\n        window.addEventListener('load', async () => {\n            try {\n                const registration = await navigator.serviceWorker.register(\n                    new URL('./service-worker.js', import.meta.url),\n                    { type: 'module', updateViaCache: 'none' }\n                );\n                console.log('[PWA] Service Worker registered:', registration.scope);\n\n                // Check for updates immediately\n                registration.update();\n\n                // Check for updates periodically (every 5 minutes)\n                setInterval(() => {\n                    console.log('[PWA] Checking for updates...');\n                    registration.update();\n                }, 300000); // Check every 5 minutes\n\n                // Handle updates\n                registration.addEventListener('updatefound', () => {\n                    const newWorker = registration.installing;\n                    console.log('[PWA] Update found, installing new service worker...');\n\n                    newWorker.addEventListener('statechange', () => {\n                        if (newWorker.state === 'installed') {\n                            if (navigator.serviceWorker.controller) {\n                                // New service worker available\n                                console.log('[PWA] New version available');\n                                showUpdateNotification(newWorker);\n                            } else {\n                                // First time install\n                                console.log('[PWA] Content cached for offline use');\n                            }\n                        }\n                    });\n                });\n\n                // Listen for controlling service worker change\n                navigator.serviceWorker.addEventListener('controllerchange', () => {\n                    console.log('[PWA] Controller changed, reloading page...');\n                    window.location.reload();\n                });\n\n            } catch (error) {\n                console.error('[PWA] Service Worker registration failed:', error);\n            }\n        });\n    } else {\n        console.warn('[PWA] Service Workers are not supported in this browser');\n    }\n}\n\n/**\n * Show update notification and allow user to update\n */\nfunction showUpdateNotification(worker) {\n    console.log('[PWA] Update available. New version can be activated.');\n\n    // Show the custom update banner\n    if (!updateBanner) {\n        updateBanner = new UpdateBanner();\n    }\n    updateBanner.show(worker);\n}\n\n/**\n * Setup install prompt handler\n */\nexport function setupInstallPrompt() {\n    // Initialize install prompt UI\n    if (!installPrompt) {\n        installPrompt = new InstallPrompt();\n    }\n\n    // Capture the beforeinstallprompt event\n    window.addEventListener('beforeinstallprompt', (e) => {\n        console.log('[PWA] Install prompt available');\n\n        // Prevent the mini-infobar from appearing on mobile\n        e.preventDefault();\n\n        // Store the event so it can be triggered later\n        deferredPrompt = e;\n\n        // Show custom install banner\n        installPrompt.show(e);\n    });\n\n    // Handle successful installation\n    window.addEventListener('appinstalled', () => {\n        console.log('[PWA] App successfully installed');\n        deferredPrompt = null;\n        if (installPrompt) {\n            installPrompt.hide();\n        }\n    });\n\n    // Show iOS-specific instructions\n    setTimeout(() => {\n        showIOSInstallInstructions();\n    }, 2000);\n}\n\n\n\n/**\n * Trigger install prompt programmatically\n */\nexport async function promptInstall() {\n    if (!deferredPrompt) {\n        console.log('[PWA] Install prompt not available');\n        return false;\n    }\n\n    // Show the install prompt\n    deferredPrompt.prompt();\n\n    // Wait for the user to respond to the prompt\n    const { outcome } = await deferredPrompt.userChoice;\n    console.log(`[PWA] User response to install prompt: ${outcome}`);\n\n    // Clear the deferred prompt\n    deferredPrompt = null;\n\n    return outcome === 'accepted';\n}\n\n/**\n * Check if app is running as installed PWA\n */\nexport function isInstalled() {\n    return window.matchMedia('(display-mode: standalone)').matches ||\n        window.navigator.standalone === true;\n}\n\n/**\n * Initialize PWA features\n */\nexport function initializePWA() {\n    registerServiceWorker();\n    setupInstallPrompt();\n\n    // Initialize offline indicator\n    if (!offlineIndicator) {\n        offlineIndicator = new OfflineIndicator();\n    }\n    offlineIndicator.init();\n\n    // Log installation status\n    if (isInstalled()) {\n        console.log('[PWA] Running as installed app');\n    } else {\n        console.log('[PWA] Running in browser');\n    }\n}\n","/**\n * PWA UI Components\n * Handles PWA-specific UI elements: install prompt, update banner, offline indicator\n */\n\n/**\n * Create and manage the custom install prompt banner\n */\nexport class InstallPrompt {\n    constructor() {\n        this.banner = null;\n        this.deferredPrompt = null;\n    }\n\n    /**\n     * Create the install banner HTML\n     */\n    createBanner() {\n        const banner = document.createElement('div');\n        banner.id = 'pwaInstallBanner';\n        banner.className = 'pwa-install-banner';\n        banner.innerHTML = `\n            <div class=\"pwa-install-content\">\n                <div class=\"pwa-install-icon\">⚡</div>\n                <div class=\"pwa-install-text\">\n                    <strong>Install Power Meter</strong>\n                    <span>Add to home screen for quick access</span>\n                </div>\n                <div class=\"pwa-install-actions\">\n                    <button id=\"pwaInstallButton\" class=\"pwa-btn pwa-btn-primary\">Install</button>\n                    <button id=\"pwaInstallClose\" class=\"pwa-btn pwa-btn-secondary\">×</button>\n                </div>\n            </div>\n        `;\n        return banner;\n    }\n\n    /**\n     * Show the install banner\n     */\n    show(deferredPrompt) {\n        // Don't show if already installed or if user dismissed recently\n        if (this.isInstalled() || this.wasRecentlyDismissed()) {\n            return;\n        }\n\n        this.deferredPrompt = deferredPrompt;\n\n        if (!this.banner) {\n            this.banner = this.createBanner();\n            document.body.appendChild(this.banner);\n            this.attachEventListeners();\n        }\n\n        // Animate in\n        setTimeout(() => {\n            this.banner.classList.add('pwa-install-banner-visible');\n        }, 500);\n    }\n\n    /**\n     * Hide the install banner\n     */\n    hide() {\n        if (this.banner) {\n            this.banner.classList.remove('pwa-install-banner-visible');\n            setTimeout(() => {\n                if (this.banner && this.banner.parentNode) {\n                    this.banner.parentNode.removeChild(this.banner);\n                    this.banner = null;\n                }\n            }, 300);\n        }\n    }\n\n    /**\n     * Attach event listeners to banner buttons\n     */\n    attachEventListeners() {\n        const installBtn = this.banner.querySelector('#pwaInstallButton');\n        const closeBtn = this.banner.querySelector('#pwaInstallClose');\n\n        installBtn.addEventListener('click', () => this.handleInstallClick());\n        closeBtn.addEventListener('click', () => this.handleCloseClick());\n    }\n\n    /**\n     * Handle install button click\n     */\n    async handleInstallClick() {\n        if (!this.deferredPrompt) {\n            console.log('[PWA] Install prompt not available');\n            return;\n        }\n\n        // Show native install prompt\n        this.deferredPrompt.prompt();\n\n        // Wait for user response\n        const { outcome } = await this.deferredPrompt.userChoice;\n        console.log(`[PWA] Install prompt outcome: ${outcome}`);\n\n        // Hide banner regardless of outcome\n        this.hide();\n\n        // Clear the deferred prompt\n        this.deferredPrompt = null;\n\n        // Show thank you message if accepted\n        if (outcome === 'accepted') {\n            this.showThankYouMessage();\n        }\n    }\n\n    /**\n     * Handle close button click\n     */\n    handleCloseClick() {\n        this.hide();\n        // Store dismissal timestamp\n        localStorage.setItem('pwaInstallDismissed', Date.now().toString());\n    }\n\n    /**\n     * Check if user dismissed recently (within 7 days)\n     */\n    wasRecentlyDismissed() {\n        const dismissed = localStorage.getItem('pwaInstallDismissed');\n        if (!dismissed) return false;\n\n        const sevenDaysMs = 7 * 24 * 60 * 60 * 1000;\n        return (Date.now() - parseInt(dismissed)) < sevenDaysMs;\n    }\n\n    /**\n     * Check if app is installed\n     */\n    isInstalled() {\n        return window.matchMedia('(display-mode: standalone)').matches ||\n            window.navigator.standalone === true;\n    }\n\n    /**\n     * Show thank you message after installation\n     */\n    showThankYouMessage() {\n        const message = document.createElement('div');\n        message.className = 'pwa-toast pwa-toast-success';\n        message.innerHTML = `\n            <div class=\"pwa-toast-content\">\n                <span class=\"pwa-toast-icon\">✓</span>\n                <span>Thanks for installing! Launch from your home screen.</span>\n            </div>\n        `;\n        document.body.appendChild(message);\n\n        setTimeout(() => message.classList.add('pwa-toast-visible'), 100);\n        setTimeout(() => {\n            message.classList.remove('pwa-toast-visible');\n            setTimeout(() => message.remove(), 300);\n        }, 4000);\n    }\n}\n\n/**\n * Create and manage the update notification banner\n */\nexport class UpdateBanner {\n    constructor() {\n        this.banner = null;\n        this.waitingWorker = null;\n    }\n\n    /**\n     * Create the update banner HTML\n     */\n    createBanner() {\n        const banner = document.createElement('div');\n        banner.id = 'pwaUpdateBanner';\n        banner.className = 'pwa-update-banner';\n        banner.innerHTML = `\n            <div class=\"pwa-update-content\">\n                <div class=\"pwa-update-icon\">🔄</div>\n                <div class=\"pwa-update-text\">\n                    <strong>Update Available</strong>\n                    <span>A new version is ready to install</span>\n                </div>\n                <div class=\"pwa-update-actions\">\n                    <button id=\"pwaUpdateButton\" class=\"pwa-btn pwa-btn-primary\">Update Now</button>\n                    <button id=\"pwaUpdateLater\" class=\"pwa-btn pwa-btn-secondary\">Later</button>\n                </div>\n            </div>\n        `;\n        return banner;\n    }\n\n    /**\n     * Show the update banner\n     */\n    show(waitingWorker) {\n        this.waitingWorker = waitingWorker;\n\n        if (!this.banner) {\n            this.banner = this.createBanner();\n            document.body.appendChild(this.banner);\n            this.attachEventListeners();\n        }\n\n        // Animate in\n        setTimeout(() => {\n            this.banner.classList.add('pwa-update-banner-visible');\n        }, 500);\n    }\n\n    /**\n     * Hide the update banner\n     */\n    hide() {\n        if (this.banner) {\n            this.banner.classList.remove('pwa-update-banner-visible');\n            setTimeout(() => {\n                if (this.banner && this.banner.parentNode) {\n                    this.banner.parentNode.removeChild(this.banner);\n                    this.banner = null;\n                }\n            }, 300);\n        }\n    }\n\n    /**\n     * Attach event listeners to banner buttons\n     */\n    attachEventListeners() {\n        const updateBtn = this.banner.querySelector('#pwaUpdateButton');\n        const laterBtn = this.banner.querySelector('#pwaUpdateLater');\n\n        updateBtn.addEventListener('click', () => this.handleUpdateClick());\n        laterBtn.addEventListener('click', () => this.handleLaterClick());\n    }\n\n    /**\n     * Handle update button click\n     */\n    handleUpdateClick() {\n        if (!this.waitingWorker) {\n            console.log('[PWA] No waiting worker to activate');\n            return;\n        }\n\n        // Tell the service worker to skip waiting\n        this.waitingWorker.postMessage({ type: 'SKIP_WAITING' });\n\n        // Show loading message\n        this.showUpdatingMessage();\n\n        // Reload the page after a brief delay\n        setTimeout(() => {\n            window.location.reload();\n        }, 1000);\n    }\n\n    /**\n     * Handle later button click\n     */\n    handleLaterClick() {\n        this.hide();\n    }\n\n    /**\n     * Show updating message\n     */\n    showUpdatingMessage() {\n        this.hide();\n\n        const message = document.createElement('div');\n        message.className = 'pwa-toast pwa-toast-info';\n        message.innerHTML = `\n            <div class=\"pwa-toast-content\">\n                <span class=\"pwa-toast-icon\">🔄</span>\n                <span>Updating app...</span>\n            </div>\n        `;\n        document.body.appendChild(message);\n\n        setTimeout(() => message.classList.add('pwa-toast-visible'), 100);\n    }\n}\n\n/**\n * Create and manage the offline indicator\n */\nexport class OfflineIndicator {\n    constructor() {\n        this.indicator = null;\n        this.isOnline = navigator.onLine;\n    }\n\n    /**\n     * Create the offline indicator HTML\n     */\n    createIndicator() {\n        const indicator = document.createElement('div');\n        indicator.id = 'pwaOfflineIndicator';\n        indicator.className = 'pwa-offline-indicator';\n        indicator.innerHTML = `\n            <div class=\"pwa-offline-content\">\n                <span class=\"pwa-offline-icon\">📴</span>\n                <span class=\"pwa-offline-text\">You're offline</span>\n            </div>\n        `;\n        return indicator;\n    }\n\n    /**\n     * Initialize the offline indicator\n     */\n    init() {\n        window.addEventListener('online', () => this.handleOnline());\n        window.addEventListener('offline', () => this.handleOffline());\n\n        // Check initial state\n        if (!navigator.onLine) {\n            this.handleOffline();\n        }\n    }\n\n    /**\n     * Handle online event\n     */\n    handleOnline() {\n        this.isOnline = true;\n        console.log('[PWA] Connection restored');\n        this.hide();\n        this.showToast('✓', 'Back online', 'success');\n    }\n\n    /**\n     * Handle offline event\n     */\n    handleOffline() {\n        this.isOnline = false;\n        console.log('[PWA] Connection lost');\n        this.show();\n    }\n\n    /**\n     * Show the offline indicator\n     */\n    show() {\n        if (!this.indicator) {\n            this.indicator = this.createIndicator();\n            document.body.appendChild(this.indicator);\n        }\n\n        setTimeout(() => {\n            this.indicator.classList.add('pwa-offline-indicator-visible');\n        }, 100);\n    }\n\n    /**\n     * Hide the offline indicator\n     */\n    hide() {\n        if (this.indicator) {\n            this.indicator.classList.remove('pwa-offline-indicator-visible');\n            setTimeout(() => {\n                if (this.indicator && this.indicator.parentNode) {\n                    this.indicator.parentNode.removeChild(this.indicator);\n                    this.indicator = null;\n                }\n            }, 300);\n        }\n    }\n\n    /**\n     * Show a toast notification\n     */\n    showToast(icon, message, type = 'info') {\n        const toast = document.createElement('div');\n        toast.className = `pwa-toast pwa-toast-${type}`;\n        toast.innerHTML = `\n            <div class=\"pwa-toast-content\">\n                <span class=\"pwa-toast-icon\">${icon}</span>\n                <span>${message}</span>\n            </div>\n        `;\n        document.body.appendChild(toast);\n\n        setTimeout(() => toast.classList.add('pwa-toast-visible'), 100);\n        setTimeout(() => {\n            toast.classList.remove('pwa-toast-visible');\n            setTimeout(() => toast.remove(), 300);\n        }, 3000);\n    }\n}\n\n/**\n * Show install instructions for iOS users\n */\nexport function showIOSInstallInstructions() {\n    // Check if iOS Safari and not installed\n    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);\n    const isInStandaloneMode = window.navigator.standalone === true;\n\n    if (isIOS && !isInStandaloneMode) {\n        // Check if user dismissed recently\n        const dismissed = localStorage.getItem('iosInstallDismissed');\n        if (dismissed) {\n            const threeDaysMs = 3 * 24 * 60 * 60 * 1000;\n            if ((Date.now() - parseInt(dismissed)) < threeDaysMs) {\n                return; // Don't show if dismissed within 3 days\n            }\n        }\n\n        const banner = document.createElement('div');\n        banner.className = 'pwa-ios-instructions';\n        banner.innerHTML = `\n            <div class=\"pwa-ios-content\">\n                <div class=\"pwa-ios-header\">\n                    <span class=\"pwa-ios-icon\">📱</span>\n                    <strong>Install Power Meter</strong>\n                    <button class=\"pwa-ios-close\" id=\"pwaIOSClose\">×</button>\n                </div>\n                <div class=\"pwa-ios-steps\">\n                    <p>Tap <strong>Share</strong> <span style=\"font-size: 1.2em;\">□↑</span> then <strong>Add to Home Screen</strong></p>\n                </div>\n            </div>\n        `;\n        document.body.appendChild(banner);\n\n        setTimeout(() => banner.classList.add('pwa-ios-instructions-visible'), 500);\n\n        // Close button handler\n        const closeBtn = banner.querySelector('#pwaIOSClose');\n        closeBtn.addEventListener('click', () => {\n            banner.classList.remove('pwa-ios-instructions-visible');\n            setTimeout(() => banner.remove(), 300);\n            localStorage.setItem('iosInstallDismissed', Date.now().toString());\n        });\n    }\n}\n","module.exports = __parcel__import__.meta.resolve(\"7qU26\");","/**\n * Session Data Persistence Module\n * Manages localStorage operations for session data persistence\n */\n\n// Constants for session management\nconst SESSION_STORAGE_KEY = 'powerMeterSession';\nconst SESSION_TIMEOUT_MS = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n\n/**\n * Save current session data to localStorage\n * @param {Object} dataStore - Object containing all session data\n */\nfunction saveSessionData(dataStore) {\n    try {\n        const sessionData = {\n            timestamp: Date.now(),\n            powerData: dataStore.powerData,\n            lastPowerValue: dataStore.lastPowerValue,\n            lastHeartRateValue: dataStore.lastHeartRateValue,\n            lastCadenceValue: dataStore.lastCadenceValue,\n            sessionStartTime: dataStore.sessionStartTime\n        };\n\n        localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n    } catch (error) {\n        console.warn('Failed to save session data:', error);\n    }\n}\n\n/**\n * Validate session data object\n * @param {Object} sessionData - Session data to validate\n * @returns {boolean} True if valid\n */\nfunction validateSessionData(sessionData) {\n    if (!sessionData || typeof sessionData !== 'object') {\n        return false;\n    }\n\n    // Check required properties\n    if (!sessionData.timestamp || !sessionData.powerData) {\n        return false;\n    }\n\n    // Validate powerData is an array\n    if (!Array.isArray(sessionData.powerData)) {\n        return false;\n    }\n\n    return true;\n}\n\n/**\n * Load session data from localStorage if available and recent\n * @returns {Object|null} Session data object if available and valid, null otherwise\n */\nfunction loadSessionData() {\n    try {\n        const savedData = localStorage.getItem(SESSION_STORAGE_KEY);\n        if (!savedData) {\n            return null;\n        }\n\n        const sessionData = JSON.parse(savedData);\n\n        // Validate session data structure\n        if (!validateSessionData(sessionData)) {\n            console.warn('Invalid session data structure, clearing...');\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            return null;\n        }\n\n        const now = Date.now();\n        const sessionAge = now - sessionData.timestamp;\n\n        // Check if session has expired (older than 24 hours)\n        if (sessionAge > SESSION_TIMEOUT_MS) {\n            console.log('Session expired, clearing...');\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            return null;\n        }\n\n        return sessionData;\n    } catch (error) {\n        console.warn('Failed to load session data:', error);\n        localStorage.removeItem(SESSION_STORAGE_KEY);\n        return null;\n    }\n}\n\n\n/**\n * Clear session data from localStorage\n */\nfunction clearSessionData() {\n    localStorage.removeItem(SESSION_STORAGE_KEY);\n}\n\nexport { loadSessionData, saveSessionData, clearSessionData };","// Constants for time periods\nconst TIME_PERIODS_MS = {\n    '10s': 10 * 1000,\n    '20s': 20 * 1000,\n    '30s': 30 * 1000,\n    '40s': 40 * 1000,\n    '50s': 50 * 1000,\n    '1m': 60 * 1000,\n    '2m': 120 * 1000,\n    '3m': 180 * 1000,\n    '4m': 240 * 1000,\n    '5m': 300 * 1000,\n};\n\n// Timestamp of last power reading\nlet lastPowerTimestamp = Date.now();\n\n// Power averaging data structures\nlet powerAverages = {\n    '10s': { current: 0, best: 0 },\n    '20s': { current: 0, best: 0 },\n    '30s': { current: 0, best: 0 },\n    '40s': { current: 0, best: 0 },\n    '50s': { current: 0, best: 0 },\n    '1m': { current: 0, best: 0 },\n    '2m': { current: 0, best: 0 },\n    '3m': { current: 0, best: 0 },\n    '4m': { current: 0, best: 0 },\n    '5m': { current: 0, best: 0 },\n};\n\n// DOM elements for power averages display\nlet avg10sCurrentElement, avg10sBestElement;\nlet avg20sCurrentElement, avg20sBestElement;\nlet avg30sCurrentElement, avg30sBestElement;\nlet avg40sCurrentElement, avg40sBestElement;\nlet avg50sCurrentElement, avg50sBestElement;\nlet avg1mCurrentElement, avg1mBestElement;\nlet avg2mCurrentElement, avg2mBestElement;\nlet avg3mCurrentElement, avg3mBestElement;\nlet avg4mCurrentElement, avg4mBestElement;\nlet avg5mCurrentElement, avg5mBestElement;\n\n/**\n * Initialize power averaging system with DOM elements\n */\nexport function initializePowerAveraging() {\n    // Get DOM elements\n    avg10sCurrentElement = document.getElementById('avg10s-current');\n    avg10sBestElement = document.getElementById('avg10s-best');\n    avg20sCurrentElement = document.getElementById('avg20s-current');\n    avg20sBestElement = document.getElementById('avg20s-best');\n    avg30sCurrentElement = document.getElementById('avg30s-current');\n    avg30sBestElement = document.getElementById('avg30s-best');\n    avg40sCurrentElement = document.getElementById('avg40s-current');\n    avg40sBestElement = document.getElementById('avg40s-best');\n    avg50sCurrentElement = document.getElementById('avg50s-current');\n    avg50sBestElement = document.getElementById('avg50s-best');\n    avg1mCurrentElement = document.getElementById('avg1m-current');\n    avg1mBestElement = document.getElementById('avg1m-best');\n    avg2mCurrentElement = document.getElementById('avg2m-current');\n    avg2mBestElement = document.getElementById('avg2m-best');\n    avg3mCurrentElement = document.getElementById('avg3m-current');\n    avg3mBestElement = document.getElementById('avg3m-best');\n    avg4mCurrentElement = document.getElementById('avg4m-current');\n    avg4mBestElement = document.getElementById('avg4m-best');\n    avg5mCurrentElement = document.getElementById('avg5m-current');\n    avg5mBestElement = document.getElementById('avg5m-best');\n}\n\n/**\n * Add a new power reading to the averaging calculations\n * @param {number} power - The instantaneous power value\n */\nexport function addPowerReading(power) {\n    // Validate input\n    if (typeof power !== 'number' || isNaN(power)) {\n        return;\n    }\n    if (power > 3000 || power < 0) {\n        return;\n    }\n\n    // update power averages\n    const now = Date.now();\n    const timeDelta = now - lastPowerTimestamp;\n    lastPowerTimestamp = now;\n    for (const [periodKey, periodMs] of Object.entries(TIME_PERIODS_MS)) {\n        const currentAvg = powerAverages[periodKey].current || 0;\n        const nextAvg = Math.round(((currentAvg * (periodMs - timeDelta)) + (power * timeDelta)) / periodMs);\n        powerAverages[periodKey].current = nextAvg;\n        // Update best if current is better\n        if (nextAvg > powerAverages[periodKey].best) {\n            powerAverages[periodKey].best = nextAvg;\n        }\n    }\n\n    // Update the display after calculating new averages\n    updatePowerAveragesDisplay();\n}\n\n/**\n * Update the power averages display in the UI\n */\nexport function updatePowerAveragesDisplay() {\n    if (!avg10sCurrentElement) return; // Elements not initialized\n\n    try {\n        avg10sCurrentElement.textContent = powerAverages['10s'].current || '--';\n        avg10sBestElement.textContent = powerAverages['10s'].best || '--';\n        avg20sCurrentElement.textContent = powerAverages['20s'].current || '--';\n        avg20sBestElement.textContent = powerAverages['20s'].best || '--';\n        avg30sCurrentElement.textContent = powerAverages['30s'].current || '--';\n        avg30sBestElement.textContent = powerAverages['30s'].best || '--';\n        avg40sCurrentElement.textContent = powerAverages['40s'].current || '--';\n        avg40sBestElement.textContent = powerAverages['40s'].best || '--';\n        avg50sCurrentElement.textContent = powerAverages['50s'].current || '--';\n        avg50sBestElement.textContent = powerAverages['50s'].best || '--';\n        avg1mCurrentElement.textContent = powerAverages['1m'].current || '--';\n        avg1mBestElement.textContent = powerAverages['1m'].best || '--';\n        avg2mCurrentElement.textContent = powerAverages['2m'].current || '--';\n        avg2mBestElement.textContent = powerAverages['2m'].best || '--';\n        avg3mCurrentElement.textContent = powerAverages['3m'].current || '--';\n        avg3mBestElement.textContent = powerAverages['3m'].best || '--';\n        avg4mCurrentElement.textContent = powerAverages['4m'].current || '--';\n        avg4mBestElement.textContent = powerAverages['4m'].best || '--';\n        avg5mCurrentElement.textContent = powerAverages['5m'].current || '--';\n        avg5mBestElement.textContent = powerAverages['5m'].best || '--';\n    } catch (error) {\n        console.error('Error updating power averages display:', error.message);\n    }\n}\n\n/**\n * Reset all power averages to zero\n */\nexport function resetPowerAverages() {\n    for (const period of Object.keys(powerAverages)) {\n        powerAverages[period].current = 0;\n        powerAverages[period].best = 0;\n    }\n    updatePowerAveragesDisplay();\n}\n\n","/**\n * UI Management Module\n * Handles DOM element references, event listeners, and UI state management\n */\n\n// DOM element references\nexport const elements = {\n    // Main metric displays\n    powerValueElement: null,\n    hrValueElement: null,\n    cadenceValueElement: null,\n\n    // Device info displays\n    deviceNameElement: null,\n    cadenceDeviceName: null,\n\n    // Status displays\n    statusText: null,\n    hrStatusText: null,\n    cadenceStatusText: null,\n    hrConnectionStatus: null,\n    cadenceConnectionStatus: null,\n\n    // Buttons\n    powerMeterConnectButton: null,\n    hrConnectButton: null,\n    speedCadenceConnectButton: null,\n\n    // Toggle elements\n    powerAveragesSection: null,\n\n    // Hamburger menu elements\n    hamburgerBtn: null,\n    menuDropdown: null,\n    showInfoMenuItem: null\n};\n\n/**\n * Initialize all DOM element references\n */\nexport function initializeElements() {\n    // Main metric displays\n    elements.powerValueElement = document.getElementById('power-value');\n    elements.hrValueElement = document.getElementById('hr-value');\n    elements.cadenceValueElement = document.getElementById('cadence-value');\n\n    // Device info displays\n    elements.deviceNameElement = document.getElementById('device-name');\n    elements.cadenceDeviceName = document.getElementById('cadenceDeviceName');\n\n    // Status displays\n    elements.statusText = document.getElementById('status');\n    elements.hrStatusText = document.getElementById('hrStatus');\n    elements.cadenceStatusText = document.getElementById('cadenceStatus');\n    elements.hrConnectionStatus = document.getElementById('hrConnectionStatus');\n    elements.cadenceConnectionStatus = document.getElementById('cadenceConnectionStatus');\n\n    // Buttons\n    elements.powerMeterConnectButton = document.getElementById('connectButton');\n    elements.hrConnectButton = document.getElementById('hrConnectButton');\n    elements.speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\n\n    // Toggle elements\n    elements.powerAveragesSection = document.getElementById('powerAveragesSection');\n\n    // Hamburger menu elements\n    elements.hamburgerBtn = document.getElementById('hamburgerButton');\n    elements.menuDropdown = document.getElementById('menuDropdown');\n    elements.showInfoMenuItem = document.getElementById('showInfoMenuItem');\n\n    // Initialize connection status to disconnected state\n    if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Disconnected';\n    if (elements.cadenceConnectionStatus) elements.cadenceConnectionStatus.textContent = 'Disconnected';\n}\n\n/**\n * Helper function to update power value with enhanced styling\n * @param {number|string} value - The power value to display\n */\nexport function updatePowerValue(value) {\n    if (!elements.powerValueElement) return;\n\n    const displayValue = value || '--';\n    elements.powerValueElement.textContent = displayValue;\n    elements.powerValueElement.setAttribute('data-value', displayValue);\n}\n\n/**\n * Update metric displays with current values\n * @param {Object} values - Object containing power, heartRate, and cadence values\n */\nexport function updateMetricDisplays(values) {\n    if (values.power !== undefined && elements.powerValueElement) {\n        elements.powerValueElement.textContent = values.power || '--';\n    }\n\n    if (values.heartRate !== undefined && elements.hrValueElement) {\n        elements.hrValueElement.textContent = values.heartRate || '--';\n    }\n\n    if (values.cadence !== undefined && elements.cadenceValueElement) {\n        elements.cadenceValueElement.textContent = values.cadence || '--';\n    }\n}\n\n/**\n * Reset all metric displays to default values\n */\nexport function resetMetricDisplays() {\n    if (elements.powerValueElement) elements.powerValueElement.textContent = '--';\n    if (elements.hrValueElement) elements.hrValueElement.textContent = '--';\n    if (elements.cadenceValueElement) elements.cadenceValueElement.textContent = '--';\n}\n\n/**\n * Update connect button visibility based on connection states\n * @param {Object} connectionStates - Object containing connection states\n * @param {boolean} connectionStates.powerMeter - Power meter connection state\n * @param {boolean} connectionStates.heartRate - Heart rate monitor connection state\n * @param {boolean} connectionStates.speedCadence - Speed/cadence sensor connection state\n */\nexport function updateConnectButtonVisibility(connectionStates) {\n    // Update power meter connect button state\n    if (elements.powerMeterConnectButton) {\n        elements.powerMeterConnectButton.setAttribute('data-connected', connectionStates.powerMeter ? 'true' : 'false');\n    }\n\n    // Update heart rate connect button state\n    if (elements.hrConnectButton) {\n        elements.hrConnectButton.setAttribute('data-connected', connectionStates.heartRate ? 'true' : 'false');\n    }\n\n    // Update speed/cadence connect button state\n    if (elements.speedCadenceConnectButton) {\n        elements.speedCadenceConnectButton.setAttribute('data-connected', connectionStates.speedCadence ? 'true' : 'false');\n    }\n\n    // Update power averages section visibility based on power meter connection\n    if (elements.powerAveragesSection) {\n        elements.powerAveragesSection.setAttribute('data-connected', connectionStates.powerMeter ? 'true' : 'false');\n    }\n}\n\n/**\n * Set a button to connecting state\n * @param {HTMLElement} button - The button element to update\n * @param {boolean} isConnecting - Whether the button is in connecting state\n */\nexport function setButtonConnectingState(button, isConnecting) {\n    if (button) {\n        button.setAttribute('data-connecting', isConnecting ? 'true' : 'false');\n    }\n}\n\n/**\n * Get current date string for file naming\n * @returns {string} Date string in YYYY-MM-DD format\n */\nexport function getCurrentDateString() {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n}","/**\n * Bluetooth Connection Orchestration Module\n * Coordinates Bluetooth connections for all sensor types\n */\n\nimport {\n    connectHeartRateMonitor,\n    isHeartRateConnected,\n    disconnectHeartRate,\n    cleanupHeartRateEventListeners\n} from './bluetooth-heart-rate.js';\n\nimport {\n    connectPowerMeter,\n    connectSpeedCadenceSensor,\n    isPowerMeterConnected,\n    isSpeedCadenceConnected,\n    disconnectPowerMeter,\n    disconnectSpeedCadence,\n    cleanupCyclingSensorsEventListeners\n} from './bluetooth-cycling.js';\n\n// Re-export heart rate functions for backward compatibility\nexport {\n    connectHeartRateMonitor,\n    isHeartRateConnected,\n    disconnectHeartRate\n};\n\n// Re-export cycling sensor functions for backward compatibility\nexport {\n    connectPowerMeter,\n    connectSpeedCadenceSensor,\n    isPowerMeterConnected,\n    isSpeedCadenceConnected,\n    disconnectPowerMeter,\n    disconnectSpeedCadence\n};\n\n/**\n * Clean up all Bluetooth event listeners\n * Call this function when the app is closing or resetting connections\n */\nexport function cleanupBluetoothEventListeners() {\n    // Clean up heart rate listeners\n    cleanupHeartRateEventListeners();\n\n    // Clean up cycling sensors listeners\n    cleanupCyclingSensorsEventListeners();\n}","/**\n * Bluetooth Heart Rate Monitor Module\n * Handles Bluetooth connections for heart rate monitors\n */\n\nimport { parseHeartRate } from './heart-rate.js';\nimport { requestWakeLock } from './wake-lock.js';\n\n// Device connection state\nlet hrBluetoothDevice = null;\nlet hrDisconnectHandler = null;\nlet reconnectionAttempts = 0;\nconst MAX_RECONNECTION_ATTEMPTS = 3;\nlet reconnectionTimeout = null;\n\n// Store characteristics for proper cleanup and persistent connections\nlet hrCharacteristic = null;\nlet hrCharacteristicHandler = null;\n\n/**\n * Connect to a heart rate monitor\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */\nexport async function connectHeartRateMonitor(callbacks, elements) {\n    // Stop any ongoing reconnection attempts before starting a new manual connection\n    if (reconnectionTimeout) {\n        clearTimeout(reconnectionTimeout);\n        reconnectionTimeout = null;\n        console.log('[HR] Canceled automatic reconnection due to new connection attempt.');\n    }\n    reconnectionAttempts = 0; // Reset counter\n\n    await requestWakeLock();\n    console.log('[HR] Connect heart rate monitor requested');\n\n    if (!navigator.bluetooth) {\n        const message = 'Web Bluetooth API is not available.';\n        console.error('[HR]', message);\n        callbacks.onStatusUpdate(message);\n        return false;\n    }\n\n    try {\n        callbacks.onStatusUpdate('Scanning for devices...');\n        if (elements.hrConnectionStatus) {\n            elements.hrConnectionStatus.textContent = 'Scanning...';\n        }\n\n        // Clean up any existing connection before creating a new one\n        if (hrBluetoothDevice) {\n            callbacks.onStatusUpdate('Cleaning up previous connection...');\n            // Clean up characteristic handler\n            if (hrCharacteristic && hrCharacteristicHandler) {\n                try {\n                    hrCharacteristic.removeEventListener('characteristicvaluechanged', hrCharacteristicHandler);\n                } catch (e) {\n                    console.warn('[HR] Error removing HR characteristic listener:', e);\n                }\n                hrCharacteristicHandler = null;\n                hrCharacteristic = null;\n            }\n\n            if (hrDisconnectHandler) {\n                hrBluetoothDevice.removeEventListener('gattserverdisconnected', hrDisconnectHandler);\n                hrDisconnectHandler = null;\n            }\n            if (hrBluetoothDevice.gatt.connected) {\n                hrBluetoothDevice.gatt.disconnect();\n            }\n            hrBluetoothDevice = null;\n        }\n\n        // Show device selection with name prefix filter to help distinguish devices\n        // This allows users to see device names in the selection dialog\n        callbacks.onStatusUpdate('Opening device picker...');\n\n        // CRITICAL: requestDevice must be called directly in user gesture context on mobile\n        // Cannot be deferred or wrapped in Promise on mobile browsers\n        hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: ['heart_rate'],\n                },\n            ],\n            optionalServices: ['device_information', 'battery_service'] // Get additional info if available\n        });\n\n        // Validate that we got a device\n        if (!hrBluetoothDevice) {\n            throw new Error('No device selected');\n        }\n\n        const deviceName = hrBluetoothDevice.name || 'Unknown';\n        callbacks.onStatusUpdate(`Device selected: ${deviceName}`);\n        console.log('[HR] Device selected:', deviceName);\n\n        // Mobile compatibility: Ensure we're still in a valid execution context\n        // Some mobile browsers are strict about timing after user gesture\n        await connectToHRDevice(hrBluetoothDevice, callbacks, elements);\n        return true;\n\n    } catch (error) {\n        // Handle user cancellation separately from actual errors\n        if (error.name === 'NotFoundError') {\n            const message = 'No device selected.';\n            console.log('[HR]', message);\n            callbacks.onStatusUpdate(message);\n            if (elements.hrConnectionStatus) {\n                elements.hrConnectionStatus.textContent = 'Disconnected';\n            }\n        } else if (error.name === 'NetworkError') {\n            // Network errors are common on mobile when Bluetooth is off or device out of range\n            const message = 'Connection failed. Check Bluetooth is enabled and device is nearby.';\n            console.error('[HR] Network error (mobile Bluetooth issue):', error);\n            callbacks.onStatusUpdate(message);\n            if (elements.hrConnectionStatus) {\n                elements.hrConnectionStatus.textContent = 'Connection Failed';\n            }\n        } else if (error.name === 'NotSupportedError') {\n            // Mobile browser may not support all Bluetooth features\n            const message = 'Heart rate monitor not supported on this device.';\n            console.error('[HR] Not supported error:', error);\n            callbacks.onStatusUpdate(message);\n            if (elements.hrConnectionStatus) {\n                elements.hrConnectionStatus.textContent = 'Not Supported';\n            }\n        } else if (error.name === 'SecurityError') {\n            // Security errors can happen if not in secure context or user gesture missing\n            const message = 'Connection blocked. Ensure HTTPS and try again.';\n            console.error('[HR] Security error (HTTPS or user gesture required):', error);\n            callbacks.onStatusUpdate(message);\n            if (elements.hrConnectionStatus) {\n                elements.hrConnectionStatus.textContent = 'Security Error';\n            }\n        } else {\n            const message = `Error: ${error.message}`;\n            console.error('[HR] Connection failed:', error);\n            callbacks.onStatusUpdate(message);\n            if (elements.hrConnectionStatus) {\n                elements.hrConnectionStatus.textContent = 'Connection Failed';\n            }\n        }\n\n        // Clean up on error\n        if (hrCharacteristic && hrCharacteristicHandler) {\n            try {\n                hrCharacteristic.removeEventListener('characteristicvaluechanged', hrCharacteristicHandler);\n            } catch {\n                // Ignore cleanup errors\n            }\n            hrCharacteristicHandler = null;\n            hrCharacteristic = null;\n        }\n\n        if (hrBluetoothDevice && hrDisconnectHandler) {\n            hrBluetoothDevice.removeEventListener('gattserverdisconnected', hrDisconnectHandler);\n            hrDisconnectHandler = null;\n        }\n        hrBluetoothDevice = null;\n\n        return false;\n    }\n}\n\n/**\n * Connect to HR device with enhanced device information\n * @param {BluetoothDevice} device - The Bluetooth device to connect to\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */\nasync function connectToHRDevice(device, callbacks, elements) {\n    const deviceName = device.name || 'Unknown Device';\n    callbacks.onStatusUpdate(`Connecting to ${deviceName}...`);\n    console.log('[HR] Starting connection to:', deviceName);\n\n    // Add disconnect listener BEFORE connecting\n    // CRITICAL: Use async function to prevent blocking on mobile\n    hrDisconnectHandler = async () => {\n        // Add small delay to allow GATT state to settle on mobile\n        await new Promise(resolve => setTimeout(resolve, 100));\n        onHeartRateDisconnected(callbacks, elements);\n    };\n    device.addEventListener('gattserverdisconnected', hrDisconnectHandler);\n\n    try {\n        // Validate device is not already connected (mobile compatibility)\n        if (device.gatt.connected) {\n            callbacks.onStatusUpdate('Resetting existing connection...');\n            device.gatt.disconnect();\n            // Wait for disconnect to complete on mobile\n            await new Promise(resolve => setTimeout(resolve, 200));\n        }\n\n        // Connect to GATT server\n        callbacks.onStatusUpdate('Establishing GATT connection...');\n        const hrServer = await device.gatt.connect();\n\n        // Validate connection was successful (mobile compatibility check)\n        if (!hrServer || !device.gatt.connected) {\n            throw new Error('GATT server connection failed - device not connected');\n        }\n\n        // CRITICAL: Mobile devices need a small delay after GATT connection\n        // before accessing services to allow the connection to fully stabilize\n        await new Promise(resolve => setTimeout(resolve, 300));\n\n        callbacks.onStatusUpdate('Getting heart rate service...');\n\n        // Add timeout for service discovery (mobile can hang here)\n        const hrService = await Promise.race([\n            hrServer.getPrimaryService('heart_rate'),\n            new Promise((_, reject) =>\n                setTimeout(() => reject(new Error('Service discovery timeout - device may be out of range')), 10000)\n            )\n        ]);\n\n        // Small delay before getting characteristic (mobile compatibility)\n        await new Promise(resolve => setTimeout(resolve, 200));\n\n        callbacks.onStatusUpdate('Configuring notifications...');\n\n        // Add timeout for characteristic discovery\n        hrCharacteristic = await Promise.race([\n            hrService.getCharacteristic('heart_rate_measurement'),\n            new Promise((_, reject) =>\n                setTimeout(() => reject(new Error('Characteristic discovery timeout')), 10000)\n            )\n        ]);\n\n        // Clean up any existing handler before adding a new one\n        if (hrCharacteristicHandler) {\n            try {\n                hrCharacteristic.removeEventListener('characteristicvaluechanged', hrCharacteristicHandler);\n            } catch (e) {\n                console.warn('[HR] Error removing old characteristic listener:', e);\n            }\n        }\n\n        // Start notifications to receive heart rate data\n        callbacks.onStatusUpdate('Starting heart rate notifications...');\n\n        // Add timeout for startNotifications (can hang on mobile)\n        await Promise.race([\n            hrCharacteristic.startNotifications(),\n            new Promise((_, reject) =>\n                setTimeout(() => reject(new Error('Notification start timeout - try reconnecting')), 10000)\n            )\n        ]);\n\n        // Validate notifications started successfully (mobile compatibility)\n        if (!hrCharacteristic || !hrCharacteristic.value) {\n            callbacks.onStatusUpdate('Waiting for heart rate data...');\n        }\n\n        // Store the handler reference for proper cleanup\n        hrCharacteristicHandler = (event) => {\n            handleHeartRateChanged(event, callbacks);\n        };\n\n        hrCharacteristic.addEventListener('characteristicvaluechanged', hrCharacteristicHandler);\n\n        console.log('[HR] Connection complete!');\n        callbacks.onStatusUpdate(`Connected to ${deviceName}!`);\n        if (elements.hrConnectionStatus) {\n            elements.hrConnectionStatus.textContent = 'Connected';\n        }\n        // Reset reconnection attempts on successful connection\n        reconnectionAttempts = 0;\n    } catch (error) {\n        console.error('[HR] Connection error:', error);\n\n        // Provide specific error messages for common mobile issues\n        if (error.message && error.message.includes('timeout')) {\n            const msg = error.message;\n            callbacks.onStatusUpdate(msg);\n            console.error('[HR] Timeout - device may be out of range or connection is slow');\n        } else if (error.message && error.message.includes('GATT')) {\n            const msg = 'GATT connection failed (check device is on and nearby)';\n            callbacks.onStatusUpdate(msg);\n            console.error('[HR] GATT connection issue - common on mobile devices');\n        } else {\n            callbacks.onStatusUpdate(`Connection failed: ${error.message}`);\n        }\n\n        // Clean up characteristic handler on connection failure\n        if (hrCharacteristic && hrCharacteristicHandler) {\n            try {\n                hrCharacteristic.removeEventListener('characteristicvaluechanged', hrCharacteristicHandler);\n            } catch {\n                // Ignore cleanup errors\n            }\n            hrCharacteristicHandler = null;\n            hrCharacteristic = null;\n        }\n\n        // Clean up event listener on connection failure\n        device.removeEventListener('gattserverdisconnected', hrDisconnectHandler);\n        hrDisconnectHandler = null;\n        throw error; // Re-throw to be caught by parent function\n    }\n}\n\n/**\n * Check if heart rate monitor is connected\n * @returns {boolean}\n */\nexport function isHeartRateConnected() {\n    // Enhanced check for mobile compatibility - verify both device and GATT state\n    return hrBluetoothDevice &&\n        hrBluetoothDevice.gatt &&\n        hrBluetoothDevice.gatt.connected === true;\n}\n\n/**\n * Disconnect heart rate monitor\n */\nexport function disconnectHeartRate() {\n    // Stop any pending reconnection attempts\n    if (reconnectionTimeout) {\n        clearTimeout(reconnectionTimeout);\n        reconnectionTimeout = null;\n        console.log('[HR] Canceled automatic reconnection due to manual disconnect.');\n    }\n    reconnectionAttempts = 0;\n\n    // Enhanced disconnect for mobile compatibility\n    if (hrBluetoothDevice) {\n        // Clean up characteristic listener first\n        if (hrCharacteristic && hrCharacteristicHandler) {\n            try {\n                hrCharacteristic.removeEventListener('characteristicvaluechanged', hrCharacteristicHandler);\n                hrCharacteristicHandler = null;\n            } catch (e) {\n                console.warn('[HR] Error cleaning up characteristic listener:', e);\n            }\n        }\n\n        // Stop notifications if possible\n        if (hrCharacteristic && hrBluetoothDevice.gatt && hrBluetoothDevice.gatt.connected) {\n            try {\n                hrCharacteristic.stopNotifications().catch(() => {\n                    // Ignore stopNotifications errors\n                });\n            } catch (e) {\n                console.warn('[HR] Error stopping notifications:', e);\n            }\n        }\n\n        hrCharacteristic = null;\n\n        // Remove disconnect handler to prevent automatic reconnection\n        if (hrDisconnectHandler) {\n            try {\n                hrBluetoothDevice.removeEventListener('gattserverdisconnected', hrDisconnectHandler);\n                hrDisconnectHandler = null;\n            } catch (e) {\n                console.warn('[HR] Error removing disconnect handler:', e);\n            }\n        }\n\n        // Disconnect GATT\n        if (hrBluetoothDevice.gatt && hrBluetoothDevice.gatt.connected) {\n            try {\n                hrBluetoothDevice.gatt.disconnect();\n            } catch (e) {\n                console.warn('[HR] Error disconnecting GATT:', e);\n            }\n        }\n\n        // Reset the device reference\n        hrBluetoothDevice = null;\n    }\n}\n\n/**\n * Handle heart rate measurement data\n * @param {Event} event - The characteristic value changed event\n * @param {Object} callbacks - Object containing callback functions\n */\nfunction handleHeartRateChanged(event, callbacks) {\n    try {\n        const value = event.target.value;\n        const heartRate = parseHeartRate(value);\n\n        // Validate the heart rate is a reasonable number\n        if (isNaN(heartRate) || heartRate < 0) {\n            console.error('Invalid heart rate value:', heartRate);\n            return;\n        }\n\n        callbacks.onHeartRateChange(heartRate);\n    } catch (error) {\n        console.error('Error parsing heart rate data:', error.message);\n        // Don't update the UI with invalid data, just log the error\n    }\n}\n\n/**\n * Handle heart rate monitor disconnection\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */\nasync function onHeartRateDisconnected(callbacks, elements) {\n    console.log('[HR] Device disconnected event triggered');\n\n    callbacks.onStatusUpdate('Heart rate monitor disconnected.');\n    if (elements.hrConnectionStatus) {\n        elements.hrConnectionStatus.textContent = 'Disconnected';\n    }\n\n    const wasConnected = hrBluetoothDevice !== null;\n\n    // Clean up characteristic handler\n    if (hrCharacteristic && hrCharacteristicHandler) {\n        try {\n            hrCharacteristic.removeEventListener('characteristicvaluechanged', hrCharacteristicHandler);\n        } catch (e) {\n            console.warn('[HR] Error removing HR characteristic listener on disconnect:', e);\n        }\n        hrCharacteristicHandler = null;\n        hrCharacteristic = null;\n    }\n\n    // Clean up event listener\n    if (hrBluetoothDevice && hrDisconnectHandler) {\n        try {\n            hrBluetoothDevice.removeEventListener('gattserverdisconnected', hrDisconnectHandler);\n        } catch (e) {\n            console.warn('[HR] Error removing disconnect listener:', e);\n        }\n        hrDisconnectHandler = null;\n    }\n\n    // Only attempt to reconnect if there was a device connected previously\n    if (wasConnected && reconnectionAttempts < MAX_RECONNECTION_ATTEMPTS) {\n        reconnectionAttempts++;\n        const delay = 5000; // 5-second delay before attempting to reconnect\n        console.log(`[HR] Reconnection attempt ${reconnectionAttempts}/${MAX_RECONNECTION_ATTEMPTS} in ${delay / 1000}s`);\n        callbacks.onStatusUpdate('Reconnecting...');\n        if (elements.hrConnectionStatus) {\n            elements.hrConnectionStatus.textContent = 'Reconnecting...';\n        }\n\n        reconnectionTimeout = setTimeout(async () => {\n            try {\n                console.log('[HR] Attempting to reconnect...');\n                await connectToHRDevice(hrBluetoothDevice, callbacks, elements);\n                console.log('[HR] Reconnection successful!');\n            } catch (error) {\n                console.error('[HR] Reconnection failed:', error);\n                // The disconnect handler will be called again, triggering the next attempt if applicable\n            }\n        }, delay);\n    } else {\n        if (wasConnected) {\n            console.log('[HR] Maximum reconnection attempts reached.');\n            callbacks.onStatusUpdate('Disconnected. Max reconnect attempts reached.');\n        }\n        hrBluetoothDevice = null;\n        callbacks.onHeartRateChange(0);\n        if (callbacks.onDisconnected) {\n            callbacks.onDisconnected();\n        }\n    }\n}\n\n/**\n * Clean up heart rate Bluetooth event listeners\n * Call this function when the app is closing or resetting connections\n */\nexport function cleanupHeartRateEventListeners() {\n    // Stop any pending reconnection attempts\n    if (reconnectionTimeout) {\n        clearTimeout(reconnectionTimeout);\n        reconnectionTimeout = null;\n    }\n\n    if (hrBluetoothDevice && hrDisconnectHandler) {\n        hrBluetoothDevice.removeEventListener('gattserverdisconnected', hrDisconnectHandler);\n        hrDisconnectHandler = null;\n    }\n}\n","/**\n * Parse heart rate measurement from Bluetooth characteristic value\n * \n * The heart rate measurement is a DataView object following the Bluetooth\n * Heart Rate Measurement characteristic format (org.bluetooth.characteristic.heart_rate_measurement).\n * \n * Format:\n * - Byte 0: Flags (bit 0 indicates value format)\n * - Byte 1+: Heart rate value (UINT8 or UINT16 based on flags)\n * \n * @param {DataView} value - The Bluetooth characteristic value\n * @returns {number} Heart rate in beats per minute (BPM)\n * @throws {Error} If the value is invalid or malformed\n */\nfunction parseHeartRate(value) {\n    // Bluetooth Heart Rate Format Constants\n    const HR_VALUE_FORMAT_FLAG = 0x01; // Bit 0: Heart Rate Value Format (0 = UINT8, 1 = UINT16)\n    const HR_FLAGS_OFFSET = 0;\n    const HR_VALUE_OFFSET = 1;\n\n    // Validate input\n    if (!value || !(value instanceof DataView)) {\n        throw new Error('Invalid heart rate data: value must be a DataView');\n    }\n\n    // Need at least 2 bytes (flags + value)\n    if (value.byteLength < 2) {\n        throw new Error(`Invalid heart rate data: insufficient data (${value.byteLength} bytes)`);\n    }\n\n    const flags = value.getUint8(HR_FLAGS_OFFSET);\n    const isUint16Format = (flags & HR_VALUE_FORMAT_FLAG) !== 0;\n    // Need at least 3 bytes for 16-bit format (flags + 2-byte value)\n    if (isUint16Format && value.byteLength < 3) {\n        throw new Error(`Invalid heart rate data: insufficient data for UINT16 format (${value.byteLength} bytes)`);\n    }\n\n    const heartRate = isUint16Format\n        ? value.getUint16(HR_VALUE_OFFSET, /* littleEndian= */ true)\n        : value.getUint8(HR_VALUE_OFFSET);\n\n    if (typeof heartRate !== 'number' || heartRate < 0 || heartRate > 300) {\n        throw new Error(`Invalid heart rate value: ${heartRate}`);\n    }\n\n    return heartRate;\n}\n\nexport { parseHeartRate };","/**\n * Screen Wake Lock Management Module\n * Handles requesting and releasing screen wake locks to prevent device sleep during sessions\n */\n\nlet wakeLock = null;\n\n/**\n * Request a screen wake lock to prevent the device from sleeping\n * @returns {Promise<boolean>} True if wake lock was acquired, false otherwise\n */\nexport async function requestWakeLock() {\n    // Check if Wake Lock API is supported\n    if (!('wakeLock' in navigator)) {\n        console.warn('Wake Lock API is not supported in this browser');\n        return false;\n    }\n\n    try {\n        wakeLock = await navigator.wakeLock.request('screen');\n\n        wakeLock.addEventListener('release', () => {\n            console.log('Screen wake lock was released');\n        });\n\n        console.log('Screen wake lock acquired');\n        return true;\n    } catch (error) {\n        console.error('Failed to acquire wake lock:', error.name, error.message);\n        return false;\n    }\n}\n\n/**\n * Release the current wake lock\n * @returns {Promise<boolean>} True if wake lock was released, false if none was active\n */\nexport async function releaseWakeLock() {\n    if (wakeLock !== null) {\n        try {\n            await wakeLock.release();\n            wakeLock = null;\n            console.log('Screen wake lock released');\n            return true;\n        } catch (error) {\n            console.error('Failed to release wake lock:', error.name, error.message);\n            return false;\n        }\n    }\n    return false;\n}\n\n/**\n * Check if wake lock is currently active\n * @returns {boolean} True if wake lock is active\n */\nexport function isWakeLockActive() {\n    return wakeLock !== null;\n}","/**\n * Bluetooth Cycling Sensors Module\n * Handles Bluetooth connections for power meters and cadence sensors\n */\n\nimport { requestWakeLock } from './wake-lock.js';\n\n// Bluetooth service UUIDs (using standard Bluetooth GATT service names)\nconst CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\n\n// Constants for cadence calculation\nconst CADENCE_RESET_TIMEOUT_MS = 3000; // Reset cadence after 3 seconds of no data\n\n// Device connection state\nlet powerMeterDevice = null;\nlet speedCadenceBluetoothDevice = null;\n\n// Store event listener references for proper cleanup\nlet powerMeterDisconnectHandler = null;\nlet speedCadenceDisconnectHandler = null;\n\n// Cadence calculation variables\nlet lastCrankRevs = 0;\nlet lastCrankTime = 0;\nlet cadenceResetTimer = null;\n\n/**\n * Generic Bluetooth device connection function\n * @param {Object} config - Configuration object\n * @param {string} config.serviceUuid - Bluetooth service UUID\n * @param {string} config.characteristicUuid - Bluetooth characteristic UUID\n * @param {string} config.scanningMessage - Message to display while scanning\n * @param {string} config.connectedMessage - Message to display when connected\n * @param {string} config.errorPrefix - Prefix for error messages\n * @param {Object} config.deviceRef - Object containing device and handler references\n * @param {Function} config.onDisconnected - Disconnection handler function\n * @param {Function} config.onCharacteristicChange - Characteristic value change handler\n * @param {Function} config.preConnect - Optional function to run before connection (e.g., reset variables)\n * @param {Object} config.elements - UI elements configuration\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n * @returns {Promise<boolean>} - True if connection successful\n */\nasync function connectBluetoothDevice(config, callbacks, elements) {\n    await requestWakeLock();\n\n    if (!navigator.bluetooth) {\n        callbacks.onStatusUpdate('Web Bluetooth API is not available.');\n        return false;\n    }\n\n    try {\n        callbacks.onStatusUpdate(config.scanningMessage);\n\n        // Update status if element exists\n        if (config.elements.statusElement && elements[config.elements.statusElement]) {\n            elements[config.elements.statusElement].textContent = 'Connecting...';\n        }\n\n        // Run pre-connection setup if provided\n        if (config.preConnect) {\n            config.preConnect();\n        }\n\n        // Clean up any existing connection before creating a new one\n        if (config.deviceRef.device) {\n            if (config.deviceRef.handler) {\n                config.deviceRef.device.removeEventListener('gattserverdisconnected', config.deviceRef.handler);\n                config.deviceRef.handler = null;\n            }\n            if (config.deviceRef.device.gatt.connected) {\n                config.deviceRef.device.gatt.disconnect();\n            }\n            config.deviceRef.device = null;\n        }\n\n        // Scan for device\n        config.deviceRef.device = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [config.serviceUuid],\n                },\n            ],\n        });\n\n        // Validate that we got a device\n        if (!config.deviceRef.device) {\n            throw new Error('No device selected');\n        }\n\n        callbacks.onStatusUpdate('Connecting to device...');\n\n        // Update device name if element exists\n        if (config.elements.nameElement && elements[config.elements.nameElement]) {\n            elements[config.elements.nameElement].textContent = `Device: ${config.deviceRef.device.name || 'Unknown Device'}`;\n        }\n\n        // Add disconnect listener BEFORE connecting\n        config.deviceRef.handler = () => {\n            config.onDisconnected(callbacks, elements);\n        };\n        config.deviceRef.device.addEventListener('gattserverdisconnected', config.deviceRef.handler);\n\n        const server = await config.deviceRef.device.gatt.connect();\n        const service = await server.getPrimaryService(config.serviceUuid);\n        const characteristic = await service.getCharacteristic(config.characteristicUuid);\n\n        // Subscribe to notifications\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', (event) => {\n            config.onCharacteristicChange(event, callbacks);\n        });\n\n        callbacks.onStatusUpdate(config.connectedMessage);\n\n        // Update status if element exists\n        if (config.elements.statusElement && elements[config.elements.statusElement]) {\n            elements[config.elements.statusElement].textContent = 'Connected';\n        }\n\n        return true;\n    } catch (error) {\n        // Handle user cancellation separately from actual errors\n        if (error.name === 'NotFoundError') {\n            callbacks.onStatusUpdate('No device selected.');\n        } else {\n            callbacks.onStatusUpdate(`Error: ${error.message}`);\n            console.error(`${config.errorPrefix} connection failed:`, error);\n        }\n\n        // Update error status if element exists\n        if (config.elements.statusElement && elements[config.elements.statusElement]) {\n            elements[config.elements.statusElement].textContent = 'Connection Failed';\n        }\n\n        // Clean up on error\n        if (config.deviceRef.device) {\n            if (config.deviceRef.handler) {\n                config.deviceRef.device.removeEventListener('gattserverdisconnected', config.deviceRef.handler);\n                config.deviceRef.handler = null;\n            }\n            config.deviceRef.device = null;\n        }\n\n        return false;\n    }\n}\n\n/**\n * Connect to a power meter device\n * @param {Object} callbacks - Object containing callback functions\n * @param {Function} callbacks.onPowerMeasurement - Callback for power measurements\n * @param {Function} callbacks.onDisconnected - Callback for disconnection\n * @param {Function} callbacks.onStatusUpdate - Callback for status updates\n * @param {Object} elements - UI elements object\n */\nexport async function connectPowerMeter(callbacks, elements) {\n    const config = {\n        serviceUuid: CYCLING_POWER_SERVICE_UUID,\n        characteristicUuid: CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID,\n        scanningMessage: 'Scanning for power meters...',\n        connectedMessage: 'Connected and receiving data!',\n        errorPrefix: 'Power meter',\n        deviceRef: {\n            device: powerMeterDevice,\n            handler: powerMeterDisconnectHandler\n        },\n        onDisconnected: onPowerMeterDisconnected,\n        onCharacteristicChange: handlePowerMeasurement,\n        elements: {\n            nameElement: 'deviceNameElement',\n            statusElement: null\n        }\n    };\n\n    const result = await connectBluetoothDevice(config, callbacks, elements);\n\n    // Update module-level variables after connection\n    powerMeterDevice = config.deviceRef.device;\n    powerMeterDisconnectHandler = config.deviceRef.handler;\n\n    return result;\n}\n\n/**\n * Connect to a speed/cadence sensor\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */\nexport async function connectSpeedCadenceSensor(callbacks, elements) {\n    const config = {\n        serviceUuid: CYCLING_CADENCE_SERVICE_UUID,\n        characteristicUuid: CSC_MEASUREMENT_CHARACTERISTIC_UUID,\n        scanningMessage: 'Scanning for sensors...',\n        connectedMessage: 'Connected!',\n        errorPrefix: 'Speed/Cadence',\n        deviceRef: {\n            device: speedCadenceBluetoothDevice,\n            handler: speedCadenceDisconnectHandler\n        },\n        onDisconnected: onCadenceDisconnected,\n        onCharacteristicChange: handleSpeedCadenceMeasurement,\n        preConnect: () => {\n            // Reset cadence variables for clean start\n            if (cadenceResetTimer) {\n                clearTimeout(cadenceResetTimer);\n                cadenceResetTimer = null;\n            }\n            lastCrankRevs = 0;\n            lastCrankTime = 0;\n        },\n        elements: {\n            nameElement: 'cadenceDeviceName',\n            statusElement: 'cadenceConnectionStatus'\n        }\n    };\n\n    const result = await connectBluetoothDevice(config, callbacks, elements);\n\n    // Update module-level variables after connection\n    speedCadenceBluetoothDevice = config.deviceRef.device;\n    speedCadenceDisconnectHandler = config.deviceRef.handler;\n\n    return result;\n}\n\n/**\n * Check if power meter is connected\n * @returns {boolean}\n */\nexport function isPowerMeterConnected() {\n    return powerMeterDevice && powerMeterDevice.gatt.connected;\n}\n\n/**\n * Check if speed/cadence sensor is connected\n * @returns {boolean}\n */\nexport function isSpeedCadenceConnected() {\n    return speedCadenceBluetoothDevice && speedCadenceBluetoothDevice.gatt.connected;\n}\n\n/**\n * Disconnect power meter\n */\nexport function disconnectPowerMeter() {\n    if (powerMeterDevice) {\n        // Remove disconnect handler to prevent it from firing during manual disconnect\n        if (powerMeterDisconnectHandler) {\n            try {\n                powerMeterDevice.removeEventListener('gattserverdisconnected', powerMeterDisconnectHandler);\n                powerMeterDisconnectHandler = null;\n            } catch (e) {\n                console.warn('[Power] Error removing disconnect handler:', e);\n            }\n        }\n\n        // Disconnect GATT\n        if (powerMeterDevice.gatt && powerMeterDevice.gatt.connected) {\n            try {\n                powerMeterDevice.gatt.disconnect();\n            } catch (e) {\n                console.warn('[Power] Error disconnecting GATT:', e);\n            }\n        }\n\n        // Reset the device reference\n        powerMeterDevice = null;\n    }\n}\n\n/**\n * Disconnect speed/cadence sensor\n */\nexport function disconnectSpeedCadence() {\n    if (speedCadenceBluetoothDevice) {\n        // Remove disconnect handler to prevent it from firing during manual disconnect\n        if (speedCadenceDisconnectHandler) {\n            try {\n                speedCadenceBluetoothDevice.removeEventListener('gattserverdisconnected', speedCadenceDisconnectHandler);\n                speedCadenceDisconnectHandler = null;\n            } catch (e) {\n                console.warn('[Cadence] Error removing disconnect handler:', e);\n            }\n        }\n\n        // Disconnect GATT\n        if (speedCadenceBluetoothDevice.gatt && speedCadenceBluetoothDevice.gatt.connected) {\n            try {\n                speedCadenceBluetoothDevice.gatt.disconnect();\n            } catch (e) {\n                console.warn('[Cadence] Error disconnecting GATT:', e);\n            }\n        }\n\n        // Reset the device reference\n        speedCadenceBluetoothDevice = null;\n\n        // Clear cadence reset timer and reset variables\n        if (cadenceResetTimer) {\n            clearTimeout(cadenceResetTimer);\n            cadenceResetTimer = null;\n        }\n        lastCrankRevs = 0;\n        lastCrankTime = 0;\n    }\n}\n\n/**\n * Handle power measurement data\n * @param {Event} event - The characteristic value changed event\n * @param {Object} callbacks - Object containing callback functions\n */\nfunction handlePowerMeasurement(event, callbacks) {\n    try {\n        const value = event.target.value;\n\n        // Validate input\n        if (!value || !(value instanceof DataView)) {\n            console.error('Invalid power measurement data: value must be a DataView');\n            return;\n        }\n\n        // Need at least 4 bytes (2 bytes flags + 2 bytes power)\n        if (value.byteLength < 4) {\n            console.error(`Invalid power measurement data: insufficient data (${value.byteLength} bytes)`);\n            return;\n        }\n\n        // The data is a DataView object with a flags field and the power value.\n        // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n        const offset = 2;\n        const power = value.getInt16(offset, true);\n\n        // Validate power is a reasonable value\n        // Negative power can occur (e.g., when coasting with resistance)\n        // but extremely negative values are likely errors\n        if (isNaN(power)) {\n            console.error('Invalid power value: NaN');\n            return;\n        }\n\n        // Warn about unusual values (professional cyclists max ~2000W, errors often show up as very high values)\n        if (power > 3000) {\n            console.warn(`Unusually high power detected: ${power}W`);\n        } else if (power < -500) {\n            console.warn(`Unusually low power detected: ${power}W`);\n        }\n\n        callbacks.onPowerMeasurement(power);\n    } catch (error) {\n        console.error('Error parsing power measurement data:', error.message);\n        // Don't update the UI with invalid data, just log the error\n    }\n}\n\n/**\n * Handle speed/cadence measurement data\n * @param {Event} event - The characteristic value changed event\n * @param {Object} callbacks - Object containing callback functions\n */\nfunction handleSpeedCadenceMeasurement(event, callbacks) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n\n    const wheelRevsPresent = flags & 0x01;\n    const crankRevsPresent = flags & 0x02;\n\n    // Skip wheel revolution data since we don't need speed/distance\n    if (wheelRevsPresent) {\n        offset += 6; // Skip wheel data\n    }\n\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n\n        if (lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - lastCrankRevs;\n            const time = (lastCrankEventTime - lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = (revs / time) * 60; // RPM\n                const roundedCadence = Math.round(cadence);\n\n                callbacks.onCadenceChange(roundedCadence);\n\n                // Clear any existing reset timer\n                if (cadenceResetTimer) {\n                    clearTimeout(cadenceResetTimer);\n                }\n\n                // Set timer to reset cadence to 0 if no new data comes in\n                cadenceResetTimer = setTimeout(() => {\n                    callbacks.onCadenceChange(0);\n                    cadenceResetTimer = null;\n                }, CADENCE_RESET_TIMEOUT_MS);\n            }\n        }\n        lastCrankRevs = cumulativeCrankRevolutions;\n        lastCrankTime = lastCrankEventTime;\n    }\n}\n\n/**\n * Handle power meter disconnection\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */\nfunction onPowerMeterDisconnected(callbacks, elements) {\n    callbacks.onStatusUpdate('Power meter disconnected.');\n    if (elements.deviceNameElement) {\n        elements.deviceNameElement.textContent = '';\n    }\n\n    // Clean up event listener\n    if (powerMeterDevice && powerMeterDisconnectHandler) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', powerMeterDisconnectHandler);\n        powerMeterDisconnectHandler = null;\n    }\n    powerMeterDevice = null;\n\n    callbacks.onDisconnected();\n}\n\n/**\n * Handle cadence sensor disconnection\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */\nfunction onCadenceDisconnected(callbacks, elements) {\n    callbacks.onStatusUpdate('Device disconnected.');\n    if (elements.cadenceConnectionStatus) {\n        elements.cadenceConnectionStatus.textContent = 'Disconnected';\n    }\n    if (elements.cadenceDeviceName) {\n        elements.cadenceDeviceName.textContent = '';\n    }\n    speedCadenceBluetoothDevice = null;\n    callbacks.onCadenceChange(0);\n    if (callbacks.onDisconnected) {\n        callbacks.onDisconnected();\n    }\n\n    // Clear cadence reset timer and reset variables\n    if (cadenceResetTimer) {\n        clearTimeout(cadenceResetTimer);\n        cadenceResetTimer = null;\n    }\n    lastCrankRevs = 0;\n    lastCrankTime = 0;\n}\n\n/**\n * Clean up cycling sensors Bluetooth event listeners\n * Call this function when the app is closing or resetting connections\n */\nexport function cleanupCyclingSensorsEventListeners() {\n    if (powerMeterDevice && powerMeterDisconnectHandler) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', powerMeterDisconnectHandler);\n        powerMeterDisconnectHandler = null;\n    }\n\n    if (speedCadenceBluetoothDevice && speedCadenceDisconnectHandler) {\n        speedCadenceBluetoothDevice.removeEventListener('gattserverdisconnected', speedCadenceDisconnectHandler);\n        speedCadenceDisconnectHandler = null;\n    }\n}\n","/**\n * Export Modals Module\n * Handles modal-based export functionality with user-friendly dialogs\n */\n\n// Import required functions from data-export module\nimport {\n    exportAsJson,\n    exportAsCsv,\n    exportAsTcx,\n    exportAll,\n    uploadToIntervalsIcu\n} from './data-export.js';\n\n// Constants for modal animations\nconst MODAL_ANIMATION_DELAY_MS = 300;\n\n/**\n * Handle export error with user-friendly message\n * @param {Error} error - The error that occurred\n * @param {string} exportType - Type of export that failed\n */\nfunction handleExportError(error, exportType) {\n    const message = `Error during ${exportType} export: ${error.message}`;\n    console.error(message, error);\n    alert(message);\n}\n\n/**\n * Create and show basic export modal\n * @param {Object} dataStore - Data store object containing export data\n */\nexport function showBasicExportModal(dataStore) {\n    const modal = createExportModal('📄 Exports', 'Export your session data in various formats');\n\n    const buttons = [\n        {\n            text: '📥 Export All Files',\n            description: 'Download all export formats at once',\n            className: 'export-all primary',\n            onClick: async () => {\n                try {\n                    await exportAll({\n                        powerData: dataStore.powerData\n                    });\n                    closeModal(modal);\n                    alert('All export files downloaded successfully!');\n                } catch (error) {\n                    handleExportError(error, 'all files');\n                }\n            }\n        },\n        {\n            text: '📊 Export JSON',\n            description: 'JavaScript Object Notation format',\n            onClick: () => {\n                try {\n                    exportAsJson(dataStore.powerData);\n                    closeModal(modal);\n                } catch (error) {\n                    handleExportError(error, 'JSON');\n                }\n            }\n        },\n        {\n            text: '📊 Export CSV',\n            description: 'Comma-Separated Values format',\n            onClick: () => {\n                try {\n                    exportAsCsv(dataStore.powerData);\n                    closeModal(modal);\n                } catch (error) {\n                    handleExportError(error, 'CSV');\n                }\n            }\n        },\n        {\n            text: '🏃 Export TCX',\n            description: 'Training Center XML format',\n            onClick: () => {\n                try {\n                    exportAsTcx(dataStore.powerData);\n                    closeModal(modal);\n                } catch (error) {\n                    handleExportError(error, 'TCX');\n                }\n            }\n        },\n        {\n            text: '☁️ Upload to intervals.icu',\n            description: 'Upload workout directly to intervals.icu',\n            onClick: async (event) => {\n                const apiKey = prompt(\n                    'Enter your intervals.icu API key:\\n\\n' +\n                    'Format: athleteId:apiKey or just apiKey\\n' +\n                    'Find it at: intervals.icu → Settings → Developer Settings\\n\\n' +\n                    'Note: API key is not stored and only used for this upload.'\n                );\n\n                if (!apiKey) {\n                    return; // User cancelled\n                }\n\n                const button = event.target.closest('button');\n                if (!button) {\n                    return;\n                }\n\n                try {\n                    // Show loading state\n                    button.innerHTML = '<span>⏳ Uploading...</span><small style=\"opacity: 0.7; font-size: 0.8em;\">Please wait</small>';\n                    button.disabled = true;\n\n                    await uploadToIntervalsIcu(dataStore.powerData, apiKey);\n\n                    closeModal(modal);\n                    alert('✅ Successfully uploaded workout to intervals.icu!');\n                } catch (error) {\n                    // Restore button state\n                    button.innerHTML = '<span>☁️ Upload to intervals.icu</span><small style=\"opacity: 0.7; font-size: 0.8em;\">Upload workout directly to intervals.icu</small>';\n                    button.disabled = false;\n                    handleExportError(error, 'intervals.icu upload');\n                }\n            }\n        },\n    ];\n\n    addButtonsToModal(modal, buttons);\n    showModal(modal);\n}\n\n/**\n * Create export modal with header\n * @param {string} title - Modal title\n * @param {string} description - Modal description\n * @returns {HTMLElement} Modal element\n */\nfunction createExportModal(title, description) {\n    const modal = document.createElement('div');\n    modal.className = 'export-modal';\n\n    modal.innerHTML = `\n        <div class=\"export-modal-content\">\n            <div class=\"export-modal-header\">\n                <h3 class=\"export-modal-title\">${title}</h3>\n                <button class=\"export-modal-close\" aria-label=\"Close modal\">&times;</button>\n            </div>\n            <div class=\"export-modal-description\">${description}</div>\n            <div class=\"export-modal-buttons\"></div>\n        </div>\n    `;\n\n    // Add close functionality\n    const closeBtn = modal.querySelector('.export-modal-close');\n    closeBtn.addEventListener('click', () => closeModal(modal));\n\n    modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n            closeModal(modal);\n        }\n    });\n\n    return modal;\n}\n\n/**\n * Add buttons to modal\n * @param {HTMLElement} modal - Modal element\n * @param {Array} buttons - Array of button configurations\n */\nfunction addButtonsToModal(modal, buttons) {\n    const buttonsContainer = modal.querySelector('.export-modal-buttons');\n\n    buttons.forEach((buttonConfig) => {\n        const button = document.createElement('button');\n        button.className = `export-modal-button ${buttonConfig.className || ''}`;\n        button.disabled = buttonConfig.disabled || false;\n\n        button.innerHTML = `\n            <span>${buttonConfig.text}</span>\n            ${buttonConfig.description ? `<small style=\"opacity: 0.7; font-size: 0.8em;\">${buttonConfig.description}</small>` : ''}\n        `;\n\n        button.addEventListener('click', buttonConfig.onClick);\n        buttonsContainer.appendChild(button);\n\n        // Add separator after \"Export All\" button\n        if (buttonConfig.className && buttonConfig.className.includes('export-all')) {\n            const separator = document.createElement('div');\n            separator.className = 'export-modal-separator';\n            separator.innerHTML = '<span>Individual Exports</span>';\n            buttonsContainer.appendChild(separator);\n        }\n    });\n}\n\n/**\n * Show modal with animation\n * @param {HTMLElement} modal - Modal element\n */\nfunction showModal(modal) {\n    document.body.appendChild(modal);\n    // Trigger animation\n    requestAnimationFrame(() => {\n        modal.classList.add('show');\n    });\n}\n\n/**\n * Close modal with animation\n * @param {HTMLElement} modal - Modal element\n */\nfunction closeModal(modal) {\n    modal.classList.remove('show');\n    setTimeout(() => {\n        if (modal.parentNode) {\n            document.body.removeChild(modal);\n        }\n    }, MODAL_ANIMATION_DELAY_MS);\n}\n\n/**\n * Setup export menu event listeners\n * @param {Object} dataStore - Data store object\n */\nexport function setupExportMenuListeners(dataStore) {\n    // Basic exports\n    const basicMenuItem = document.getElementById('exportMenuItem');\n    if (basicMenuItem) {\n        basicMenuItem.addEventListener('click', () => {\n            showBasicExportModal(dataStore);\n        });\n    }\n}","/**\n * Data Export Module\n * Handles all data export functionality including JSON, CSV, and TCX exports\n */\n\nimport { generateTcxString } from './create-tcx.js';\nimport { getCurrentDateString } from './ui-management.js';\n\n// Constants for export operations\nconst EXPORT_DELAY_MS = 100; // Delay between downloads to prevent browser blocking\nconst MIME_TYPES = {\n    JSON: 'application/json;charset=utf-8;',\n    CSV: 'text/csv;charset=utf-8;',\n    XML: 'application/vnd.garmin.tcx+xml;charset=utf-8;', // Garmin TCX specific MIME type\n};\n\n/**\n * Validate power data array and its contents\n * @param {Array} powerData - Array to validate\n * @returns {boolean} True if valid\n * @throws {Error} If data is invalid with specific reason\n */\nfunction validatePowerData(powerData) {\n    if (!powerData) {\n        throw new Error('Power data is null or undefined');\n    }\n\n    if (!Array.isArray(powerData)) {\n        throw new Error('Power data must be an array');\n    }\n\n    if (powerData.length === 0) {\n        throw new Error('Power data array is empty');\n    }\n\n    // Validate array contents\n    const invalidItems = powerData.filter(item =>\n        !item || typeof item !== 'object' || item.timestamp === undefined\n    );\n\n    if (invalidItems.length > 0) {\n        throw new Error(`Power data contains ${invalidItems.length} invalid item(s)`);\n    }\n\n    return true;\n}\n\n/**\n * Export power data as JSON\n * @param {Array} powerData - Array of power data points\n * @throws {Error} If power data is invalid or empty\n */\nexport function exportAsJson(powerData) {\n    validatePowerData(powerData);\n\n    const exportData = {\n        mainSensors: powerData\n    };\n\n    const jsonString = JSON.stringify(exportData, null, 2);\n    const blob = new Blob([jsonString], { type: MIME_TYPES.JSON });\n    downloadFile(blob, `power_data_${getCurrentDateString()}.json`);\n}\n\n/**\n * Export power data as CSV\n * @param {Array} powerData - Array of power data points\n * @throws {Error} If power data is invalid or empty\n */\nexport function exportAsCsv(powerData) {\n    validatePowerData(powerData);\n\n    // Build header with main columns\n    let csvContent = 'timestamp,power,heartRate,cadence\\n';\n\n    // Add data rows - main sensor data\n    powerData.forEach((row) => {\n        const timestamp = row.timestamp ?? '';\n        const power = row.power ?? '';\n        const heartRate = row.heartRate ?? '';\n        const cadence = row.cadence ?? '';\n        csvContent += `${timestamp},${power},${heartRate},${cadence}\\n`;\n    });\n\n    const blob = new Blob([csvContent], { type: MIME_TYPES.CSV });\n    downloadFile(blob, `power_data_${getCurrentDateString()}.csv`);\n}\n\n/**\n * Export power data as TCX file\n * @param {Array} powerData - Array of power data points\n * @throws {Error} If power data is invalid, empty, or TCX generation fails\n */\nexport function exportAsTcx(powerData) {\n    validatePowerData(powerData);\n\n    try {\n        const tcxContent = generateTcxString(powerData);\n\n        if (!tcxContent) {\n            throw new Error('Failed to generate TCX content');\n        }\n\n        const blob = new Blob([tcxContent], { type: MIME_TYPES.XML });\n        downloadFile(blob, `power_data_${getCurrentDateString()}.tcx`);\n    } catch (error) {\n        console.error('Error generating TCX:', error);\n        throw error;\n    }\n}\n\n/**\n * Helper function to trigger file download\n * @param {Blob} blob - The blob to download\n * @param {string} filename - The filename for the download\n */\nfunction downloadFile(blob, filename) {\n    try {\n        if (!blob || !(blob instanceof Blob)) {\n            throw new Error('Invalid blob provided for download');\n        }\n\n        if (!filename || typeof filename !== 'string') {\n            throw new Error('Invalid filename provided for download');\n        }\n\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    } catch (error) {\n        console.error('Error during file download:', error);\n        throw error;\n    }\n}\n\n/**\n * Helper function to delay execution (used to prevent browser blocking on multiple downloads)\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise<void>}\n */\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Upload workout to intervals.icu\n * @param {Array} powerData - Array of power data points\n * @param {string} apiKey - intervals.icu API key (athlete ID:API key format)\n * @throws {Error} If power data is invalid, API key is missing, or upload fails\n */\nexport async function uploadToIntervalsIcu(powerData, apiKey) {\n    validatePowerData(powerData);\n\n    if (!apiKey || typeof apiKey !== 'string' || apiKey.trim() === '') {\n        throw new Error('API key is required');\n    }\n\n    try {\n        // Generate TCX content\n        const tcxContent = generateTcxString(powerData);\n\n        if (!tcxContent) {\n            throw new Error('Failed to generate TCX content for upload');\n        }\n\n        // Parse API key (format: \"athleteId:apiKey\" or just \"apiKey\")\n        const apiKeyTrimmed = apiKey.trim();\n        const hasAthleteId = apiKeyTrimmed.includes(':');\n\n        // Create file for upload\n        const blob = new Blob([tcxContent], { type: MIME_TYPES.XML });\n        const file = new File([blob], `workout_${getCurrentDateString()}.tcx`, {\n            type: MIME_TYPES.XML\n        });\n\n        // Prepare form data\n        const formData = new FormData();\n        formData.append('file', file);\n\n        // Make request to intervals.icu API\n        const apiUrl = 'https://intervals.icu/api/v1/athlete/i' + (hasAthleteId ? '' : '0') + '/activities';\n        const headers = {\n            'Authorization': `Basic ${btoa(apiKeyTrimmed)}`\n        };\n\n        const response = await fetch(apiUrl, {\n            method: 'POST',\n            headers: headers,\n            body: formData\n        });\n\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(`Upload failed: ${response.status} ${response.statusText}. ${errorText}`);\n        }\n\n        const result = await response.json();\n        console.log('✅ Successfully uploaded to intervals.icu:', result);\n\n        return result;\n    } catch (error) {\n        console.error('Error uploading to intervals.icu:', error);\n        throw error;\n    }\n}\n\n/**\n * Export all data formats at once\n * @param {Object} data - Object containing powerData\n * @param {Array} data.powerData - Array of power data points\n * @throws {Error} If power data is invalid or if any exports fail\n */\nexport async function exportAll(data) {\n    const { powerData } = data;\n\n    validatePowerData(powerData);\n\n    const errors = [];\n    const exports = [\n        { name: 'Summary JSON', fn: () => exportAsJson(powerData) },\n        { name: 'Summary CSV', fn: () => exportAsCsv(powerData) },\n        { name: 'TCX', fn: () => exportAsTcx(powerData) },\n    ];\n\n\n    // Execute exports with delays between them\n    for (const { name, fn } of exports) {\n        try {\n            fn();\n            console.log(`✓ ${name} exported`);\n        } catch (error) {\n            errors.push(`${name}: ${error.message}`);\n        }\n\n        await delay(EXPORT_DELAY_MS);\n    }\n\n    // Report any errors\n    if (errors.length > 0) {\n        const errorMessage = `Some exports failed:\\n${errors.join('\\n')}`;\n        console.warn('Export errors:', errors);\n        throw new Error(errorMessage);\n    }\n\n    console.log('✅ All exports completed successfully!');\n}","/**\n * TCX (Training Center XML) Generation Module\n * Generates Garmin Training Center Database XML files for cycling activities\n */\n\n/**\n * Check if a data point has valid power data\n * @param {Object} dataPoint - Data point to check\n * @returns {boolean} True if power is present and greater than 0\n */\nfunction hasValidPower(dataPoint) {\n  return dataPoint.power !== undefined && dataPoint.power > 0;\n}\n\n/**\n * Check if a timestamp is valid\n * @param {number} timestamp - Timestamp to validate\n * @returns {boolean} True if timestamp is valid\n */\nfunction isValidTimestamp(timestamp) {\n  return timestamp !== undefined && !isNaN(new Date(timestamp).getTime());\n}\n\n/**\n * Creates a trackpoint XML element for a single data point\n * @param {Object} dataPoint - Data point with time, power, heartRate, cadence\n * @returns {string} XML trackpoint string\n */\nfunction createTrackpoint(dataPoint) {\n  const xmlBuilders = {\n    time: (time) => `<Time>${new Date(time).toISOString()}</Time>`,\n    heartRate: (hr) => `<HeartRateBpm>\n      <Value>${Math.round(hr)}</Value>\n    </HeartRateBpm>`,\n    cadence: (cad) => `<Cadence>${Math.round(cad)}</Cadence>`,\n    power: (pw) => {\n      // Ensure power is a non-negative integer (TCX spec: unsignedShort 0-65535)\n      const watts = Math.max(0, Math.min(2000, Math.round(pw)));\n      return `<Extensions>\n      <TPX xmlns=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\">\n        <Watts>${watts}</Watts>\n      </TPX>\n    </Extensions>`;\n    },\n  };\n\n  const contents = Object.keys(xmlBuilders)\n    .map((key) => {\n      if (dataPoint[key] === undefined) {\n        return '';\n      }\n      return xmlBuilders[key](dataPoint[key]);\n    })\n    .filter(Boolean) // Remove empty strings\n    .join('\\n');\n\n  return `<Trackpoint>\n${contents}\n</Trackpoint>`;\n}\n\n/**\n * Normalize a data point to the format expected by TCX\n * @param {Object} item - Raw data point\n * @returns {Object} Normalized data point with time, power, heartRate, and cadence properties\n */\nfunction normalizeDataPoint(item) {\n  return {\n    time: item.timestamp,\n    ...(item.power !== undefined && { power: item.power }),\n    ...(item.heartRate !== undefined && { heartRate: item.heartRate }),\n    ...(item.cadence !== undefined && { cadence: item.cadence }),\n  };\n}\n\n/**\n * Remove leading and trailing data points without valid power data\n * @param {Array<Object>} dataPoints - Array of data points\n * @returns {Array<Object>} Trimmed array\n */\nfunction trimEmptyPowerEntries(dataPoints) {\n  const result = [...dataPoints];\n\n  // Remove leading entries without power\n  while (result.length > 0 && !hasValidPower(result[0])) {\n    result.shift();\n  }\n\n  // Remove trailing entries without power\n  while (result.length > 0 && !hasValidPower(result[result.length - 1])) {\n    result.pop();\n  }\n\n  return result;\n}\n\n/**\n * Calculate total time in seconds from start to end of data\n * @param {Array<Object>} dataPoints - Array of data points with time property\n * @returns {number} Total time in seconds\n */\nfunction calculateTotalTime(dataPoints) {\n  if (dataPoints.length === 0) {\n    return 0;\n  }\n\n  const startTime = dataPoints[0].time;\n  const endTime = dataPoints[dataPoints.length - 1].time;\n\n  // Convert milliseconds to seconds\n  return Math.round((endTime - startTime) / 1000);\n}\n\n/**\n * Generates TCX XML string from power data for cycling activities\n * @param {Array<Object>} powerData - Array of power measurement objects\n * @returns {string} Complete TCX XML string, or empty string if no valid data\n */\nfunction generateTcxString(powerData) {\n  // Validate input data\n  if (!Array.isArray(powerData) || powerData.length === 0) {\n    return '';\n  }\n\n  // Filter valid data points (must be objects with valid timestamps)\n  const validDataPoints = powerData.filter(\n    (dataPoint) =>\n      dataPoint &&\n      typeof dataPoint === 'object' &&\n      isValidTimestamp(dataPoint.timestamp)\n  );\n\n  if (validDataPoints.length === 0) {\n    return '';\n  }\n\n  // Normalize and sort data by time\n  const processedData = validDataPoints\n    .map(normalizeDataPoint)\n    .sort((a, b) => a.time - b.time);\n\n  // Remove entries without power at the beginning and end\n  const trimmedData = trimEmptyPowerEntries(processedData);\n\n  if (trimmedData.length === 0) {\n    return '';\n  }\n\n  // Generate trackpoints XML\n  const trackpoints = trimmedData.map(createTrackpoint).join('\\n');\n  const startTime = trimmedData[0].time;\n  const startTimeISO = new Date(startTime).toISOString();\n\n  // Calculate total time for lap summary\n  const totalTimeSeconds = calculateTotalTime(trimmedData);\n\n  // Build complete TCX document with proper formatting and required fields\n  const tcxXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<TrainingCenterDatabase\n  xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\n    http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\">\n  <Activities>\n    <Activity Sport=\"Biking\">\n      <Id>${startTimeISO}</Id>\n      <Lap StartTime=\"${startTimeISO}\">\n        <TotalTimeSeconds>${totalTimeSeconds}</TotalTimeSeconds>\n        <DistanceMeters>0</DistanceMeters>\n        <Calories>0</Calories>\n        <Intensity>Active</Intensity>\n        <TriggerMethod>Manual</TriggerMethod>\n        <Track>\n${trackpoints}\n        </Track>\n      </Lap>\n    </Activity>\n  </Activities>\n</TrainingCenterDatabase>`;\n\n  return tcxXml;\n}\n\nexport { generateTcxString };","/**\n * Utility Modals Module\n * Handles utility-related modal functionality\n */\n\n// Constants for modal animations\nconst MODAL_ANIMATION_DELAY_MS = 300;\n\n/**\n * Create and show utilities modal\n * @param {Object} dataStore - Data store object containing export data\n */\nexport function showUtilitiesModal(dataStore) {\n    const modal = createUtilityModal('🛠️ Utilities', 'Session management and utilities');\n\n    const buttons = [\n        {\n            text: '⚡ Disconnect Power Meter',\n            description: 'Disconnect the connected power meter sensor',\n            className: 'secondary',\n            onClick: () => {\n                const connectButton = document.getElementById('connectButton');\n                if (connectButton && connectButton.dataset.connected === 'true') {\n                    const confirmed = confirm('Disconnect power meter?');\n                    if (confirmed) {\n                        connectButton.click();\n                        alert('Power meter disconnected');\n                        closeModal(modal);\n                    }\n                } else {\n                    alert('No power meter connected');\n                }\n            }\n        },\n        {\n            text: '❤️ Disconnect Heart Rate',\n            description: 'Disconnect the connected heart rate monitor',\n            className: 'secondary',\n            onClick: () => {\n                const hrButton = document.getElementById('hrConnectButton');\n                if (hrButton && hrButton.dataset.connected === 'true') {\n                    const confirmed = confirm('Disconnect heart rate monitor?');\n                    if (confirmed) {\n                        hrButton.click();\n                        alert('Heart rate monitor disconnected');\n                        closeModal(modal);\n                    }\n                } else {\n                    alert('No heart rate monitor connected');\n                }\n            }\n        },\n        {\n            text: '🚴 Disconnect Cadence Sensor',\n            description: 'Disconnect the connected cadence/speed sensor',\n            className: 'secondary',\n            onClick: () => {\n                const cadenceButton = document.getElementById('speedCadenceConnectButton');\n                if (cadenceButton && cadenceButton.dataset.connected === 'true') {\n                    const confirmed = confirm('Disconnect cadence sensor?');\n                    if (confirmed) {\n                        cadenceButton.click();\n                        alert('Cadence sensor disconnected');\n                        closeModal(modal);\n                    }\n                } else {\n                    alert('No cadence sensor connected');\n                }\n            }\n        },\n        {\n            text: '🔄 Clear App Cache',\n            description: 'Clear cached files and force reload (ensures fresh version)',\n            className: 'primary',\n            onClick: async () => {\n                const confirmed = confirm(\n                    'This will clear the app cache and reload to get the latest version. Continue?'\n                );\n                if (confirmed) {\n                    await clearAppCache();\n                    alert('Cache cleared! The page will now reload.');\n                    window.location.reload(true);\n                }\n            }\n        },\n        {\n            text: '🗑️ Clear Session Data',\n            description: 'Clear all session data (cannot be undone)',\n            className: 'danger',\n            onClick: () => {\n                const confirmed = confirm(\n                    'Are you sure you want to clear all session data? This action cannot be undone.'\n                );\n                if (confirmed) {\n                    dataStore.resetAllSessionData();\n                    alert('Session data cleared successfully!');\n                    closeModal(modal);\n                }\n            }\n        }\n    ];\n\n    addButtonsToModal(modal, buttons);\n    showModal(modal);\n}\n\n/**\n * Clear app cache and service worker cache\n */\nasync function clearAppCache() {\n    try {\n        // Clear all caches\n        if ('caches' in window) {\n            const cacheNames = await caches.keys();\n            await Promise.all(\n                cacheNames.map(cacheName => {\n                    console.log('Deleting cache:', cacheName);\n                    return caches.delete(cacheName);\n                })\n            );\n            console.log('All caches cleared');\n        }\n\n        // Tell service worker to clear its cache\n        if (navigator.serviceWorker && navigator.serviceWorker.controller) {\n            navigator.serviceWorker.controller.postMessage({\n                type: 'CLEAR_CACHE'\n            });\n        }\n\n        // Unregister service worker to ensure clean reload\n        if (navigator.serviceWorker) {\n            const registrations = await navigator.serviceWorker.getRegistrations();\n            for (let registration of registrations) {\n                await registration.unregister();\n                console.log('Service worker unregistered');\n            }\n        }\n    } catch (error) {\n        console.error('Error clearing cache:', error);\n    }\n}\n\n/**\n * Create utility modal with header\n * @param {string} title - Modal title\n * @param {string} description - Modal description\n * @returns {HTMLElement} Modal element\n */\nfunction createUtilityModal(title, description) {\n    const modal = document.createElement('div');\n    modal.className = 'export-modal';\n\n    modal.innerHTML = `\n        <div class=\"export-modal-content\">\n            <div class=\"export-modal-header\">\n                <h3 class=\"export-modal-title\">${title}</h3>\n                <button class=\"export-modal-close\" aria-label=\"Close modal\">&times;</button>\n            </div>\n            <div class=\"export-modal-description\">${description}</div>\n            <div class=\"export-modal-buttons\"></div>\n        </div>\n    `;\n\n    // Add close functionality\n    const closeBtn = modal.querySelector('.export-modal-close');\n    closeBtn.addEventListener('click', () => closeModal(modal));\n\n    modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n            closeModal(modal);\n        }\n    });\n\n    return modal;\n}\n\n/**\n * Add buttons to modal\n * @param {HTMLElement} modal - Modal element\n * @param {Array} buttons - Array of button configurations\n */\nfunction addButtonsToModal(modal, buttons) {\n    const buttonsContainer = modal.querySelector('.export-modal-buttons');\n\n    buttons.forEach((buttonConfig) => {\n        const button = document.createElement('button');\n        button.className = `export-modal-button ${buttonConfig.className || ''}`;\n        button.disabled = buttonConfig.disabled || false;\n\n        button.innerHTML = `\n            <span>${buttonConfig.text}</span>\n            ${buttonConfig.description ? `<small style=\"opacity: 0.7; font-size: 0.8em;\">${buttonConfig.description}</small>` : ''}\n        `;\n\n        button.addEventListener('click', buttonConfig.onClick);\n        buttonsContainer.appendChild(button);\n    });\n}\n\n/**\n * Show modal with animation\n * @param {HTMLElement} modal - Modal element\n */\nfunction showModal(modal) {\n    document.body.appendChild(modal);\n    // Trigger animation\n    requestAnimationFrame(() => {\n        modal.classList.add('show');\n    });\n}\n\n/**\n * Close modal with animation\n * @param {HTMLElement} modal - Modal element\n */\nfunction closeModal(modal) {\n    modal.classList.remove('show');\n    setTimeout(() => {\n        if (modal.parentNode) {\n            document.body.removeChild(modal);\n        }\n    }, MODAL_ANIMATION_DELAY_MS);\n}\n\n/**\n * Setup utility menu event listeners\n * @param {Object} dataStore - Data store object\n */\nexport function setupUtilityMenuListeners(dataStore) {\n    const utilsMenuItem = document.getElementById('exportUtilsMenuItem');\n    if (utilsMenuItem) {\n        utilsMenuItem.addEventListener('click', () => {\n            showUtilitiesModal(dataStore);\n        });\n    }\n}\n","/**\n * Notification System Module\n * Handles displaying temporary notifications to the user\n */\n\n// Constants for notification system\nconst NOTIFICATION_DURATION_MS = 5000;\nconst ANIMATION_DURATION_MS = 300;\nconst NOTIFICATION_COLORS = {\n  success: '#4CAF50',\n  error: '#f44336',\n  warning: '#ff9800',\n  info: '#2196F3'\n};\n\n/**\n * Ensure animation styles are added to the document\n */\nfunction ensureAnimationStyles() {\n  if (!document.getElementById('notification-styles')) {\n    const style = document.createElement('style');\n    style.id = 'notification-styles';\n    style.textContent = `\n            @keyframes slideIn {\n                from { transform: translateX(100%); opacity: 0; }\n                to { transform: translateX(0); opacity: 1; }\n            }\n        `;\n    document.head.appendChild(style);\n  }\n}\n\n/**\n * Create a notification element with the specified styling\n * @param {string} message - The notification message\n * @param {string} backgroundColor - The background color for the notification\n * @returns {HTMLElement} The notification element\n */\nfunction createNotificationElement(message, backgroundColor) {\n  const notification = document.createElement('div');\n  notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: ${backgroundColor};\n        color: white;\n        padding: 1rem 1.5rem;\n        border-radius: 8px;\n        z-index: 1000;\n        font-size: 0.9rem;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        animation: slideIn 0.3s ease-out;\n        max-width: 300px;\n        word-wrap: break-word;\n    `;\n  notification.textContent = message;\n  return notification;\n}\n\n/**\n * Remove a notification with animation\n * @param {HTMLElement} notification - The notification element to remove\n */\nfunction removeNotification(notification) {\n  notification.style.animation = 'slideIn 0.3s ease-out reverse';\n  setTimeout(() => {\n    if (notification.parentNode) {\n      notification.parentNode.removeChild(notification);\n    }\n  }, ANIMATION_DURATION_MS);\n}\n\n/**\n * Show a notification that the session was restored\n * @param {number} dataPointCount - Number of data points recovered\n */\nexport function showSessionRestoredNotification(dataPointCount) {\n  ensureAnimationStyles();\n\n  const message = `Session restored! ${dataPointCount} data points recovered.`;\n  const notification = createNotificationElement(message, NOTIFICATION_COLORS.success);\n\n  document.body.appendChild(notification);\n\n  // Remove notification after duration\n  setTimeout(() => {\n    removeNotification(notification);\n  }, NOTIFICATION_DURATION_MS);\n}\n\n/**\n * Show a generic notification with custom message and type\n * @param {string} message - The message to display\n * @param {string} type - The type of notification ('success', 'error', 'info', 'warning')\n * @param {number} duration - Duration in milliseconds to show the notification (default: 5000ms)\n */\nexport function showNotification(message, type = 'info', duration = NOTIFICATION_DURATION_MS) {\n  ensureAnimationStyles();\n\n  const backgroundColor = NOTIFICATION_COLORS[type] || NOTIFICATION_COLORS.info;\n  const notification = createNotificationElement(message, backgroundColor);\n\n  document.body.appendChild(notification);\n\n  // Remove notification after specified duration\n  setTimeout(() => {\n    removeNotification(notification);\n  }, duration);\n}","/**\n * UI Event Handlers Module\n * Handles all UI event listeners for toggles, menus, and interactions\n */\n\nimport { showAppInfo } from './app-info-modal.js';\n\n/**\n * Set up hamburger menu functionality\n\n/**\n * Setup hamburger menu functionality\n * @param {Object} elements - UI elements object\n */\nexport function setupHamburgerMenu(elements) {\n    if (!elements.hamburgerBtn || !elements.menuDropdown) {\n        console.error('Hamburger menu elements not found:', {\n            hamburgerBtn: !!elements.hamburgerBtn,\n            menuDropdown: !!elements.menuDropdown,\n        });\n        return;\n    }\n\n    // Hamburger menu functionality\n    elements.hamburgerBtn.addEventListener('click', function () {\n        const isActive = elements.menuDropdown.classList.contains('active');\n        if (isActive) {\n            elements.menuDropdown.classList.remove('active');\n        } else {\n            elements.menuDropdown.classList.add('active');\n        }\n    });\n\n    // Close menu when clicking outside\n    document.addEventListener('click', function (event) {\n        if (!event.target.closest('.hamburger-menu')) {\n            elements.menuDropdown.classList.remove('active');\n        }\n    });\n}\n\n/**\n * Setup menu item functionality\n * @param {Object} elements - UI elements object\n */\nexport function setupMenuItems(elements) {\n    // Info functionality\n    if (elements.showInfoMenuItem) {\n        elements.showInfoMenuItem.addEventListener('click', function () {\n            showAppInfo();\n            // Close the menu after showing info\n            if (elements.menuDropdown) {\n                elements.menuDropdown.classList.remove('active');\n            }\n        });\n    } else {\n        console.error('Show info menu item not found');\n    }\n}\n\n/**\n * Function to update dashboard layout based on visible sections\n */\nfunction updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const powerAveragesSection = document.getElementById('powerAveragesSection');\n    const powerAveragesHidden = powerAveragesSection && powerAveragesSection.style.display === 'none';\n\n    if (dashboard) {\n        if (powerAveragesHidden) {\n            dashboard.classList.add('maximized');\n        } else {\n            dashboard.classList.remove('maximized');\n        }\n    }\n\n    // Manage horizontal layout for collapsed sections (excluding bottom controls)\n    manageCollapsedSectionsLayout();\n}\n\n/**\n * Function to manage horizontal layout of collapsed sections\n */\nfunction manageCollapsedSectionsLayout() {\n    const dashboard = document.querySelector('.dashboard');\n\n    if (!dashboard) return;\n\n    // Only manage power averages section for collapsed layout -\n    // connect and export sections are now bottom controls and stay at bottom\n    // Note: collapsedSections logic simplified since only power averages section is managed now\n\n    // Remove any existing collapsed sections row\n    const existingRow = document.querySelector('.collapsed-sections-row');\n    if (existingRow) {\n        // Move sections back to their original positions\n        const sectionsInRow = existingRow.querySelectorAll('.power-averages-section');\n        sectionsInRow.forEach((section) => {\n            // Insert sections back after the dashboard\n            dashboard.parentNode.insertBefore(section, dashboard.nextSibling);\n        });\n        existingRow.remove();\n    }\n\n    // Power averages section doesn't need horizontal grouping since it's the only\n    // section that can be managed this way now\n    dashboard.classList.remove('has-collapsed-sections');\n}\n\n/**\n * Initialize all UI sections\n * @param {Object} elements - UI elements object\n */\nexport function initializeSections(elements) {\n    // Initialize power averages section as visible by default\n    if (elements.powerAveragesSection) {\n        elements.powerAveragesSection.style.display = 'block';\n    }\n\n    updateDashboardLayout();\n}","/**\n * Show application information and usage instructions\n */\nfunction showAppInfo() {\n    const modal = document.createElement('div');\n    modal.className = 'modal-backdrop';\n    modal.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n    `;\n\n    const modalContent = document.createElement('div');\n    modalContent.className = 'modal';\n    modalContent.style.cssText = `\n        background: #1a1a2e;\n        border-radius: 12px;\n        padding: 2rem;\n        max-width: 600px;\n        max-height: 80vh;\n        overflow-y: auto;\n        margin: 20px;\n        border: 1px solid rgba(255, 255, 255, 0.2);\n    `;\n\n    // Create QR code canvas\n    const qrCanvas = document.createElement('canvas');\n    qrCanvas.width = 200;\n    qrCanvas.height = 200;\n    qrCanvas.style.cssText = `\n        background: white;\n        border-radius: 8px;\n        margin: 1rem auto;\n        max-width: 100%;\n        height: auto;\n        display: block;\n    `;\n\n    modalContent.innerHTML = `\n        <div style=\"text-align: center; margin-bottom: 1.5rem;\">\n            <h2 style=\"color: #3498db; margin: 0 0 0.5rem 0; font-size: 1.8rem;\">🚴 Web Bluetooth Power Meter</h2>\n            <p style=\"color: #cccccc; margin: 0; font-size: 1rem;\">Real-time cycling data analysis</p>\n        </div>\n\n        <div style=\"color: #ffffff; line-height: 1.6;\">\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">📱 Share This App</h3>\n            <div style=\"text-align: center; margin-bottom: 1rem;\">\n                <div id=\"qr-container\" style=\"margin: 1rem 0;\"></div>\n                <p style=\"color: #ffffff; margin: 0.5rem 0; font-weight: 600;\">Scan to access on any device</p>\n                <a href=\"https://colscoding.github.io/power-saver/\" target=\"_blank\" style=\"\n                    color: #9b59b6; \n                    text-decoration: none; \n                    font-size: 0.9rem;\n                    word-break: break-all;\n                    line-height: 1.4;\n                \">https://colscoding.github.io/power-saver/</a>\n            </div>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">📱 What is this app?</h3>\n            <p style=\"margin-bottom: 1rem;\">\n                This is a web-based power meter application that connects to Bluetooth devices:\n            </p>\n            <ul style=\"margin: 0 0 1rem 1rem; padding-left: 1rem;\">\n                <li>cycling power meter</li>\n                <li>cadence sensor</li>\n                <li>heart rate sensor</li>\n            </ul>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 2rem;\">\n            <button id=\"closeInfoModal\" style=\"\n                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);\n                color: white;\n                border: none;\n                padding: 12px 24px;\n                border-radius: 8px;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.3s ease;\n            \">Got it!</button>\n        </div>\n    `;\n\n    // Insert QR code canvas\n    const qrContainer = modalContent.querySelector('#qr-container');\n    qrContainer.appendChild(qrCanvas);\n\n    // Generate QR code\n    generateQRCode(qrCanvas);\n\n    modal.appendChild(modalContent);\n    document.body.appendChild(modal);\n\n    // Close modal event listeners\n    const closeButton = modalContent.querySelector('#closeInfoModal');\n    const closeModal = () => {\n        document.body.removeChild(modal);\n    };\n\n    closeButton.addEventListener('click', closeModal);\n    modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n            closeModal();\n        }\n    });\n\n    // Close on Escape key\n    const handleEscape = (e) => {\n        if (e.key === 'Escape') {\n            closeModal();\n            document.removeEventListener('keydown', handleEscape);\n        }\n    };\n    document.addEventListener('keydown', handleEscape);\n\n    // Add hover effect to button\n    closeButton.addEventListener('mouseenter', () => {\n        closeButton.style.transform = 'translateY(-2px)';\n        closeButton.style.boxShadow = '0 8px 24px rgba(52, 152, 219, 0.4)';\n    });\n\n    closeButton.addEventListener('mouseleave', () => {\n        closeButton.style.transform = 'translateY(0)';\n        closeButton.style.boxShadow = 'none';\n    });\n}\n\n/**\n * Generate QR code on canvas using inline base64 data\n */\nfunction generateQRCode(canvas) {\n    const ctx = canvas.getContext('2d');\n    const size = canvas.width;\n\n    // Clear canvas with white background\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, size, size);\n\n    // Base64 encoded QR code data\n    const qrBase64 = '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';\n\n    // Load base64 encoded QR code\n    const img = new Image();\n\n    img.onload = function () {\n        ctx.drawImage(img, 0, 0, size, size);\n    };\n\n    img.onerror = function () {\n        // Fallback: draw a simple pattern if base64 data fails to load\n        drawFallbackQR(ctx, size);\n    };\n\n    img.src = 'data:image/png;base64,' + qrBase64;\n}\n\n/**\n * Fallback QR code representation when local image is unavailable\n */\nfunction drawFallbackQR(ctx, size) {\n    ctx.fillStyle = '#000000';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n\n    // Draw a simple grid pattern\n    const cellSize = size / 25;\n    for (let i = 0; i < 25; i++) {\n        for (let j = 0; j < 25; j++) {\n            if ((i + j) % 3 === 0 || i === 0 || i === 24 || j === 0 || j === 24) {\n                ctx.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);\n            }\n        }\n    }\n\n    // Add text in center\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(size * 0.2, size * 0.4, size * 0.6, size * 0.2);\n    ctx.fillStyle = '#000000';\n    ctx.fillText('QR Code', size / 2, size / 2 - 10);\n    ctx.fillText('Unavailable', size / 2, size / 2 + 10);\n}\n\nexport { showAppInfo };","/**\n * Metric Icon Handlers\n * Handles click events on metric icons to show information\n */\n\n/**\n * Show a modal with metric information\n * @param {string} title - The title of the modal\n * @param {string} description - The description text\n */\nfunction showMetricInfo(title, description) {\n    // Create modal elements\n    const modal = document.createElement('div');\n    modal.className = 'metric-info-modal';\n    modal.innerHTML = `\n        <div class=\"metric-info-content\">\n            <div class=\"metric-info-header\">\n                <h3>${title}</h3>\n                <button class=\"metric-info-close\" aria-label=\"Close\">×</button>\n            </div>\n            <div class=\"metric-info-body\">\n                <p>${description}</p>\n            </div>\n        </div>\n    `;\n\n    // Add to DOM\n    document.body.appendChild(modal);\n\n    // Trigger animation\n    setTimeout(() => modal.classList.add('active'), 10);\n\n    // Close handlers\n    const closeBtn = modal.querySelector('.metric-info-close');\n    const closeModal = () => {\n        modal.classList.remove('active');\n        setTimeout(() => modal.remove(), 300);\n    };\n\n    closeBtn.addEventListener('click', closeModal);\n    modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n            closeModal();\n        }\n    });\n\n    // ESC key to close\n    const handleEsc = (e) => {\n        if (e.key === 'Escape') {\n            closeModal();\n            document.removeEventListener('keydown', handleEsc);\n        }\n    };\n    document.addEventListener('keydown', handleEsc);\n}\n\n/**\n * Initialize metric icon event listeners\n */\nexport function initializeMetricIcons() {\n    // Power icon\n    const powerIcon = document.getElementById('powerIcon');\n    if (powerIcon) {\n        powerIcon.addEventListener('click', (e) => {\n            e.preventDefault();\n            showMetricInfo(\n                '⚡ Power Output',\n                'Power output is measured in Watts and represents the amount of work you are doing on the bike. ' +\n                'It is calculated by measuring the force applied to the pedals and the speed of pedaling. ' +\n                'Higher power output means you are working harder. This metric is the most accurate way to measure cycling effort.'\n            );\n        });\n    }\n\n    // Heart Rate icon\n    const hrIcon = document.getElementById('hrIcon');\n    if (hrIcon) {\n        hrIcon.addEventListener('click', (e) => {\n            e.preventDefault();\n            showMetricInfo(\n                '❤️ Heart Rate',\n                'Heart rate is measured in beats per minute (BPM) and indicates how hard your cardiovascular system is working. ' +\n                'Your heart rate increases as exercise intensity increases. Monitoring heart rate helps you train in specific zones ' +\n                'for different fitness goals. Connect a Bluetooth heart rate monitor to track this metric.'\n            );\n        });\n    }\n\n    // Cadence icon\n    const cadenceIcon = document.getElementById('cadenceIcon');\n    if (cadenceIcon) {\n        cadenceIcon.addEventListener('click', (e) => {\n            e.preventDefault();\n            showMetricInfo(\n                '🚴 Cadence',\n                'Cadence is measured in revolutions per minute (RPM) and represents how fast you are pedaling. ' +\n                'Most cyclists aim for a cadence between 80-100 RPM for optimal efficiency. ' +\n                'Higher cadence with lower resistance can reduce muscle fatigue, while lower cadence with higher resistance builds strength. ' +\n                'Connect a speed & cadence sensor to track this metric.'\n            );\n        });\n    }\n}\n"],"names":["$d8d8e1ee9f4f63bb$var$avg10sCurrentElement","$d8d8e1ee9f4f63bb$var$avg10sBestElement","$d8d8e1ee9f4f63bb$var$avg20sCurrentElement","$d8d8e1ee9f4f63bb$var$avg20sBestElement","$d8d8e1ee9f4f63bb$var$avg30sCurrentElement","$d8d8e1ee9f4f63bb$var$avg30sBestElement","$d8d8e1ee9f4f63bb$var$avg40sCurrentElement","$d8d8e1ee9f4f63bb$var$avg40sBestElement","$d8d8e1ee9f4f63bb$var$avg50sCurrentElement","$d8d8e1ee9f4f63bb$var$avg50sBestElement","$d8d8e1ee9f4f63bb$var$avg1mCurrentElement","$d8d8e1ee9f4f63bb$var$avg1mBestElement","$d8d8e1ee9f4f63bb$var$avg2mCurrentElement","$d8d8e1ee9f4f63bb$var$avg2mBestElement","$d8d8e1ee9f4f63bb$var$avg3mCurrentElement","$d8d8e1ee9f4f63bb$var$avg3mBestElement","$d8d8e1ee9f4f63bb$var$avg4mCurrentElement","$d8d8e1ee9f4f63bb$var$avg4mBestElement","$d8d8e1ee9f4f63bb$var$avg5mCurrentElement","$d8d8e1ee9f4f63bb$var$avg5mBestElement","$491b63e3dddf3ff3$export$bf187d7d6e084fc8","banner","waitingWorker","createBanner","document","createElement","id","className","innerHTML","show","body","appendChild","attachEventListeners","setTimeout","classList","add","hide","remove","parentNode","removeChild","updateBtn","querySelector","laterBtn","addEventListener","handleUpdateClick","handleLaterClick","console","log","postMessage","type","showUpdatingMessage","window","location","reload","message","$c9a4bb8cb8ea0795$var$installPrompt","$c9a4bb8cb8ea0795$var$updateBanner","$c9a4bb8cb8ea0795$var$offlineIndicator","$49d40965a96e1948$exports","resolve","$cc35ee5c64337d79$var$SESSION_STORAGE_KEY","$cc35ee5c64337d79$export$3b97cfd23e0d13d8","dataStore","sessionData","timestamp","Date","now","powerData","lastPowerValue","lastHeartRateValue","lastCadenceValue","sessionStartTime","localStorage","setItem","JSON","stringify","error","warn","$cc35ee5c64337d79$export$37b6cafab9b29f47","removeItem","$d8d8e1ee9f4f63bb$var$TIME_PERIODS_MS","$d8d8e1ee9f4f63bb$var$lastPowerTimestamp","$d8d8e1ee9f4f63bb$var$powerAverages","current","best","$d8d8e1ee9f4f63bb$export$890cc05f11700e2c","textContent","$d8d8e1ee9f4f63bb$export$153010588d52d05c","period","Object","keys","$26bf0f38c1315f82$export$7a5d735b2ab6389d","powerValueElement","hrValueElement","cadenceValueElement","deviceNameElement","cadenceDeviceName","statusText","hrStatusText","cadenceStatusText","hrConnectionStatus","cadenceConnectionStatus","powerMeterConnectButton","hrConnectButton","speedCadenceConnectButton","powerAveragesSection","hamburgerBtn","menuDropdown","showInfoMenuItem","$26bf0f38c1315f82$export$d9870def68db0ffb","$26bf0f38c1315f82$export$c17ef08f48962999","button","isConnecting","setAttribute","$26bf0f38c1315f82$export$b5051178064abb72","year","getFullYear","month","String","getMonth","padStart","day","getDate","$ee8dba17fe5eb4b4$export$1d0d101be0e1eace","navigator","$ee8dba17fe5eb4b4$var$wakeLock","wakeLock","request","name","$fe739546a31d388a$var$hrBluetoothDevice","$fe739546a31d388a$var$hrDisconnectHandler","$fe739546a31d388a$var$reconnectionAttempts","$fe739546a31d388a$var$reconnectionTimeout","$fe739546a31d388a$var$hrCharacteristic","$fe739546a31d388a$var$hrCharacteristicHandler","$fe739546a31d388a$export$830e9b592dbab083","callbacks","elements","clearTimeout","bluetooth","onStatusUpdate","removeEventListener","e","gatt","connected","disconnect","requestDevice","filters","services","optionalServices","Error","deviceName","$fe739546a31d388a$var$connectToHRDevice","device","Promise","$fe739546a31d388a$var$onHeartRateDisconnected","hrServer","connect","hrService","race","getPrimaryService","_","reject","getCharacteristic","startNotifications","value","event","$fe739546a31d388a$var$handleHeartRateChanged","target","heartRate","DataView","byteLength","isUint16Format","flags","getUint8","getUint16","isNaN","onHeartRateChange","includes","msg","$fe739546a31d388a$export$e8a0920d368e1227","wasConnected","onDisconnected","$67670bb3fd2c11fb$var$powerMeterDevice","$67670bb3fd2c11fb$var$speedCadenceBluetoothDevice","$67670bb3fd2c11fb$var$powerMeterDisconnectHandler","$67670bb3fd2c11fb$var$speedCadenceDisconnectHandler","$67670bb3fd2c11fb$var$lastCrankRevs","$67670bb3fd2c11fb$var$lastCrankTime","$67670bb3fd2c11fb$var$cadenceResetTimer","$67670bb3fd2c11fb$var$connectBluetoothDevice","config","scanningMessage","statusElement","preConnect","deviceRef","handler","serviceUuid","nameElement","server","service","characteristic","characteristicUuid","onCharacteristicChange","connectedMessage","errorPrefix","$67670bb3fd2c11fb$export$7cd63989f2e13954","$67670bb3fd2c11fb$var$onPowerMeterDisconnected","$67670bb3fd2c11fb$var$handlePowerMeasurement","result","$67670bb3fd2c11fb$export$15696ad475844a91","$67670bb3fd2c11fb$var$onCadenceDisconnected","$67670bb3fd2c11fb$var$handleSpeedCadenceMeasurement","$67670bb3fd2c11fb$export$3aa2dffa9bc119b1","$67670bb3fd2c11fb$export$3508b7cf9f8826e8","power","getInt16","onPowerMeasurement","offset","wheelRevsPresent","cumulativeCrankRevolutions","lastCrankEventTime","revs","time","roundedCadence","Math","round","onCadenceChange","$bdf94e4d5edca10a$var$hasValidPower","dataPoint","undefined","$bdf94e4d5edca10a$var$createTrackpoint","xmlBuilders","toISOString","hr","cadence","cad","pw","watts","max","min","contents","map","key","filter","Boolean","join","$bdf94e4d5edca10a$var$normalizeDataPoint","item","$bdf94e4d5edca10a$export$84088f6ac1d2df1d","Array","isArray","length","validDataPoints","getTime","trimmedData","$bdf94e4d5edca10a$var$trimEmptyPowerEntries","dataPoints","shift","pop","sort","a","b","trackpoints","startTimeISO","totalTimeSeconds","$bdf94e4d5edca10a$var$calculateTotalTime","startTime","endTime","$8ca4b0f2a2d350fa$var$validatePowerData","invalidItems","$8ca4b0f2a2d350fa$export$20b155984c11fcae","$8ca4b0f2a2d350fa$var$downloadFile","Blob","mainSensors","$8ca4b0f2a2d350fa$export$dfe05421fb7443f9","csvContent","forEach","row","$8ca4b0f2a2d350fa$export$55f444e58fd8eb49","tcxContent","blob","filename","url","URL","createObjectURL","href","download","click","revokeObjectURL","$8ca4b0f2a2d350fa$export$1d4030922ae5cd5b","apiKey","trim","apiKeyTrimmed","hasAthleteId","file","File","formData","FormData","append","headers","btoa","response","fetch","method","ok","errorText","text","status","json","$8ca4b0f2a2d350fa$export$64da5a70f1570a50","data","errors","fn","push","errorMessage","$1fea2fc27e5705f2$var$handleExportError","exportType","alert","$1fea2fc27e5705f2$var$closeModal","modal","$5b4eaaddc8f9222a$var$clearAppCache","cacheNames","caches","all","cacheName","delete","serviceWorker","controller","registration","getRegistrations","unregister","$5b4eaaddc8f9222a$var$closeModal","$0bb0154a5714c8a0$var$showMetricInfo","title","description","closeBtn","closeModal","handleEsc","$b63be9b0371e788c$var$powerData","$b63be9b0371e788c$var$lastPowerValue","$b63be9b0371e788c$var$lastHeartRateValue","$b63be9b0371e788c$var$lastCadenceValue","$b63be9b0371e788c$var$sessionStartTime","$b63be9b0371e788c$var$dataLoggerInterval","$b63be9b0371e788c$var$periodicSaveInterval","$b63be9b0371e788c$var$sessionRestored","$b63be9b0371e788c$var$powerMeterConnecting","$b63be9b0371e788c$var$heartRateConnecting","$b63be9b0371e788c$var$speedCadenceConnecting","$b63be9b0371e788c$var$dataStore","resetAllSessionData","$b63be9b0371e788c$var$powerMeterCallbacks","displayValue","timeDelta","periodKey","periodMs","entries","nextAvg","currentAvg","clearInterval","$b63be9b0371e788c$var$updateAllConnectButtonVisibility","$b63be9b0371e788c$var$heartRateCallbacks","connectionStates","powerMeter","speedCadence","$b63be9b0371e788c$var$initializeApp","getElementById","style","display","dashboard","powerAveragesHidden","$d455cb11b3bc64fd$var$manageCollapsedSectionsLayout","existingRow","sectionsInRow","querySelectorAll","section","insertBefore","nextSibling","powerIcon","preventDefault","hrIcon","cadenceIcon","contains","closest","cssText","modalContent","qrCanvas","width","height","qrContainer","$c8a6253a3b39b109$var$generateQRCode","canvas","ctx","getContext","size","fillStyle","fillRect","img","Image","onload","drawImage","onerror","font","textAlign","cellSize","i","j","fillText","src","closeButton","handleEscape","transform","boxShadow","shouldDisconnect","confirm","setInterval","stopNotifications","catch","speedCadenceCallbacks","basicMenuItem","$1fea2fc27e5705f2$var$createExportModal","buttons","onClick","prompt","disabled","$1fea2fc27e5705f2$var$addButtonsToModal","buttonsContainer","buttonConfig","separator","requestAnimationFrame","utilsMenuItem","$5b4eaaddc8f9222a$var$createUtilityModal","connectButton","dataset","hrButton","cadenceButton","$5b4eaaddc8f9222a$var$addButtonsToModal","savedData","getItem","parse","sessionAge","backdrop","dataCount","$b63be9b0371e788c$var$restoreSessionData","values","dataPointCount","head","notification","$e75b18aae82f997e$var$createNotificationElement","backgroundColor","animation","toLocaleString","$b63be9b0371e788c$var$handleAppCleanup","startY","isPulling","scrollY","touches","pageY","passive","pullDistance","returnValue","overscrollBehavior","$c9a4bb8cb8ea0795$export$c6245babf0c60892","hostname","port","then","registrations","register","updateViaCache","scope","update","newWorker","installing","worker","state","$491b63e3dddf3ff3$export$6ffdf4c37f7d930c","deferredPrompt","isInstalled","wasRecentlyDismissed","installBtn","handleInstallClick","handleCloseClick","outcome","userChoice","showThankYouMessage","toString","dismissed","parseInt","matchMedia","matches","standalone","isIOS","test","userAgent","isInStandaloneMode","$491b63e3dddf3ff3$export$9e9e9b04825e5204","indicator","isOnline","onLine","createIndicator","init","handleOnline","handleOffline","showToast","icon","toast"],"version":3,"file":"power-saver.3dfe71ae.js.map"}