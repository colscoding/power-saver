{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["// Strava Integration Configuration\n// Client ID is now configurable from the web interface and stored in browser\n// SECURITY: This uses OAuth implicit flow - secure for client-side apps\n// No client secret needed (and shouldn't be in frontend code!)\n// For production apps, consider using a backend proxy for enhanced security\n// Get Strava Client ID from localStorage or return null if not configured\nfunction getStravaClientId() {\n    return localStorage.getItem('stravaClientId');\n}\n// Set Strava Client ID in localStorage\nfunction setStravaClientId(clientId) {\n    localStorage.setItem('stravaClientId', clientId);\n}\n// Show Strava configuration dialog\nfunction showStravaConfigDialog() {\n    return new Promise((resolve)=>{\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n        // Create modal dialog\n        const modal = document.createElement('div');\n        modal.className = 'modal strava-config-modal';\n        modal.innerHTML = `\n            <h3>\\u{1F6B4} Configure Strava Integration</h3>\n            <div class=\"config-instructions\">\n                <p><strong>To enable Strava sync functionality:</strong></p>\n                <ol>\n                    <li>Go to <a href=\"https://www.strava.com/settings/api\" target=\"_blank\" rel=\"noopener\">https://www.strava.com/settings/api</a></li>\n                    <li>Click \"Create & Manage Your App\"</li>\n                    <li>Fill in the required information:\n                        <ul>\n                            <li><strong>Application Name:</strong> Your app name (e.g., \"Power Meter\")</li>\n                            <li><strong>Category:</strong> Choose appropriate category</li>\n                            <li><strong>Website:</strong> Your website URL</li>\n                            <li><strong>Authorization Callback Domain:</strong> <code>${window.location.hostname}</code></li>\n                        </ul>\n                    </li>\n                    <li>After creating the app, copy your <strong>Client ID</strong> and paste it below</li>\n                </ol>\n            </div>\n            <div class=\"config-input\">\n                <label for=\"clientIdInput\">Strava Client ID:</label>\n                <input type=\"text\" id=\"clientIdInput\" placeholder=\"Enter your Strava Client ID\" />\n                <div class=\"input-hint\">This will be stored securely in your browser</div>\n            </div>\n            <div class=\"modal-buttons\">\n                <button id=\"cancelConfig\" class=\"modal-button secondary\">Cancel</button>\n                <button id=\"saveConfig\" class=\"modal-button primary\">Save & Connect</button>\n            </div>\n        `;\n        backdrop.appendChild(modal);\n        document.body.appendChild(backdrop);\n        const clientIdInput = modal.querySelector('#clientIdInput');\n        const saveButton = modal.querySelector('#saveConfig');\n        const cancelButton = modal.querySelector('#cancelConfig');\n        // Focus on input\n        clientIdInput.focus();\n        // Handle save button\n        saveButton.addEventListener('click', ()=>{\n            const clientId = clientIdInput.value.trim();\n            if (!clientId) {\n                alert('Please enter a valid Client ID');\n                return;\n            }\n            // Validate that it looks like a client ID (should be numeric)\n            if (!/^\\d+$/.test(clientId)) {\n                alert('Client ID should be a numeric value');\n                return;\n            }\n            setStravaClientId(clientId);\n            document.body.removeChild(backdrop);\n            resolve(clientId);\n        });\n        // Handle cancel button\n        cancelButton.addEventListener('click', ()=>{\n            document.body.removeChild(backdrop);\n            resolve(null);\n        });\n        // Handle Enter key in input\n        clientIdInput.addEventListener('keypress', (e)=>{\n            if (e.key === 'Enter') saveButton.click();\n        });\n        // Handle Escape key\n        document.addEventListener('keydown', function escapeHandler(e) {\n            if (e.key === 'Escape') {\n                document.removeEventListener('keydown', escapeHandler);\n                document.body.removeChild(backdrop);\n                resolve(null);\n            }\n        });\n        // Handle backdrop click\n        backdrop.addEventListener('click', (e)=>{\n            if (e.target === backdrop) {\n                document.body.removeChild(backdrop);\n                resolve(null);\n            }\n        });\n    });\n}\n// Screen Wake Lock\nlet wakeLock = null;\nasync function requestWakeLock() {\n    if ('wakeLock' in navigator) try {\n        wakeLock = await navigator.wakeLock.request('screen');\n        wakeLock.addEventListener('release', ()=>{\n        // Wake lock was released\n        });\n    } catch (err) {\n        console.error(`${err.name}, ${err.message}`);\n    }\n}\n// Currently unused but may be needed for future functionality\n// eslint-disable-next-line no-unused-vars\nasync function releaseWakeLock() {\n    if (wakeLock !== null) {\n        await wakeLock.release();\n        wakeLock = null;\n    }\n}\n// TCX Generation Functions\n/**\n * Creates a trackpoint XML element for a single data point\n * @param {Object} dataPoint - Data point with time, power, heartRate, cadence\n * @returns {string} XML trackpoint string\n */ function createTrackpoint(dataPoint) {\n    const translations = {\n        time: (time)=>`<Time>${new Date(time).toISOString()}</Time>`,\n        heartRate: (hr)=>`\n<HeartRateBpm>\n  <Value>${hr}</Value>\n</HeartRateBpm>\n            `.trim(),\n        cadence: (cad)=>`<Cadence>${cad}</Cadence>`,\n        power: (pw)=>`\n<Extensions>\n  <ns2:TPX>\n    <ns2:Watts>${pw}</ns2:Watts>\n  </ns2:TPX>\n</Extensions>\n            `.trim()\n    };\n    const contents = Object.keys(translations).map((key)=>{\n        if (dataPoint[key] === undefined) return '';\n        return translations[key](dataPoint[key]);\n    }).filter((x)=>x).join('\\n');\n    return `\n<Trackpoint>\n  ${contents}\n</Trackpoint>\n`.trim();\n}\n/**\n * Generates TCX XML string from power data for cycling activities\n * @param {Array<Object>} powerData - Array of power measurement objects\n * @returns {string} Complete TCX XML string\n */ function generateTcxString(powerData) {\n    // Validate input data\n    if (!Array.isArray(powerData) || powerData.length === 0) throw new Error(\"Input power data array is empty or invalid\");\n    // Filter and normalize data\n    const validDataPoints = powerData.filter((dataPoint)=>dataPoint && typeof dataPoint === 'object' && dataPoint.timestamp !== undefined && !isNaN(new Date(dataPoint.timestamp).getTime()));\n    if (validDataPoints.length === 0) throw new Error(\"No valid data points found\");\n    // Transform data\n    const normalizeDataPoint = (item)=>({\n            time: item.timestamp,\n            ...item.power !== undefined && {\n                power: item.power\n            },\n            ...item.heartRate !== undefined && {\n                heartRate: item.heartRate\n            },\n            ...item.cadence !== undefined && {\n                cadence: item.cadence\n            }\n        });\n    // Process data\n    let processedData = validDataPoints.map(normalizeDataPoint).sort((a, b)=>a.time - b.time);\n    // Remove leading/trailing entries without power\n    const isEmptyPower = (dataPoint)=>!dataPoint.power || dataPoint.power <= 0;\n    while(processedData.length > 0 && isEmptyPower(processedData[0]))processedData.shift();\n    while(processedData.length > 0 && isEmptyPower(processedData[processedData.length - 1]))processedData.pop();\n    if (processedData.length === 0) throw new Error(\"No valid power data found after processing\");\n    // Calculate exercise statistics\n    const validPowerReadings = processedData.filter((d)=>d.power && d.power > 0).map((d)=>parseFloat(d.power));\n    const avgPower = validPowerReadings.length > 0 ? Math.round(validPowerReadings.reduce((a, b)=>a + b, 0) / validPowerReadings.length) : 0;\n    const maxPower = validPowerReadings.length > 0 ? Math.max(...validPowerReadings) : 0;\n    const startTime = processedData[0].time;\n    const endTime = processedData[processedData.length - 1].time;\n    const duration = Math.round((endTime - startTime) / 1000 / 60); // duration in minutes\n    // Generate activity notes with exercise description and power averages\n    const exerciseDescription = \"Indoor cycling session recorded with Power Saver app.\";\n    let powerAveragesText = \"\";\n    if (typeof powerAverages !== 'undefined' && powerAverages) {\n        const averagesList = [];\n        if (powerAverages['10s'] && powerAverages['10s'].best > 0) averagesList.push(`10s: ${powerAverages['10s'].best}W`);\n        if (powerAverages['30s'] && powerAverages['30s'].best > 0) averagesList.push(`30s: ${powerAverages['30s'].best}W`);\n        if (powerAverages['1m'] && powerAverages['1m'].best > 0) averagesList.push(`1min: ${powerAverages['1m'].best}W`);\n        if (powerAverages['2m'] && powerAverages['2m'].best > 0) averagesList.push(`2min: ${powerAverages['2m'].best}W`);\n        if (powerAverages['4m'] && powerAverages['4m'].best > 0) averagesList.push(`4min: ${powerAverages['4m'].best}W`);\n        if (powerAverages['8m'] && powerAverages['8m'].best > 0) averagesList.push(`8min: ${powerAverages['8m'].best}W`);\n        if (averagesList.length > 0) powerAveragesText = `\\n\\nBest Power Averages: ${averagesList.join(', ')}`;\n    }\n    const sessionStats = `\\nSession Stats: Duration: ${duration} min, Avg Power: ${avgPower}W, Max Power: ${maxPower}W`;\n    const activityNotes = exerciseDescription + sessionStats + powerAveragesText;\n    // Helper function to escape XML special characters\n    const escapeXml = (text)=>{\n        return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&apos;');\n    };\n    // Generate XML\n    const trackpoints = processedData.map(createTrackpoint).join('\\n');\n    const startTimeISO = new Date(startTime).toISOString();\n    const rawXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<TrainingCenterDatabase\n  xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\"\n  xmlns:ns2=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\">\n  <Activities>\n    <Activity Sport=\"Biking\">\n      <Id>${startTimeISO}</Id>\n      <Name>E Bike Indoor Cycling Trainer</Name>\n      <Notes>${escapeXml(activityNotes)}</Notes>\n      <Lap StartTime=\"${startTimeISO}\">\n        <Track>\n        ${trackpoints}\n        </Track>\n      </Lap>\n    </Activity>\n  </Activities>\n</TrainingCenterDatabase>`;\n    return rawXml;\n}\n// Data Persistence Functions\nconst SESSION_STORAGE_KEY = 'powerMeterSession';\nconst SESSION_TIMEOUT = 86400000; // 24 hours in milliseconds\n/**\n * Save current session data to localStorage\n */ function saveSessionData() {\n    try {\n        const sessionData = {\n            timestamp: Date.now(),\n            powerData: powerData,\n            heartData: heartData,\n            cadenceData: cadenceData,\n            rawPowerMeasurements: rawPowerMeasurements,\n            powerReadings: powerReadings,\n            powerAverages: powerAverages,\n            lastPowerValue: lastPowerValue,\n            lastHeartRateValue: lastHeartRateValue,\n            lastCadenceValue: lastCadenceValue,\n            sessionStartTime: sessionStartTime\n        };\n        localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n    } catch (error) {\n        console.warn('Failed to save session data:', error);\n    }\n}\n/**\n * Load session data from localStorage if available and recent\n * Returns the session data object if available, null if not\n */ function loadSessionData() {\n    try {\n        const savedData = localStorage.getItem(SESSION_STORAGE_KEY);\n        if (!savedData) return null;\n        const sessionData = JSON.parse(savedData);\n        const now = Date.now();\n        // Check if session is too old (older than 24 hours)\n        if (now - sessionData.timestamp > SESSION_TIMEOUT) {\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            return null;\n        }\n        return sessionData;\n    } catch (error) {\n        console.warn('Failed to load session data:', error);\n        localStorage.removeItem(SESSION_STORAGE_KEY);\n        return null;\n    }\n}\n/**\n * Apply session data to restore the session\n */ function restoreSessionData(sessionData) {\n    try {\n        // Restore data arrays\n        if (sessionData.powerData) powerData.length = 0, powerData.push(...sessionData.powerData);\n        if (sessionData.heartData) heartData.length = 0, heartData.push(...sessionData.heartData);\n        if (sessionData.cadenceData) cadenceData.length = 0, cadenceData.push(...sessionData.cadenceData);\n        if (sessionData.rawPowerMeasurements) rawPowerMeasurements.length = 0, rawPowerMeasurements.push(...sessionData.rawPowerMeasurements);\n        if (sessionData.powerReadings) powerReadings.length = 0, powerReadings.push(...sessionData.powerReadings);\n        // Restore power averages completely\n        if (sessionData.powerAverages) Object.assign(powerAverages, sessionData.powerAverages);\n        // Restore last values\n        if (sessionData.lastPowerValue !== undefined) lastPowerValue = sessionData.lastPowerValue;\n        if (sessionData.lastHeartRateValue !== undefined) lastHeartRateValue = sessionData.lastHeartRateValue;\n        if (sessionData.lastCadenceValue !== undefined) lastCadenceValue = sessionData.lastCadenceValue;\n        if (sessionData.sessionStartTime !== undefined) sessionStartTime = sessionData.sessionStartTime;\n        // Update displays with restored data\n        updateDisplaysFromRestoredData();\n        return true;\n    } catch (error) {\n        console.warn('Failed to restore session data:', error);\n        return false;\n    }\n}\n/**\n * Update displays after restoring session data\n */ function updateDisplaysFromRestoredData() {\n    // Update current metric values\n    powerValueElement.textContent = lastPowerValue || '--';\n    hrValueElement.textContent = lastHeartRateValue || '--';\n    cadenceValueElement.textContent = lastCadenceValue || '--';\n    // Update power averages display\n    updatePowerAveragesDisplay();\n    // Show session restoration notification\n    if (powerData.length > 0) showSessionRestoredNotification();\n}\n/**\n * Show notification that session was restored\n */ function showSessionRestoredNotification() {\n    const notification = document.createElement('div');\n    notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #4CAF50;\n        color: white;\n        padding: 1rem 1.5rem;\n        border-radius: 8px;\n        z-index: 1000;\n        font-size: 0.9rem;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        animation: slideIn 0.3s ease-out;\n    `;\n    notification.textContent = `Session restored! ${powerData.length} data points recovered.`;\n    // Add animation\n    const style = document.createElement('style');\n    style.textContent = `\n        @keyframes slideIn {\n            from { transform: translateX(100%); opacity: 0; }\n            to { transform: translateX(0); opacity: 1; }\n        }\n    `;\n    document.head.appendChild(style);\n    document.body.appendChild(notification);\n    // Remove notification after 5 seconds\n    setTimeout(()=>{\n        notification.style.animation = 'slideIn 0.3s ease-out reverse';\n        setTimeout(()=>{\n            if (notification.parentNode) notification.parentNode.removeChild(notification);\n            if (style.parentNode) style.parentNode.removeChild(style);\n        }, 300);\n    }, 5000);\n}\n/**\n * Clear session data from localStorage\n */ function clearSessionData() {\n    localStorage.removeItem(SESSION_STORAGE_KEY);\n}\nconst connectButton = document.getElementById('connectButton');\nconst statusText = document.getElementById('status');\nconst powerValueElement = document.getElementById('power-value');\nconst hrValueElement = document.getElementById('hr-value');\nconst cadenceValueElement = document.getElementById('cadence-value');\nconst deviceNameElement = document.getElementById('device-name');\nconst exportJsonButton = document.getElementById('exportJsonButton');\nconst exportCsvButton = document.getElementById('exportCsvButton');\nconst exportTcxButton = document.getElementById('exportTcxButton');\nconst exportRawJsonButton = document.getElementById('exportRawJsonButton');\nconst exportRawCsvButton = document.getElementById('exportRawCsvButton');\nconst syncToStravaButton = document.getElementById('syncToStravaButton');\nconst clearSessionButton = document.getElementById('clearSessionButton');\n// Power averages elements\nconst avg10sCurrentElement = document.getElementById('avg10s-current');\nconst avg10sBestElement = document.getElementById('avg10s-best');\nconst avg30sCurrentElement = document.getElementById('avg30s-current');\nconst avg30sBestElement = document.getElementById('avg30s-best');\nconst avg1mCurrentElement = document.getElementById('avg1m-current');\nconst avg1mBestElement = document.getElementById('avg1m-best');\nconst avg2mCurrentElement = document.getElementById('avg2m-current');\nconst avg2mBestElement = document.getElementById('avg2m-best');\nconst avg4mCurrentElement = document.getElementById('avg4m-current');\nconst avg4mBestElement = document.getElementById('avg4m-best');\nconst avg8mCurrentElement = document.getElementById('avg8m-current');\nconst avg8mBestElement = document.getElementById('avg8m-best');\n// Toggle elements\nconst toggleConnectSection = document.getElementById('toggleConnectSection');\nconst toggleExportSection = document.getElementById('toggleExportSection');\nconst connectSection = document.getElementById('connectSection');\nconst exportSection = document.getElementById('exportSection');\nconst powerAveragesSection = document.getElementById('powerAveragesSection');\nconst connectToggleText = document.getElementById('connectToggleText');\nconst exportToggleText = document.getElementById('exportToggleText');\n// Hamburger menu elements\nconst hamburgerBtn = document.getElementById('hamburgerButton');\nconst menuDropdown = document.getElementById('menuDropdown');\nconst powerAveragesToggle = document.getElementById('powerAveragesToggle');\nconst powerMetricToggle = document.getElementById('powerMetricToggle');\nconst heartRateMetricToggle = document.getElementById('heartRateMetricToggle');\nconst cadenceMetricToggle = document.getElementById('cadenceMetricToggle');\nconst connectSectionToggle = document.getElementById('connectSectionToggle');\nconst exportSectionToggle = document.getElementById('exportSectionToggle');\nconst stravaSettingsMenuItem = document.getElementById('stravaSettingsMenuItem');\n// Metric card elements\nconst powerCard = document.querySelector('.power-card');\nconst heartRateCard = document.querySelector('.hr-card');\nconst cadenceCard = document.querySelector('.cadence-card');\n// Status indicator elements\nconst powerStatusIndicator = document.getElementById('power-status-indicator');\nconst hrStatusIndicator = document.getElementById('hr-status-indicator');\nconst cadenceStatusIndicator = document.getElementById('cadence-status-indicator');\n// Initialize all status indicators to disconnected state\npowerStatusIndicator.className = 'status-indicator';\nhrStatusIndicator.className = 'status-indicator';\ncadenceStatusIndicator.className = 'status-indicator';\n// Only add event listeners if elements exist\nif (hamburgerBtn && menuDropdown) {\n    // Hamburger menu functionality\n    hamburgerBtn.addEventListener('click', function() {\n        const isActive = menuDropdown.classList.contains('active');\n        if (isActive) menuDropdown.classList.remove('active');\n        else menuDropdown.classList.add('active');\n    });\n    // Close menu when clicking outside\n    document.addEventListener('click', function(event) {\n        if (!event.target.closest('.hamburger-menu')) menuDropdown.classList.remove('active');\n    });\n} else console.error('Hamburger menu elements not found:', {\n    hamburgerBtn: !!hamburgerBtn,\n    menuDropdown: !!menuDropdown\n});\nif (powerAveragesToggle && powerAveragesSection) {\n    // Power averages toggle via hamburger menu\n    let powerAveragesVisible = false;\n    powerAveragesToggle.addEventListener('click', function() {\n        powerAveragesVisible = !powerAveragesVisible;\n        if (powerAveragesVisible) {\n            powerAveragesSection.style.display = 'block';\n            powerAveragesToggle.classList.add('active');\n        } else {\n            powerAveragesSection.style.display = 'none';\n            powerAveragesToggle.classList.remove('active');\n        }\n        manageCollapsedSectionsLayout();\n    });\n} else console.error('Power averages toggle elements not found:', {\n    powerAveragesToggle: !!powerAveragesToggle,\n    powerAveragesSection: !!powerAveragesSection\n});\n// Power metric toggle via hamburger menu\nif (powerMetricToggle && powerCard) {\n    let powerMetricVisible = true; // Start visible by default\n    powerMetricToggle.classList.add('active'); // Set initial active state\n    powerMetricToggle.addEventListener('click', function() {\n        powerMetricVisible = !powerMetricVisible;\n        if (powerMetricVisible) {\n            powerCard.style.display = 'block';\n            powerMetricToggle.classList.add('active');\n        } else {\n            powerCard.style.display = 'none';\n            powerMetricToggle.classList.remove('active');\n        }\n    });\n} else console.error('Power metric toggle elements not found:', {\n    powerMetricToggle: !!powerMetricToggle,\n    powerCard: !!powerCard\n});\n// Heart rate metric toggle via hamburger menu\nif (heartRateMetricToggle && heartRateCard) {\n    let heartRateMetricVisible = true; // Start visible by default\n    heartRateMetricToggle.classList.add('active'); // Set initial active state\n    heartRateMetricToggle.addEventListener('click', function() {\n        heartRateMetricVisible = !heartRateMetricVisible;\n        if (heartRateMetricVisible) {\n            heartRateCard.style.display = 'block';\n            heartRateMetricToggle.classList.add('active');\n        } else {\n            heartRateCard.style.display = 'none';\n            heartRateMetricToggle.classList.remove('active');\n        }\n    });\n} else console.error('Heart rate metric toggle elements not found:', {\n    heartRateMetricToggle: !!heartRateMetricToggle,\n    heartRateCard: !!heartRateCard\n});\n// Cadence metric toggle via hamburger menu\nif (cadenceMetricToggle && cadenceCard) {\n    let cadenceMetricVisible = true; // Start visible by default\n    cadenceMetricToggle.classList.add('active'); // Set initial active state\n    cadenceMetricToggle.addEventListener('click', function() {\n        cadenceMetricVisible = !cadenceMetricVisible;\n        if (cadenceMetricVisible) {\n            cadenceCard.style.display = 'block';\n            cadenceMetricToggle.classList.add('active');\n        } else {\n            cadenceCard.style.display = 'none';\n            cadenceMetricToggle.classList.remove('active');\n        }\n    });\n} else console.error('Cadence metric toggle elements not found:', {\n    cadenceMetricToggle: !!cadenceMetricToggle,\n    cadenceCard: !!cadenceCard\n});\n// Connect section toggle via hamburger menu\nif (connectSectionToggle && connectSection) {\n    let connectSectionVisible = true; // Start visible by default\n    connectSectionToggle.classList.add('active'); // Set initial active state\n    connectSectionToggle.addEventListener('click', function() {\n        connectSectionVisible = !connectSectionVisible;\n        if (connectSectionVisible) {\n            connectSection.style.display = 'block';\n            connectSectionToggle.classList.add('active');\n        } else {\n            connectSection.style.display = 'none';\n            connectSectionToggle.classList.remove('active');\n        }\n    });\n} else console.error('Connect section toggle elements not found:', {\n    connectSectionToggle: !!connectSectionToggle,\n    connectSection: !!connectSection\n});\n// Export section toggle via hamburger menu\nif (exportSectionToggle && exportSection) {\n    let exportSectionVisible = false; // Start hidden by default (as it currently is)\n    // exportSectionToggle starts inactive since export section is initially hidden\n    exportSectionToggle.addEventListener('click', function() {\n        exportSectionVisible = !exportSectionVisible;\n        if (exportSectionVisible) {\n            exportSection.style.display = 'block';\n            exportSectionToggle.classList.add('active');\n        } else {\n            exportSection.style.display = 'none';\n            exportSectionToggle.classList.remove('active');\n        }\n    });\n} else console.error('Export section toggle elements not found:', {\n    exportSectionToggle: !!exportSectionToggle,\n    exportSection: !!exportSection\n});\n// Toggle functionality for connect section\ntoggleConnectSection.addEventListener('click', ()=>{\n    const connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\n    const sectionHeader = connectSection.querySelector('.section-header');\n    const isHidden = connectButtons[0].style.display === 'none';\n    if (isHidden) {\n        connectButtons.forEach((btn)=>btn.style.display = 'block');\n        connectToggleText.textContent = 'Hide Connect Devices';\n        toggleConnectSection.classList.remove('collapsed');\n        connectSection.classList.remove('collapsed');\n        sectionHeader.classList.remove('collapsed');\n    } else {\n        connectButtons.forEach((btn)=>btn.style.display = 'none');\n        connectToggleText.textContent = 'Show Connect Devices';\n        toggleConnectSection.classList.add('collapsed');\n        connectSection.classList.add('collapsed');\n        sectionHeader.classList.add('collapsed');\n    }\n// Don't call updateDashboardLayout for bottom controls\n});\n// Toggle functionality for export section\ntoggleExportSection.addEventListener('click', ()=>{\n    const exportButtons = document.getElementById('export-buttons');\n    const sectionHeader = exportSection.querySelector('.section-header');\n    const isHidden = exportButtons.style.display === 'none';\n    if (isHidden) {\n        exportSection.style.display = 'block';\n        exportButtons.style.display = 'flex';\n        exportToggleText.textContent = 'Hide Export Data';\n        toggleExportSection.classList.remove('collapsed');\n        exportSection.classList.remove('collapsed');\n        sectionHeader.classList.remove('collapsed');\n    } else {\n        exportButtons.style.display = 'none';\n        exportToggleText.textContent = 'Show Export Data';\n        toggleExportSection.classList.add('collapsed');\n        exportSection.classList.add('collapsed');\n        sectionHeader.classList.add('collapsed');\n    }\n// Don't call updateDashboardLayout for bottom controls\n});\n// Strava Settings Menu Item\nif (stravaSettingsMenuItem) stravaSettingsMenuItem.addEventListener('click', async ()=>{\n    await showStravaConfigDialog();\n    // Update button status after potential configuration change\n    updateStravaButtonStatus();\n    // Close the menu\n    menuDropdown.classList.remove('active');\n});\nelse console.error('Strava settings menu item not found');\n// Function to update dashboard layout based on visible sections\nfunction updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const powerAveragesHidden = powerAveragesSection && powerAveragesSection.style.display === 'none';\n    if (powerAveragesHidden) dashboard.classList.add('maximized');\n    else dashboard.classList.remove('maximized');\n    // Manage horizontal layout for collapsed sections (excluding bottom controls)\n    manageCollapsedSectionsLayout();\n}\n// Function to manage horizontal layout of collapsed sections\nfunction manageCollapsedSectionsLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    // Only manage power averages section for collapsed layout - \n    // connect and export sections are now bottom controls and stay at bottom\n    // Note: collapsedSections logic simplified since only power averages section is managed now\n    // Remove any existing collapsed sections row\n    const existingRow = document.querySelector('.collapsed-sections-row');\n    if (existingRow) {\n        // Move sections back to their original positions\n        const sectionsInRow = existingRow.querySelectorAll('.power-averages-section');\n        sectionsInRow.forEach((section)=>{\n            // Insert sections back after the dashboard\n            dashboard.parentNode.insertBefore(section, dashboard.nextSibling);\n        });\n        existingRow.remove();\n    }\n    // Power averages section doesn't need horizontal grouping since it's the only\n    // section that can be managed this way now\n    dashboard.classList.remove('has-collapsed-sections');\n}\n// Initialize sections - connect section visible, export section hidden (controlled by hamburger menu)\nconst connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\nconnectButtons.forEach((btn)=>btn.style.display = 'block');\n// Initialize export section as hidden (controlled by hamburger menu)\nexportSection.style.display = 'none';\n// Initialize power averages section as hidden (controlled by hamburger menu)\npowerAveragesSection.style.display = 'none';\nupdateDashboardLayout();\nlet powerData = [];\nlet rawPowerMeasurements = [];\nlet lastPowerValue = 0;\nlet sessionStartTime = null;\n// Power averaging data structures\nlet powerReadings = []; // Array to store timestamped power readings\nlet powerAverages = {\n    '10s': {\n        current: 0,\n        best: 0\n    },\n    '30s': {\n        current: 0,\n        best: 0\n    },\n    '1m': {\n        current: 0,\n        best: 0\n    },\n    '2m': {\n        current: 0,\n        best: 0\n    },\n    '4m': {\n        current: 0,\n        best: 0\n    },\n    '8m': {\n        current: 0,\n        best: 0\n    }\n};\n// Power averaging functions\nfunction addPowerReading(power) {\n    const now = Date.now();\n    powerReadings.push({\n        timestamp: now,\n        power: power\n    });\n    // Keep only the last 8 minutes of readings (plus some buffer)\n    const eightMinutesAgo = now - 540000; // 9 minutes to be safe\n    powerReadings = powerReadings.filter((reading)=>reading.timestamp > eightMinutesAgo);\n    // Calculate current averages\n    calculatePowerAverages();\n    updatePowerAveragesDisplay();\n}\nfunction calculatePowerAverages() {\n    const now = Date.now();\n    const periods = {\n        '10s': 10000,\n        '30s': 30000,\n        '1m': 60000,\n        '2m': 120000,\n        '4m': 240000,\n        '8m': 480000\n    };\n    for (const [periodKey, periodMs] of Object.entries(periods)){\n        const cutoffTime = now - periodMs;\n        const relevantReadings = powerReadings.filter((reading)=>reading.timestamp >= cutoffTime);\n        if (relevantReadings.length > 0) {\n            const sum = relevantReadings.reduce((total, reading)=>total + reading.power, 0);\n            const average = Math.round(sum / relevantReadings.length);\n            powerAverages[periodKey].current = average;\n            // Update best if current is better\n            if (average > powerAverages[periodKey].best) powerAverages[periodKey].best = average;\n        } else powerAverages[periodKey].current = 0;\n    }\n}\nfunction updatePowerAveragesDisplay() {\n    avg10sCurrentElement.textContent = powerAverages['10s'].current || '--';\n    avg10sBestElement.textContent = powerAverages['10s'].best || '--';\n    avg30sCurrentElement.textContent = powerAverages['30s'].current || '--';\n    avg30sBestElement.textContent = powerAverages['30s'].best || '--';\n    avg1mCurrentElement.textContent = powerAverages['1m'].current || '--';\n    avg1mBestElement.textContent = powerAverages['1m'].best || '--';\n    avg2mCurrentElement.textContent = powerAverages['2m'].current || '--';\n    avg2mBestElement.textContent = powerAverages['2m'].best || '--';\n    avg4mCurrentElement.textContent = powerAverages['4m'].current || '--';\n    avg4mBestElement.textContent = powerAverages['4m'].best || '--';\n    avg8mCurrentElement.textContent = powerAverages['8m'].current || '--';\n    avg8mBestElement.textContent = powerAverages['8m'].best || '--';\n}\nfunction resetPowerAverages() {\n    powerReadings = [];\n    for (const period of Object.keys(powerAverages)){\n        powerAverages[period].current = 0;\n        powerAverages[period].best = 0;\n    }\n    updatePowerAveragesDisplay();\n}\n/**\n * Reset all session data (called when all devices disconnect)\n */ function resetAllSessionData() {\n    // Clear all data arrays\n    powerData.length = 0;\n    heartData.length = 0;\n    cadenceData.length = 0;\n    rawPowerMeasurements.length = 0;\n    powerReadings.length = 0;\n    // Reset power averages\n    for (const period of Object.keys(powerAverages)){\n        powerAverages[period].current = 0;\n        powerAverages[period].best = 0;\n    }\n    // Reset last values\n    lastPowerValue = 0;\n    lastHeartRateValue = 0;\n    lastCadenceValue = 0;\n    sessionStartTime = null;\n    // Update displays\n    updatePowerAveragesDisplay();\n    powerValueElement.textContent = '--';\n    hrValueElement.textContent = '--';\n    cadenceValueElement.textContent = '--';\n    // Clear localStorage\n    clearSessionData();\n}\nlet lastHeartRateValue = 0;\nlet lastCadenceValue = 0;\nlet dataLoggerInterval = null;\nlet powerMeterDevice = null;\nconst CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID = 'cycling_power_feature';\nconst CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\nconnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        statusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    // Reset data from previous session\n    powerData = [];\n    rawPowerMeasurements = [];\n    lastPowerValue = 0;\n    resetPowerAverages();\n    if (dataLoggerInterval) clearInterval(dataLoggerInterval);\n    try {\n        statusText.textContent = 'Scanning for power meters...';\n        powerStatusIndicator.className = 'status-indicator connecting';\n        // Scan specifically for devices advertising the Cycling Power service\n        powerMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        CYCLING_POWER_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        statusText.textContent = 'Connecting to device...';\n        deviceNameElement.textContent = `Device: ${powerMeterDevice.name || 'Unknown Device'}`;\n        powerMeterDevice.addEventListener('gattserverdisconnected', onDisconnected);\n        const server = await powerMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);\n        // Check for and subscribe to advanced power features if available\n        try {\n            const featureCharacteristic = await service.getCharacteristic(CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID);\n            // eslint-disable-next-line no-unused-vars\n            const features = await featureCharacteristic.readValue();\n        // This value can be used to determine what the power meter supports,\n        // but for now we just parse what's in the measurement characteristic.\n        } catch  {\n        // Cycling Power Feature characteristic not found\n        }\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handlePowerMeasurement);\n        statusText.textContent = 'Connected and receiving data!';\n        powerStatusIndicator.className = 'status-indicator connected';\n        connectButton.disabled = true;\n        // Start session if this is the first connection\n        if (!sessionStartTime) sessionStartTime = Date.now();\n        // exportButtons.style.display = 'block';\n        dataLoggerInterval = setInterval(()=>{\n            powerData.push({\n                timestamp: Date.now(),\n                power: lastPowerValue,\n                heartRate: lastHeartRateValue,\n                cadence: lastCadenceValue\n            });\n            // Save session data every 10 seconds\n            if (powerData.length % 100 === 0) saveSessionData();\n        }, 100);\n    } catch (error) {\n        statusText.textContent = `Error: ${error.message}`;\n        powerStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n        if (powerMeterDevice) powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n    }\n});\nexportJsonButton.addEventListener('click', ()=>{\n    const jsonString = JSON.stringify(powerData, null, 2);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\nexportCsvButton.addEventListener('click', ()=>{\n    let csvContent = 'timestamp,power,heartRate,cadence\\n';\n    powerData.forEach((row)=>{\n        csvContent += `${row.timestamp},${row.power},${row.heartRate},${row.cadence}\\n`;\n    });\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n// Export raw power measurements as JSON\nexportRawJsonButton.addEventListener('click', ()=>{\n    const jsonString = JSON.stringify(rawPowerMeasurements, null, 2);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n// Export raw power measurements as CSV\nexportRawCsvButton.addEventListener('click', ()=>{\n    let csvContent = 'timestamp,flags,dataLength,instantaneousPower,rawBytes\\n';\n    rawPowerMeasurements.forEach((measurement)=>{\n        csvContent += `${measurement.timestamp},${measurement.flags},${measurement.dataLength},${measurement.instantaneousPower},\"${measurement.rawBytes}\"\\n`;\n    });\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n// Export TCX\nexportTcxButton.addEventListener('click', ()=>{\n    try {\n        if (powerData.length === 0) {\n            alert('No power data available to export.');\n            return;\n        }\n        const tcxContent = generateTcxString(powerData);\n        const blob = new Blob([\n            tcxContent\n        ], {\n            type: 'application/xml;charset=utf-8;'\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, '0');\n        const day = String(now.getDate()).padStart(2, '0');\n        const dateString = `${year}-${month}-${day}`;\n        a.download = `power_data_${dateString}.tcx`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    } catch (error) {\n        console.error('Error generating TCX:', error);\n        alert(`Error generating TCX file: ${error.message}`);\n    }\n});\n// Sync to Strava\nsyncToStravaButton.addEventListener('click', async ()=>{\n    try {\n        if (powerData.length === 0) {\n            alert('No power data available to sync to Strava.');\n            return;\n        }\n        // Check if user is authenticated with Strava\n        const stravaAuth = getStravaAuthFromStorage();\n        if (!stravaAuth || !stravaAuth.access_token) {\n            // Redirect to Strava OAuth\n            await initiateStravaAuth();\n            return;\n        }\n        // Show loading state\n        syncToStravaButton.disabled = true;\n        syncToStravaButton.textContent = 'Syncing...';\n        // Generate TCX data for upload\n        const tcxContent = generateTcxString(powerData);\n        // Upload to Strava\n        await uploadToStrava(tcxContent, stravaAuth.access_token);\n        alert('Successfully synced to Strava!');\n    } catch (error) {\n        console.error('Error syncing to Strava:', error);\n        alert(`Error syncing to Strava: ${error.message}`);\n    } finally{\n        // Reset button state\n        syncToStravaButton.disabled = false;\n        updateStravaButtonStatus();\n    }\n});\n// Clear Session Data\nclearSessionButton.addEventListener('click', ()=>{\n    const confirmed = confirm('Are you sure you want to clear all session data? This action cannot be undone.');\n    if (confirmed) {\n        resetAllSessionData();\n        alert('Session data cleared successfully!');\n    }\n});\nfunction handlePowerMeasurement(event) {\n    const value = event.target.value;\n    const timestamp = Date.now();\n    // Store simplified raw measurement data\n    const rawMeasurement = {\n        timestamp: timestamp,\n        flags: value.getUint16(0, true),\n        rawBytes: Array.from(new Uint8Array(value.buffer)).map((b)=>b.toString(16).padStart(2, '0')).join(' '),\n        dataLength: value.byteLength\n    };\n    // The data is a DataView object with a flags field and the power value.\n    // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n    // eslint-disable-next-line no-unused-vars\n    const flags = value.getUint16(0, true);\n    let offset = 2;\n    // Power is always present\n    const power = value.getInt16(offset, true);\n    rawMeasurement.instantaneousPower = power;\n    powerValueElement.textContent = power;\n    lastPowerValue = power;\n    // Add power reading to averaging calculations\n    addPowerReading(power);\n    // Store the simplified raw measurement\n    rawPowerMeasurements.push(rawMeasurement);\n}\n/**\n * Parses the Cycling Power Measurement characteristic data.\n * The data is a DataView object with a flags field and the power value.\n * The instantaneous power is a 16-bit signed integer starting at the 3rd byte (offset 2).\n * Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n * Currently unused but kept for potential future use.\n */ // eslint-disable-next-line no-unused-vars\nfunction parsePowerMeasurement(value) {\n    // The first 2 bytes are flags. The next 2 bytes are the instantaneous power.\n    // The power value is a signed 16-bit integer (sint16)\n    const instantaneousPower = value.getInt16(2, /*littleEndian=*/ true);\n    return instantaneousPower;\n}\nfunction onDisconnected() {\n    statusText.textContent = 'Device disconnected.';\n    powerStatusIndicator.className = 'status-indicator';\n    deviceNameElement.textContent = '';\n    powerValueElement.textContent = '--';\n    resetPowerAverages();\n    connectButton.disabled = false;\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n        dataLoggerInterval = null;\n    }\n    if (powerMeterDevice) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n        powerMeterDevice = null;\n    }\n    lastPowerValue = 0;\n}\nconst heartData = [];\nconst cadenceData = [];\n// eslint-disable-next-line no-unused-vars\nlet hrDataLoggerInterval = null; // Reserved for future HR data logging functionality\nconst hrConnectButton = document.getElementById('hrConnectButton');\nconst hrStatusText = document.getElementById('hrStatus');\nconst hrValue = document.getElementById('hr-value');\nconst hrDeviceName = document.getElementById('hrDeviceName');\nlet hrBluetoothDevice = null;\nhrConnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        hrStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    try {\n        hrStatusText.textContent = 'Scanning for devices...';\n        hrStatusIndicator.className = 'status-indicator connecting';\n        // Filter for devices that advertise the 'heart_rate' service\n        hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        'heart_rate'\n                    ]\n                }\n            ]\n        });\n        hrStatusText.textContent = 'Connecting to device...';\n        hrDeviceName.textContent = `Device: ${hrBluetoothDevice.name}`;\n        // Add a listener for when the device gets disconnected\n        hrBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedHr);\n        const hrServer = await hrBluetoothDevice.gatt.connect();\n        const hrService = await hrServer.getPrimaryService('heart_rate');\n        const hrCharacteristic = await hrService.getCharacteristic('heart_rate_measurement');\n        // Start notifications to receive heart rate data\n        await hrCharacteristic.startNotifications();\n        hrCharacteristic.addEventListener('characteristicvaluechanged', handleHeartRateChanged);\n        hrStatusText.textContent = 'Connected!';\n        hrStatusIndicator.className = 'status-indicator connected';\n        hrConnectButton.disabled = true;\n    } catch (error) {\n        hrStatusText.textContent = `Error: ${error.message}`;\n        hrStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n    }\n});\nfunction handleHeartRateChanged(event) {\n    const value = event.target.value;\n    const heartRate = parseHeartRate(value);\n    hrValue.textContent = heartRate;\n    lastHeartRateValue = heartRate;\n}\n/**\n * The heart rate measurement is a DataView object.\n * The first byte is a flag, and the subsequent byte(s) are the heart rate value.\n * We need to check the first bit of the flag to see if the value is 8-bit or 16-bit.\n */ function parseHeartRate(value) {\n    const flags = value.getUint8(0);\n    // Check if the heart rate value format is UINT16 (bit 0 is 1) or UINT8 (bit 0 is 0)\n    const is16bit = flags & 0x1;\n    if (is16bit) // If 16-bit, read 2 bytes starting from the second byte\n    return value.getUint16(1, /*littleEndian=*/ true);\n    else // If 8-bit, read 1 byte starting from the second byte\n    return value.getUint8(1);\n}\nfunction onDisconnectedHr() {\n    hrStatusText.textContent = 'Device disconnected.';\n    hrStatusIndicator.className = 'status-indicator';\n    hrDeviceName.textContent = '';\n    hrValue.textContent = '--';\n    hrConnectButton.disabled = false;\n    hrBluetoothDevice = null;\n    lastHeartRateValue = 0;\n}\nconst speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\nconst cadenceStatusText = document.getElementById('cadenceStatus');\nconst cadenceDeviceName = document.getElementById('cadenceDeviceName');\nlet speedCadenceBluetoothDevice = null;\nspeedCadenceConnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        cadenceStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    try {\n        cadenceStatusText.textContent = 'Scanning for sensors...';\n        cadenceStatusIndicator.className = 'status-indicator connecting';\n        // Reset cadence variables for clean start\n        if (cadenceResetTimer) {\n            clearTimeout(cadenceResetTimer);\n            cadenceResetTimer = null;\n        }\n        lastCrankRevs = 0;\n        lastCrankTime = 0;\n        lastCadenceValue = 0;\n        speedCadenceBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        CYCLING_CADENCE_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        cadenceStatusText.textContent = 'Connecting to device...';\n        cadenceDeviceName.textContent = `Device: ${speedCadenceBluetoothDevice.name}`;\n        speedCadenceBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedSpeedCadence);\n        const server = await speedCadenceBluetoothDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CSC_MEASUREMENT_CHARACTERISTIC_UUID);\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handleSpeedCadenceMeasurement);\n        cadenceStatusText.textContent = 'Connected!';\n        cadenceStatusIndicator.className = 'status-indicator connected';\n        speedCadenceConnectButton.disabled = true;\n    } catch (error) {\n        cadenceStatusText.textContent = `Error: ${error.message}`;\n        cadenceStatusIndicator.className = 'status-indicator';\n        console.error('Speed/Cadence connection failed:', error);\n    }\n});\nlet lastCrankRevs = 0;\nlet lastCrankTime = 0;\nlet cadenceResetTimer = null;\nfunction handleSpeedCadenceMeasurement(event) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n    const wheelRevsPresent = flags & 0x01;\n    const crankRevsPresent = flags & 0x02;\n    // Skip wheel revolution data since we don't need speed/distance\n    if (wheelRevsPresent) offset += 6; // Skip wheel data\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n        if (lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - lastCrankRevs;\n            const time = (lastCrankEventTime - lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = revs / time * 60; // RPM\n                cadenceValueElement.textContent = Math.round(cadence);\n                lastCadenceValue = Math.round(cadence);\n                // Clear any existing reset timer\n                if (cadenceResetTimer) clearTimeout(cadenceResetTimer);\n                // Set timer to reset cadence to 0 if no new data comes in for 3 seconds\n                cadenceResetTimer = setTimeout(()=>{\n                    cadenceValueElement.textContent = '0';\n                    lastCadenceValue = 0;\n                    cadenceResetTimer = null;\n                }, 3000);\n            }\n        }\n        lastCrankRevs = cumulativeCrankRevolutions;\n        lastCrankTime = lastCrankEventTime;\n    }\n}\nfunction onDisconnectedSpeedCadence() {\n    cadenceStatusText.textContent = 'Device disconnected.';\n    cadenceStatusIndicator.className = 'status-indicator';\n    cadenceDeviceName.textContent = '';\n    cadenceValueElement.textContent = '--';\n    speedCadenceConnectButton.disabled = false;\n    speedCadenceBluetoothDevice = null;\n    lastCadenceValue = 0;\n    // Clear cadence reset timer and reset variables\n    if (cadenceResetTimer) {\n        clearTimeout(cadenceResetTimer);\n        cadenceResetTimer = null;\n    }\n    lastCrankRevs = 0;\n    lastCrankTime = 0;\n}\n// Initialize session on page load\n/**\n * Show restoration dialog to let user choose\n */ function showRestorationDialog(sessionData) {\n    return new Promise((resolve)=>{\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n        // Create modal dialog\n        const modal = document.createElement('div');\n        modal.className = 'modal';\n        // Get session info\n        const sessionAge = Math.round((Date.now() - sessionData.timestamp) / 60000); // minutes\n        const dataCount = (sessionData.powerData?.length || 0) + (sessionData.heartData?.length || 0) + (sessionData.cadenceData?.length || 0);\n        modal.innerHTML = `\n            <h3>Previous Session Found</h3>\n            <p>\n                A previous session was found from ${sessionAge} minutes ago with ${dataCount} data points.\n            </p>\n            <p>\n                Would you like to restore this session or start fresh?\n            </p>\n            <div class=\"modal-buttons\">\n                <button id=\"startFresh\" class=\"modal-button secondary\">Start Fresh</button>\n                <button id=\"restoreSession\" class=\"modal-button primary\">Restore Session</button>\n            </div>\n        `;\n        backdrop.appendChild(modal);\n        document.body.appendChild(backdrop);\n        // Handle button clicks\n        modal.querySelector('#startFresh').addEventListener('click', ()=>{\n            document.body.removeChild(backdrop);\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            resolve(false);\n        });\n        modal.querySelector('#restoreSession').addEventListener('click', ()=>{\n            document.body.removeChild(backdrop);\n            resolve(true);\n        });\n        // Handle backdrop click\n        backdrop.addEventListener('click', (e)=>{\n            if (e.target === backdrop) {\n                document.body.removeChild(backdrop);\n                resolve(false);\n            }\n        });\n    });\n}\n// Strava Integration Functions\nfunction getStravaAuthFromStorage() {\n    try {\n        const authData = localStorage.getItem('stravaAuth');\n        if (authData) {\n            const parsed = JSON.parse(authData);\n            // Check if token is expired (tokens typically last 6 hours)\n            if (parsed.expires_at && Date.now() > parsed.expires_at * 1000) {\n                localStorage.removeItem('stravaAuth');\n                return null;\n            }\n            return parsed;\n        }\n    } catch (error) {\n        console.error('Error reading Strava auth from storage:', error);\n    }\n    return null;\n}\nasync function initiateStravaAuth() {\n    const clientId = getStravaClientId();\n    if (!clientId) {\n        // Show configuration dialog\n        const configuredClientId = await showStravaConfigDialog();\n        if (!configuredClientId) return; // User cancelled\n    }\n    // Get the client ID again (might have been just configured)\n    const finalClientId = getStravaClientId();\n    // Strava OAuth configuration using implicit flow (no client secret needed)\n    const redirectUri = encodeURIComponent(window.location.origin + window.location.pathname);\n    const scope = 'activity:write';\n    const authUrl = `https://www.strava.com/oauth/authorize?client_id=${finalClientId}&response_type=token&redirect_uri=${redirectUri}&approval_prompt=force&scope=${scope}`;\n    // Store current state to return to after auth\n    localStorage.setItem('stravaAuthPending', 'true');\n    // Open Strava auth in new window\n    window.location.href = authUrl;\n}\nasync function uploadToStrava(tcxContent, accessToken) {\n    try {\n        // Create a form data object for the file upload\n        const formData = new FormData();\n        const blob = new Blob([\n            tcxContent\n        ], {\n            type: 'application/xml'\n        });\n        const now = new Date();\n        const filename = `power_data_${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}.tcx`;\n        formData.append('file', blob, filename);\n        formData.append('data_type', 'tcx');\n        formData.append('name', `Power Meter Session - ${now.toLocaleDateString()}`);\n        formData.append('description', 'Cycling session data from Web Bluetooth Power Meter');\n        const response = await fetch('https://www.strava.com/api/v3/uploads', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            },\n            body: formData\n        });\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Failed to upload to Strava');\n        }\n        const result = await response.json();\n        return result;\n    } catch (error) {\n        console.error('Error uploading to Strava:', error);\n        throw error;\n    }\n}\n// Update Strava button text based on connection status\nfunction updateStravaButtonStatus() {\n    const syncToStravaButton = document.getElementById('syncToStravaButton');\n    if (!syncToStravaButton) return;\n    const stravaAuth = getStravaAuthFromStorage();\n    if (stravaAuth && stravaAuth.access_token) {\n        syncToStravaButton.textContent = \"\\uD83D\\uDEB4 Sync to Strava\";\n        syncToStravaButton.title = 'Connected to Strava - Click to sync your session';\n    } else {\n        syncToStravaButton.textContent = \"\\uD83D\\uDEB4 Connect to Strava\";\n        syncToStravaButton.title = 'Click to connect to Strava first';\n    }\n}\n// Check for Strava OAuth callback (implicit flow)\nfunction checkStravaCallback() {\n    // For implicit flow, token is in URL hash, not query params\n    const hashParams = new URLSearchParams(window.location.hash.substring(1));\n    const accessToken = hashParams.get('access_token');\n    const expiresIn = hashParams.get('expires_in');\n    const scope = hashParams.get('scope');\n    if (accessToken && localStorage.getItem('stravaAuthPending')) {\n        // Store token data\n        const tokenData = {\n            access_token: accessToken,\n            expires_at: Math.floor(Date.now() / 1000) + parseInt(expiresIn || '21600'),\n            scope: scope\n        };\n        localStorage.setItem('stravaAuth', JSON.stringify(tokenData));\n        localStorage.removeItem('stravaAuthPending');\n        alert('Successfully connected to Strava!');\n        // Update button status\n        updateStravaButtonStatus();\n        // Clean up URL hash\n        window.history.replaceState({}, document.title, window.location.pathname);\n    }\n}\ndocument.addEventListener('DOMContentLoaded', async function() {\n    // Try to load previous session data\n    const sessionData = loadSessionData();\n    if (sessionData) {\n        // Show restoration dialog\n        const shouldRestore = await showRestorationDialog(sessionData);\n        if (shouldRestore) restoreSessionData(sessionData);\n        else sessionStartTime = Date.now();\n    } else sessionStartTime = Date.now();\n    // Check for Strava callback on page load\n    checkStravaCallback();\n    // Update button status on page load\n    updateStravaButtonStatus();\n    // Save session data when page is about to be closed/refreshed\n    window.addEventListener('beforeunload', function() {\n        if (powerData.length > 0) saveSessionData();\n    });\n    // Save session data periodically (every 30 seconds as backup)\n    setInterval(()=>{\n        if (powerData.length > 0) saveSessionData();\n    }, 30000);\n});\n\n//# sourceMappingURL=power-saver.de843bf5.js.map\n","// Strava Integration Configuration\n// Client ID is now configurable from the web interface and stored in browser\n// SECURITY: This uses OAuth implicit flow - secure for client-side apps\n// No client secret needed (and shouldn't be in frontend code!)\n// For production apps, consider using a backend proxy for enhanced security\n\n// Get Strava Client ID from localStorage or return null if not configured\nfunction getStravaClientId() {\n    return localStorage.getItem('stravaClientId');\n}\n\n// Set Strava Client ID in localStorage\nfunction setStravaClientId(clientId) {\n    localStorage.setItem('stravaClientId', clientId);\n}\n\n// Show Strava configuration dialog\nfunction showStravaConfigDialog() {\n    return new Promise((resolve) => {\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n\n        // Create modal dialog\n        const modal = document.createElement('div');\n        modal.className = 'modal strava-config-modal';\n\n        modal.innerHTML = `\n            <h3>🚴 Configure Strava Integration</h3>\n            <div class=\"config-instructions\">\n                <p><strong>To enable Strava sync functionality:</strong></p>\n                <ol>\n                    <li>Go to <a href=\"https://www.strava.com/settings/api\" target=\"_blank\" rel=\"noopener\">https://www.strava.com/settings/api</a></li>\n                    <li>Click \"Create & Manage Your App\"</li>\n                    <li>Fill in the required information:\n                        <ul>\n                            <li><strong>Application Name:</strong> Your app name (e.g., \"Power Meter\")</li>\n                            <li><strong>Category:</strong> Choose appropriate category</li>\n                            <li><strong>Website:</strong> Your website URL</li>\n                            <li><strong>Authorization Callback Domain:</strong> <code>${window.location.hostname}</code></li>\n                        </ul>\n                    </li>\n                    <li>After creating the app, copy your <strong>Client ID</strong> and paste it below</li>\n                </ol>\n            </div>\n            <div class=\"config-input\">\n                <label for=\"clientIdInput\">Strava Client ID:</label>\n                <input type=\"text\" id=\"clientIdInput\" placeholder=\"Enter your Strava Client ID\" />\n                <div class=\"input-hint\">This will be stored securely in your browser</div>\n            </div>\n            <div class=\"modal-buttons\">\n                <button id=\"cancelConfig\" class=\"modal-button secondary\">Cancel</button>\n                <button id=\"saveConfig\" class=\"modal-button primary\">Save & Connect</button>\n            </div>\n        `;\n\n        backdrop.appendChild(modal);\n        document.body.appendChild(backdrop);\n\n        const clientIdInput = modal.querySelector('#clientIdInput');\n        const saveButton = modal.querySelector('#saveConfig');\n        const cancelButton = modal.querySelector('#cancelConfig');\n\n        // Focus on input\n        clientIdInput.focus();\n\n        // Handle save button\n        saveButton.addEventListener('click', () => {\n            const clientId = clientIdInput.value.trim();\n            if (!clientId) {\n                alert('Please enter a valid Client ID');\n                return;\n            }\n\n            // Validate that it looks like a client ID (should be numeric)\n            if (!/^\\d+$/.test(clientId)) {\n                alert('Client ID should be a numeric value');\n                return;\n            }\n\n            setStravaClientId(clientId);\n            document.body.removeChild(backdrop);\n            resolve(clientId);\n        });\n\n        // Handle cancel button\n        cancelButton.addEventListener('click', () => {\n            document.body.removeChild(backdrop);\n            resolve(null);\n        });\n\n        // Handle Enter key in input\n        clientIdInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                saveButton.click();\n            }\n        });\n\n        // Handle Escape key\n        document.addEventListener('keydown', function escapeHandler(e) {\n            if (e.key === 'Escape') {\n                document.removeEventListener('keydown', escapeHandler);\n                document.body.removeChild(backdrop);\n                resolve(null);\n            }\n        });\n\n        // Handle backdrop click\n        backdrop.addEventListener('click', (e) => {\n            if (e.target === backdrop) {\n                document.body.removeChild(backdrop);\n                resolve(null);\n            }\n        });\n    });\n}\n\n// Screen Wake Lock\nlet wakeLock = null;\n\nasync function requestWakeLock() {\n    if ('wakeLock' in navigator) {\n        try {\n            wakeLock = await navigator.wakeLock.request('screen');\n            wakeLock.addEventListener('release', () => {\n                // Wake lock was released\n            });\n        } catch (err) {\n            console.error(`${err.name}, ${err.message}`);\n        }\n    }\n}\n\n// Currently unused but may be needed for future functionality\n// eslint-disable-next-line no-unused-vars\nasync function releaseWakeLock() {\n    if (wakeLock !== null) {\n        await wakeLock.release();\n        wakeLock = null;\n    }\n}\n\n// TCX Generation Functions\n/**\n * Creates a trackpoint XML element for a single data point\n * @param {Object} dataPoint - Data point with time, power, heartRate, cadence\n * @returns {string} XML trackpoint string\n */\nfunction createTrackpoint(dataPoint) {\n    const translations = {\n        time: time => `<Time>${new Date(time).toISOString()}</Time>`,\n        heartRate: hr => `\n<HeartRateBpm>\n  <Value>${hr}</Value>\n</HeartRateBpm>\n            `.trim(),\n        cadence: cad => `<Cadence>${cad}</Cadence>`,\n        power: pw => `\n<Extensions>\n  <ns2:TPX>\n    <ns2:Watts>${pw}</ns2:Watts>\n  </ns2:TPX>\n</Extensions>\n            `.trim(),\n    }\n    const contents = Object.keys(translations).map(key => {\n        if (dataPoint[key] === undefined) return '';\n        return translations[key](dataPoint[key])\n    }).filter(x => x).join('\\n');\n\n    return `\n<Trackpoint>\n  ${contents}\n</Trackpoint>\n`.trim();\n}\n\n/**\n * Generates TCX XML string from power data for cycling activities\n * @param {Array<Object>} powerData - Array of power measurement objects\n * @returns {string} Complete TCX XML string\n */\nfunction generateTcxString(powerData) {\n    // Validate input data\n    if (!Array.isArray(powerData) || powerData.length === 0) {\n        throw new Error(\"Input power data array is empty or invalid\");\n    }\n\n    // Filter and normalize data\n    const validDataPoints = powerData.filter(dataPoint =>\n        dataPoint &&\n        typeof dataPoint === 'object' &&\n        dataPoint.timestamp !== undefined &&\n        !isNaN(new Date(dataPoint.timestamp).getTime())\n    );\n\n    if (validDataPoints.length === 0) {\n        throw new Error(\"No valid data points found\");\n    }\n\n    // Transform data\n    const normalizeDataPoint = (item) => ({\n        time: item.timestamp,\n        ...(item.power !== undefined && { power: item.power }),\n        ...(item.heartRate !== undefined && { heartRate: item.heartRate }),\n        ...(item.cadence !== undefined && { cadence: item.cadence })\n    });\n\n    // Process data\n    let processedData = validDataPoints\n        .map(normalizeDataPoint)\n        .sort((a, b) => a.time - b.time);\n\n    // Remove leading/trailing entries without power\n    const isEmptyPower = (dataPoint) => !dataPoint.power || dataPoint.power <= 0;\n    while (processedData.length > 0 && isEmptyPower(processedData[0])) {\n        processedData.shift();\n    }\n    while (processedData.length > 0 && isEmptyPower(processedData[processedData.length - 1])) {\n        processedData.pop();\n    }\n\n    if (processedData.length === 0) {\n        throw new Error(\"No valid power data found after processing\");\n    }\n\n    // Calculate exercise statistics\n    const validPowerReadings = processedData.filter(d => d.power && d.power > 0).map(d => parseFloat(d.power));\n    const avgPower = validPowerReadings.length > 0 ? Math.round(validPowerReadings.reduce((a, b) => a + b, 0) / validPowerReadings.length) : 0;\n    const maxPower = validPowerReadings.length > 0 ? Math.max(...validPowerReadings) : 0;\n\n    const startTime = processedData[0].time;\n    const endTime = processedData[processedData.length - 1].time;\n    const duration = Math.round((endTime - startTime) / 1000 / 60); // duration in minutes\n\n    // Generate activity notes with exercise description and power averages\n    const exerciseDescription = \"Indoor cycling session recorded with Power Saver app.\";\n\n    let powerAveragesText = \"\";\n    if (typeof powerAverages !== 'undefined' && powerAverages) {\n        const averagesList = [];\n\n        if (powerAverages['10s'] && powerAverages['10s'].best > 0) {\n            averagesList.push(`10s: ${powerAverages['10s'].best}W`);\n        }\n        if (powerAverages['30s'] && powerAverages['30s'].best > 0) {\n            averagesList.push(`30s: ${powerAverages['30s'].best}W`);\n        }\n        if (powerAverages['1m'] && powerAverages['1m'].best > 0) {\n            averagesList.push(`1min: ${powerAverages['1m'].best}W`);\n        }\n        if (powerAverages['2m'] && powerAverages['2m'].best > 0) {\n            averagesList.push(`2min: ${powerAverages['2m'].best}W`);\n        }\n        if (powerAverages['4m'] && powerAverages['4m'].best > 0) {\n            averagesList.push(`4min: ${powerAverages['4m'].best}W`);\n        }\n        if (powerAverages['8m'] && powerAverages['8m'].best > 0) {\n            averagesList.push(`8min: ${powerAverages['8m'].best}W`);\n        }\n\n        if (averagesList.length > 0) {\n            powerAveragesText = `\\n\\nBest Power Averages: ${averagesList.join(', ')}`;\n        }\n    }\n\n    const sessionStats = `\\nSession Stats: Duration: ${duration} min, Avg Power: ${avgPower}W, Max Power: ${maxPower}W`;\n    const activityNotes = exerciseDescription + sessionStats + powerAveragesText;\n\n    // Helper function to escape XML special characters\n    const escapeXml = (text) => {\n        return text\n            .replace(/&/g, '&amp;')\n            .replace(/</g, '&lt;')\n            .replace(/>/g, '&gt;')\n            .replace(/\"/g, '&quot;')\n            .replace(/'/g, '&apos;');\n    };\n\n    // Generate XML\n    const trackpoints = processedData.map(createTrackpoint).join('\\n');\n    const startTimeISO = new Date(startTime).toISOString();\n\n    const rawXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<TrainingCenterDatabase\n  xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\"\n  xmlns:ns2=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\">\n  <Activities>\n    <Activity Sport=\"Biking\">\n      <Id>${startTimeISO}</Id>\n      <Name>E Bike Indoor Cycling Trainer</Name>\n      <Notes>${escapeXml(activityNotes)}</Notes>\n      <Lap StartTime=\"${startTimeISO}\">\n        <Track>\n        ${trackpoints}\n        </Track>\n      </Lap>\n    </Activity>\n  </Activities>\n</TrainingCenterDatabase>`;\n\n    return rawXml;\n}\n\n// Data Persistence Functions\nconst SESSION_STORAGE_KEY = 'powerMeterSession';\nconst SESSION_TIMEOUT = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n\n/**\n * Save current session data to localStorage\n */\nfunction saveSessionData() {\n    try {\n        const sessionData = {\n            timestamp: Date.now(),\n            powerData: powerData,\n            heartData: heartData,\n            cadenceData: cadenceData,\n            rawPowerMeasurements: rawPowerMeasurements,\n            powerReadings: powerReadings,\n            powerAverages: powerAverages,\n            lastPowerValue: lastPowerValue,\n            lastHeartRateValue: lastHeartRateValue,\n            lastCadenceValue: lastCadenceValue,\n            sessionStartTime: sessionStartTime\n        };\n\n        localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n    } catch (error) {\n        console.warn('Failed to save session data:', error);\n    }\n}\n\n/**\n * Load session data from localStorage if available and recent\n * Returns the session data object if available, null if not\n */\nfunction loadSessionData() {\n    try {\n        const savedData = localStorage.getItem(SESSION_STORAGE_KEY);\n        if (!savedData) return null;\n\n        const sessionData = JSON.parse(savedData);\n        const now = Date.now();\n\n        // Check if session is too old (older than 24 hours)\n        if (now - sessionData.timestamp > SESSION_TIMEOUT) {\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            return null;\n        }\n\n        return sessionData;\n    } catch (error) {\n        console.warn('Failed to load session data:', error);\n        localStorage.removeItem(SESSION_STORAGE_KEY);\n        return null;\n    }\n}\n\n/**\n * Apply session data to restore the session\n */\nfunction restoreSessionData(sessionData) {\n    try {\n        // Restore data arrays\n        if (sessionData.powerData) powerData.length = 0, powerData.push(...sessionData.powerData);\n        if (sessionData.heartData) heartData.length = 0, heartData.push(...sessionData.heartData);\n        if (sessionData.cadenceData) cadenceData.length = 0, cadenceData.push(...sessionData.cadenceData);\n        if (sessionData.rawPowerMeasurements) rawPowerMeasurements.length = 0, rawPowerMeasurements.push(...sessionData.rawPowerMeasurements);\n        if (sessionData.powerReadings) powerReadings.length = 0, powerReadings.push(...sessionData.powerReadings);\n\n        // Restore power averages completely\n        if (sessionData.powerAverages) {\n            Object.assign(powerAverages, sessionData.powerAverages);\n        }\n\n        // Restore last values\n        if (sessionData.lastPowerValue !== undefined) lastPowerValue = sessionData.lastPowerValue;\n        if (sessionData.lastHeartRateValue !== undefined) lastHeartRateValue = sessionData.lastHeartRateValue;\n        if (sessionData.lastCadenceValue !== undefined) lastCadenceValue = sessionData.lastCadenceValue;\n        if (sessionData.sessionStartTime !== undefined) sessionStartTime = sessionData.sessionStartTime;\n\n        // Update displays with restored data\n        updateDisplaysFromRestoredData();\n\n        return true;\n    } catch (error) {\n        console.warn('Failed to restore session data:', error);\n        return false;\n    }\n}\n\n/**\n * Update displays after restoring session data\n */\nfunction updateDisplaysFromRestoredData() {\n    // Update current metric values\n    powerValueElement.textContent = lastPowerValue || '--';\n    hrValueElement.textContent = lastHeartRateValue || '--';\n    cadenceValueElement.textContent = lastCadenceValue || '--';\n\n    // Update power averages display\n    updatePowerAveragesDisplay();\n\n    // Show session restoration notification\n    if (powerData.length > 0) {\n        showSessionRestoredNotification();\n    }\n}\n\n/**\n * Show notification that session was restored\n */\nfunction showSessionRestoredNotification() {\n    const notification = document.createElement('div');\n    notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #4CAF50;\n        color: white;\n        padding: 1rem 1.5rem;\n        border-radius: 8px;\n        z-index: 1000;\n        font-size: 0.9rem;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        animation: slideIn 0.3s ease-out;\n    `;\n    notification.textContent = `Session restored! ${powerData.length} data points recovered.`;\n\n    // Add animation\n    const style = document.createElement('style');\n    style.textContent = `\n        @keyframes slideIn {\n            from { transform: translateX(100%); opacity: 0; }\n            to { transform: translateX(0); opacity: 1; }\n        }\n    `;\n    document.head.appendChild(style);\n\n    document.body.appendChild(notification);\n\n    // Remove notification after 5 seconds\n    setTimeout(() => {\n        notification.style.animation = 'slideIn 0.3s ease-out reverse';\n        setTimeout(() => {\n            if (notification.parentNode) {\n                notification.parentNode.removeChild(notification);\n            }\n            if (style.parentNode) {\n                style.parentNode.removeChild(style);\n            }\n        }, 300);\n    }, 5000);\n}\n\n/**\n * Clear session data from localStorage\n */\nfunction clearSessionData() {\n    localStorage.removeItem(SESSION_STORAGE_KEY);\n}\n\nconst connectButton = document.getElementById('connectButton');\nconst statusText = document.getElementById('status');\nconst powerValueElement = document.getElementById('power-value');\nconst hrValueElement = document.getElementById('hr-value');\nconst cadenceValueElement = document.getElementById('cadence-value');\nconst deviceNameElement = document.getElementById('device-name');\nconst exportJsonButton = document.getElementById('exportJsonButton');\nconst exportCsvButton = document.getElementById('exportCsvButton');\nconst exportTcxButton = document.getElementById('exportTcxButton');\nconst exportRawJsonButton = document.getElementById('exportRawJsonButton');\nconst exportRawCsvButton = document.getElementById('exportRawCsvButton');\nconst syncToStravaButton = document.getElementById('syncToStravaButton');\nconst clearSessionButton = document.getElementById('clearSessionButton');\n\n// Power averages elements\nconst avg10sCurrentElement = document.getElementById('avg10s-current');\nconst avg10sBestElement = document.getElementById('avg10s-best');\nconst avg30sCurrentElement = document.getElementById('avg30s-current');\nconst avg30sBestElement = document.getElementById('avg30s-best');\nconst avg1mCurrentElement = document.getElementById('avg1m-current');\nconst avg1mBestElement = document.getElementById('avg1m-best');\nconst avg2mCurrentElement = document.getElementById('avg2m-current');\nconst avg2mBestElement = document.getElementById('avg2m-best');\nconst avg4mCurrentElement = document.getElementById('avg4m-current');\nconst avg4mBestElement = document.getElementById('avg4m-best');\nconst avg8mCurrentElement = document.getElementById('avg8m-current');\nconst avg8mBestElement = document.getElementById('avg8m-best');\n\n// Toggle elements\nconst toggleConnectSection = document.getElementById('toggleConnectSection');\nconst toggleExportSection = document.getElementById('toggleExportSection');\nconst connectSection = document.getElementById('connectSection');\nconst exportSection = document.getElementById('exportSection');\nconst powerAveragesSection = document.getElementById('powerAveragesSection');\nconst connectToggleText = document.getElementById('connectToggleText');\nconst exportToggleText = document.getElementById('exportToggleText');\n\n// Hamburger menu elements\nconst hamburgerBtn = document.getElementById('hamburgerButton');\nconst menuDropdown = document.getElementById('menuDropdown');\nconst powerAveragesToggle = document.getElementById('powerAveragesToggle');\nconst powerMetricToggle = document.getElementById('powerMetricToggle');\nconst heartRateMetricToggle = document.getElementById('heartRateMetricToggle');\nconst cadenceMetricToggle = document.getElementById('cadenceMetricToggle');\nconst connectSectionToggle = document.getElementById('connectSectionToggle');\nconst exportSectionToggle = document.getElementById('exportSectionToggle');\nconst stravaSettingsMenuItem = document.getElementById('stravaSettingsMenuItem');\n\n// Metric card elements\nconst powerCard = document.querySelector('.power-card');\nconst heartRateCard = document.querySelector('.hr-card');\nconst cadenceCard = document.querySelector('.cadence-card');\n\n// Status indicator elements\nconst powerStatusIndicator = document.getElementById('power-status-indicator');\nconst hrStatusIndicator = document.getElementById('hr-status-indicator');\nconst cadenceStatusIndicator = document.getElementById('cadence-status-indicator');\n\n// Initialize all status indicators to disconnected state\npowerStatusIndicator.className = 'status-indicator';\nhrStatusIndicator.className = 'status-indicator';\ncadenceStatusIndicator.className = 'status-indicator';\n\n// Only add event listeners if elements exist\nif (hamburgerBtn && menuDropdown) {\n    // Hamburger menu functionality\n    hamburgerBtn.addEventListener('click', function () {\n        const isActive = menuDropdown.classList.contains('active');\n        if (isActive) {\n            menuDropdown.classList.remove('active');\n        } else {\n            menuDropdown.classList.add('active');\n        }\n    });\n\n    // Close menu when clicking outside\n    document.addEventListener('click', function (event) {\n        if (!event.target.closest('.hamburger-menu')) {\n            menuDropdown.classList.remove('active');\n        }\n    });\n} else {\n    console.error('Hamburger menu elements not found:', {\n        hamburgerBtn: !!hamburgerBtn,\n        menuDropdown: !!menuDropdown\n    });\n}\n\nif (powerAveragesToggle && powerAveragesSection) {\n    // Power averages toggle via hamburger menu\n    let powerAveragesVisible = false;\n    powerAveragesToggle.addEventListener('click', function () {\n        powerAveragesVisible = !powerAveragesVisible;\n\n        if (powerAveragesVisible) {\n            powerAveragesSection.style.display = 'block';\n            powerAveragesToggle.classList.add('active');\n        } else {\n            powerAveragesSection.style.display = 'none';\n            powerAveragesToggle.classList.remove('active');\n        }\n        manageCollapsedSectionsLayout();\n    });\n} else {\n    console.error('Power averages toggle elements not found:', {\n        powerAveragesToggle: !!powerAveragesToggle,\n        powerAveragesSection: !!powerAveragesSection\n    });\n}\n\n// Power metric toggle via hamburger menu\nif (powerMetricToggle && powerCard) {\n    let powerMetricVisible = true; // Start visible by default\n    powerMetricToggle.classList.add('active'); // Set initial active state\n\n    powerMetricToggle.addEventListener('click', function () {\n        powerMetricVisible = !powerMetricVisible;\n\n        if (powerMetricVisible) {\n            powerCard.style.display = 'block';\n            powerMetricToggle.classList.add('active');\n        } else {\n            powerCard.style.display = 'none';\n            powerMetricToggle.classList.remove('active');\n        }\n    });\n} else {\n    console.error('Power metric toggle elements not found:', {\n        powerMetricToggle: !!powerMetricToggle,\n        powerCard: !!powerCard\n    });\n}\n\n// Heart rate metric toggle via hamburger menu\nif (heartRateMetricToggle && heartRateCard) {\n    let heartRateMetricVisible = true; // Start visible by default\n    heartRateMetricToggle.classList.add('active'); // Set initial active state\n\n    heartRateMetricToggle.addEventListener('click', function () {\n        heartRateMetricVisible = !heartRateMetricVisible;\n\n        if (heartRateMetricVisible) {\n            heartRateCard.style.display = 'block';\n            heartRateMetricToggle.classList.add('active');\n        } else {\n            heartRateCard.style.display = 'none';\n            heartRateMetricToggle.classList.remove('active');\n        }\n    });\n} else {\n    console.error('Heart rate metric toggle elements not found:', {\n        heartRateMetricToggle: !!heartRateMetricToggle,\n        heartRateCard: !!heartRateCard\n    });\n}\n\n// Cadence metric toggle via hamburger menu\nif (cadenceMetricToggle && cadenceCard) {\n    let cadenceMetricVisible = true; // Start visible by default\n    cadenceMetricToggle.classList.add('active'); // Set initial active state\n\n    cadenceMetricToggle.addEventListener('click', function () {\n        cadenceMetricVisible = !cadenceMetricVisible;\n\n        if (cadenceMetricVisible) {\n            cadenceCard.style.display = 'block';\n            cadenceMetricToggle.classList.add('active');\n        } else {\n            cadenceCard.style.display = 'none';\n            cadenceMetricToggle.classList.remove('active');\n        }\n    });\n} else {\n    console.error('Cadence metric toggle elements not found:', {\n        cadenceMetricToggle: !!cadenceMetricToggle,\n        cadenceCard: !!cadenceCard\n    });\n}\n\n// Connect section toggle via hamburger menu\nif (connectSectionToggle && connectSection) {\n    let connectSectionVisible = true; // Start visible by default\n    connectSectionToggle.classList.add('active'); // Set initial active state\n\n    connectSectionToggle.addEventListener('click', function () {\n        connectSectionVisible = !connectSectionVisible;\n\n        if (connectSectionVisible) {\n            connectSection.style.display = 'block';\n            connectSectionToggle.classList.add('active');\n        } else {\n            connectSection.style.display = 'none';\n            connectSectionToggle.classList.remove('active');\n        }\n    });\n} else {\n    console.error('Connect section toggle elements not found:', {\n        connectSectionToggle: !!connectSectionToggle,\n        connectSection: !!connectSection\n    });\n}\n\n// Export section toggle via hamburger menu\nif (exportSectionToggle && exportSection) {\n    let exportSectionVisible = false; // Start hidden by default (as it currently is)\n    // exportSectionToggle starts inactive since export section is initially hidden\n\n    exportSectionToggle.addEventListener('click', function () {\n        exportSectionVisible = !exportSectionVisible;\n\n        if (exportSectionVisible) {\n            exportSection.style.display = 'block';\n            exportSectionToggle.classList.add('active');\n        } else {\n            exportSection.style.display = 'none';\n            exportSectionToggle.classList.remove('active');\n        }\n    });\n} else {\n    console.error('Export section toggle elements not found:', {\n        exportSectionToggle: !!exportSectionToggle,\n        exportSection: !!exportSection\n    });\n}\n\n// Toggle functionality for connect section\ntoggleConnectSection.addEventListener('click', () => {\n    const connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\n    const sectionHeader = connectSection.querySelector('.section-header');\n    const isHidden = connectButtons[0].style.display === 'none';\n    if (isHidden) {\n        connectButtons.forEach(btn => btn.style.display = 'block');\n        connectToggleText.textContent = 'Hide Connect Devices';\n        toggleConnectSection.classList.remove('collapsed');\n        connectSection.classList.remove('collapsed');\n        sectionHeader.classList.remove('collapsed');\n    } else {\n        connectButtons.forEach(btn => btn.style.display = 'none');\n        connectToggleText.textContent = 'Show Connect Devices';\n        toggleConnectSection.classList.add('collapsed');\n        connectSection.classList.add('collapsed');\n        sectionHeader.classList.add('collapsed');\n    }\n    // Don't call updateDashboardLayout for bottom controls\n});\n\n// Toggle functionality for export section\ntoggleExportSection.addEventListener('click', () => {\n    const exportButtons = document.getElementById('export-buttons');\n    const sectionHeader = exportSection.querySelector('.section-header');\n    const isHidden = exportButtons.style.display === 'none';\n    if (isHidden) {\n        exportSection.style.display = 'block';\n        exportButtons.style.display = 'flex';\n        exportToggleText.textContent = 'Hide Export Data';\n        toggleExportSection.classList.remove('collapsed');\n        exportSection.classList.remove('collapsed');\n        sectionHeader.classList.remove('collapsed');\n    } else {\n        exportButtons.style.display = 'none';\n        exportToggleText.textContent = 'Show Export Data';\n        toggleExportSection.classList.add('collapsed');\n        exportSection.classList.add('collapsed');\n        sectionHeader.classList.add('collapsed');\n    }\n    // Don't call updateDashboardLayout for bottom controls\n});\n\n// Strava Settings Menu Item\nif (stravaSettingsMenuItem) {\n    stravaSettingsMenuItem.addEventListener('click', async () => {\n        await showStravaConfigDialog();\n        // Update button status after potential configuration change\n        updateStravaButtonStatus();\n        // Close the menu\n        menuDropdown.classList.remove('active');\n    });\n} else {\n    console.error('Strava settings menu item not found');\n}\n\n// Function to update dashboard layout based on visible sections\nfunction updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const powerAveragesHidden = powerAveragesSection && powerAveragesSection.style.display === 'none';\n\n    if (powerAveragesHidden) {\n        dashboard.classList.add('maximized');\n    } else {\n        dashboard.classList.remove('maximized');\n    }\n\n    // Manage horizontal layout for collapsed sections (excluding bottom controls)\n    manageCollapsedSectionsLayout();\n}\n\n// Function to manage horizontal layout of collapsed sections\nfunction manageCollapsedSectionsLayout() {\n    const dashboard = document.querySelector('.dashboard');\n\n    // Only manage power averages section for collapsed layout - \n    // connect and export sections are now bottom controls and stay at bottom\n    // Note: collapsedSections logic simplified since only power averages section is managed now\n\n    // Remove any existing collapsed sections row\n    const existingRow = document.querySelector('.collapsed-sections-row');\n    if (existingRow) {\n        // Move sections back to their original positions\n        const sectionsInRow = existingRow.querySelectorAll('.power-averages-section');\n        sectionsInRow.forEach(section => {\n            // Insert sections back after the dashboard\n            dashboard.parentNode.insertBefore(section, dashboard.nextSibling);\n        });\n        existingRow.remove();\n    }\n\n    // Power averages section doesn't need horizontal grouping since it's the only\n    // section that can be managed this way now\n    dashboard.classList.remove('has-collapsed-sections');\n}\n\n// Initialize sections - connect section visible, export section hidden (controlled by hamburger menu)\nconst connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\nconnectButtons.forEach(btn => btn.style.display = 'block');\n\n// Initialize export section as hidden (controlled by hamburger menu)\nexportSection.style.display = 'none';\n\n// Initialize power averages section as hidden (controlled by hamburger menu)\npowerAveragesSection.style.display = 'none';\n\nupdateDashboardLayout();\n\n\nlet powerData = [];\nlet rawPowerMeasurements = [];\nlet lastPowerValue = 0;\nlet sessionStartTime = null;\n\n// Power averaging data structures\nlet powerReadings = [];  // Array to store timestamped power readings\nlet powerAverages = {\n    '10s': { current: 0, best: 0 },\n    '30s': { current: 0, best: 0 },\n    '1m': { current: 0, best: 0 },\n    '2m': { current: 0, best: 0 },\n    '4m': { current: 0, best: 0 },\n    '8m': { current: 0, best: 0 }\n};\n\n// Power averaging functions\nfunction addPowerReading(power) {\n    const now = Date.now();\n    powerReadings.push({ timestamp: now, power: power });\n\n    // Keep only the last 8 minutes of readings (plus some buffer)\n    const eightMinutesAgo = now - (9 * 60 * 1000); // 9 minutes to be safe\n    powerReadings = powerReadings.filter(reading => reading.timestamp > eightMinutesAgo);\n\n    // Calculate current averages\n    calculatePowerAverages();\n    updatePowerAveragesDisplay();\n}\n\nfunction calculatePowerAverages() {\n    const now = Date.now();\n    const periods = {\n        '10s': 10 * 1000,\n        '30s': 30 * 1000,\n        '1m': 60 * 1000,\n        '2m': 120 * 1000,\n        '4m': 240 * 1000,\n        '8m': 480 * 1000\n    };\n\n    for (const [periodKey, periodMs] of Object.entries(periods)) {\n        const cutoffTime = now - periodMs;\n        const relevantReadings = powerReadings.filter(reading => reading.timestamp >= cutoffTime);\n\n        if (relevantReadings.length > 0) {\n            const sum = relevantReadings.reduce((total, reading) => total + reading.power, 0);\n            const average = Math.round(sum / relevantReadings.length);\n            powerAverages[periodKey].current = average;\n\n            // Update best if current is better\n            if (average > powerAverages[periodKey].best) {\n                powerAverages[periodKey].best = average;\n            }\n        } else {\n            powerAverages[periodKey].current = 0;\n        }\n    }\n}\n\nfunction updatePowerAveragesDisplay() {\n    avg10sCurrentElement.textContent = powerAverages['10s'].current || '--';\n    avg10sBestElement.textContent = powerAverages['10s'].best || '--';\n    avg30sCurrentElement.textContent = powerAverages['30s'].current || '--';\n    avg30sBestElement.textContent = powerAverages['30s'].best || '--';\n    avg1mCurrentElement.textContent = powerAverages['1m'].current || '--';\n    avg1mBestElement.textContent = powerAverages['1m'].best || '--';\n    avg2mCurrentElement.textContent = powerAverages['2m'].current || '--';\n    avg2mBestElement.textContent = powerAverages['2m'].best || '--';\n    avg4mCurrentElement.textContent = powerAverages['4m'].current || '--';\n    avg4mBestElement.textContent = powerAverages['4m'].best || '--';\n    avg8mCurrentElement.textContent = powerAverages['8m'].current || '--';\n    avg8mBestElement.textContent = powerAverages['8m'].best || '--';\n}\n\nfunction resetPowerAverages() {\n    powerReadings = [];\n    for (const period of Object.keys(powerAverages)) {\n        powerAverages[period].current = 0;\n        powerAverages[period].best = 0;\n    }\n    updatePowerAveragesDisplay();\n}\n\n/**\n * Reset all session data (called when all devices disconnect)\n */\nfunction resetAllSessionData() {\n    // Clear all data arrays\n    powerData.length = 0;\n    heartData.length = 0;\n    cadenceData.length = 0;\n    rawPowerMeasurements.length = 0;\n    powerReadings.length = 0;\n\n    // Reset power averages\n    for (const period of Object.keys(powerAverages)) {\n        powerAverages[period].current = 0;\n        powerAverages[period].best = 0;\n    }\n\n    // Reset last values\n    lastPowerValue = 0;\n    lastHeartRateValue = 0;\n    lastCadenceValue = 0;\n    sessionStartTime = null;\n\n    // Update displays\n    updatePowerAveragesDisplay();\n    powerValueElement.textContent = '--';\n    hrValueElement.textContent = '--';\n    cadenceValueElement.textContent = '--';\n\n    // Clear localStorage\n    clearSessionData();\n}\n\nlet lastHeartRateValue = 0;\nlet lastCadenceValue = 0;\nlet dataLoggerInterval = null;\nlet powerMeterDevice = null;\nconst CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID = 'cycling_power_feature';\nconst CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\n\nconnectButton.addEventListener('click', async () => {\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        statusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n\n    // Reset data from previous session\n    powerData = [];\n    rawPowerMeasurements = [];\n    lastPowerValue = 0;\n    resetPowerAverages();\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n    }\n\n    try {\n        statusText.textContent = 'Scanning for power meters...';\n        powerStatusIndicator.className = 'status-indicator connecting';\n\n        // Scan specifically for devices advertising the Cycling Power service\n        powerMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [{\n                services: [CYCLING_POWER_SERVICE_UUID]\n            }]\n        });\n\n        statusText.textContent = 'Connecting to device...';\n        deviceNameElement.textContent = `Device: ${powerMeterDevice.name || 'Unknown Device'}`;\n\n        powerMeterDevice.addEventListener('gattserverdisconnected', onDisconnected);\n\n        const server = await powerMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);\n\n        // Check for and subscribe to advanced power features if available\n        try {\n            const featureCharacteristic = await service.getCharacteristic(CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID);\n            // eslint-disable-next-line no-unused-vars\n            const features = await featureCharacteristic.readValue();\n            // This value can be used to determine what the power meter supports,\n            // but for now we just parse what's in the measurement characteristic.\n        } catch {\n            // Cycling Power Feature characteristic not found\n        }\n\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n\n        characteristic.addEventListener('characteristicvaluechanged', handlePowerMeasurement);\n\n        statusText.textContent = 'Connected and receiving data!';\n        powerStatusIndicator.className = 'status-indicator connected';\n        connectButton.disabled = true;\n\n        // Start session if this is the first connection\n        if (!sessionStartTime) {\n            sessionStartTime = Date.now();\n        }\n\n        // exportButtons.style.display = 'block';\n\n        dataLoggerInterval = setInterval(() => {\n            powerData.push({\n                timestamp: Date.now(),\n                power: lastPowerValue,\n                heartRate: lastHeartRateValue,\n                cadence: lastCadenceValue\n            });\n\n            // Save session data every 10 seconds\n            if (powerData.length % 100 === 0) { // Every 100 readings = 10 seconds\n                saveSessionData();\n            }\n        }, 100);\n\n    } catch (error) {\n        statusText.textContent = `Error: ${error.message}`;\n        powerStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n        if (powerMeterDevice) {\n            powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n        }\n    }\n});\n\nexportJsonButton.addEventListener('click', () => {\n    const jsonString = JSON.stringify(powerData, null, 2);\n    const blob = new Blob([jsonString], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\nexportCsvButton.addEventListener('click', () => {\n    let csvContent = 'timestamp,power,heartRate,cadence\\n';\n    powerData.forEach(row => {\n        csvContent += `${row.timestamp},${row.power},${row.heartRate},${row.cadence}\\n`;\n    });\n\n    const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\n// Export raw power measurements as JSON\nexportRawJsonButton.addEventListener('click', () => {\n    const jsonString = JSON.stringify(rawPowerMeasurements, null, 2);\n    const blob = new Blob([jsonString], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\n// Export raw power measurements as CSV\nexportRawCsvButton.addEventListener('click', () => {\n    let csvContent = 'timestamp,flags,dataLength,instantaneousPower,rawBytes\\n';\n\n    rawPowerMeasurements.forEach(measurement => {\n        csvContent += `${measurement.timestamp},${measurement.flags},${measurement.dataLength},${measurement.instantaneousPower},\"${measurement.rawBytes}\"\\n`;\n    });\n\n    const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\n// Export TCX\nexportTcxButton.addEventListener('click', () => {\n    try {\n        if (powerData.length === 0) {\n            alert('No power data available to export.');\n            return;\n        }\n\n        const tcxContent = generateTcxString(powerData);\n\n        const blob = new Blob([tcxContent], {\n            type: 'application/xml;charset=utf-8;'\n        });\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        const now = new Date();\n        const year = now.getFullYear();\n        const month = String(now.getMonth() + 1).padStart(2, '0');\n        const day = String(now.getDate()).padStart(2, '0');\n        const dateString = `${year}-${month}-${day}`;\n        a.download = `power_data_${dateString}.tcx`;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    } catch (error) {\n        console.error('Error generating TCX:', error);\n        alert(`Error generating TCX file: ${error.message}`);\n    }\n});\n\n// Sync to Strava\nsyncToStravaButton.addEventListener('click', async () => {\n    try {\n        if (powerData.length === 0) {\n            alert('No power data available to sync to Strava.');\n            return;\n        }\n\n        // Check if user is authenticated with Strava\n        const stravaAuth = getStravaAuthFromStorage();\n        if (!stravaAuth || !stravaAuth.access_token) {\n            // Redirect to Strava OAuth\n            await initiateStravaAuth();\n            return;\n        }\n\n        // Show loading state\n        syncToStravaButton.disabled = true;\n        syncToStravaButton.textContent = 'Syncing...';\n\n        // Generate TCX data for upload\n        const tcxContent = generateTcxString(powerData);\n\n        // Upload to Strava\n        await uploadToStrava(tcxContent, stravaAuth.access_token);\n\n        alert('Successfully synced to Strava!');\n\n    } catch (error) {\n        console.error('Error syncing to Strava:', error);\n        alert(`Error syncing to Strava: ${error.message}`);\n    } finally {\n        // Reset button state\n        syncToStravaButton.disabled = false;\n        updateStravaButtonStatus();\n    }\n});\n\n// Clear Session Data\nclearSessionButton.addEventListener('click', () => {\n    const confirmed = confirm('Are you sure you want to clear all session data? This action cannot be undone.');\n    if (confirmed) {\n        resetAllSessionData();\n        alert('Session data cleared successfully!');\n    }\n});\n\n\nfunction handlePowerMeasurement(event) {\n    const value = event.target.value;\n    const timestamp = Date.now();\n\n    // Store simplified raw measurement data\n    const rawMeasurement = {\n        timestamp: timestamp,\n        flags: value.getUint16(0, true),\n        rawBytes: Array.from(new Uint8Array(value.buffer)).map(b => b.toString(16).padStart(2, '0')).join(' '),\n        dataLength: value.byteLength\n    };\n\n    // The data is a DataView object with a flags field and the power value.\n    // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n    // eslint-disable-next-line no-unused-vars\n    const flags = value.getUint16(0, true);\n    let offset = 2;\n\n    // Power is always present\n    const power = value.getInt16(offset, true);\n    rawMeasurement.instantaneousPower = power;\n    powerValueElement.textContent = power;\n    lastPowerValue = power;\n\n    // Add power reading to averaging calculations\n    addPowerReading(power);\n\n    // Store the simplified raw measurement\n    rawPowerMeasurements.push(rawMeasurement);\n}\n/**\n * Parses the Cycling Power Measurement characteristic data.\n * The data is a DataView object with a flags field and the power value.\n * The instantaneous power is a 16-bit signed integer starting at the 3rd byte (offset 2).\n * Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n * Currently unused but kept for potential future use.\n */\n// eslint-disable-next-line no-unused-vars\nfunction parsePowerMeasurement(value) {\n    // The first 2 bytes are flags. The next 2 bytes are the instantaneous power.\n    // The power value is a signed 16-bit integer (sint16)\n    const instantaneousPower = value.getInt16(2, /*littleEndian=*/ true);\n    return instantaneousPower;\n}\n\nfunction onDisconnected() {\n    statusText.textContent = 'Device disconnected.';\n    powerStatusIndicator.className = 'status-indicator';\n    deviceNameElement.textContent = '';\n    powerValueElement.textContent = '--';\n    resetPowerAverages();\n    connectButton.disabled = false;\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n        dataLoggerInterval = null;\n    }\n    if (powerMeterDevice) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n        powerMeterDevice = null;\n    }\n    lastPowerValue = 0;\n}\n\n\nconst heartData = [];\nconst cadenceData = [];\n// eslint-disable-next-line no-unused-vars\nlet hrDataLoggerInterval = null; // Reserved for future HR data logging functionality\n\nconst hrConnectButton = document.getElementById('hrConnectButton');\nconst hrStatusText = document.getElementById('hrStatus');\nconst hrValue = document.getElementById('hr-value');\nconst hrDeviceName = document.getElementById('hrDeviceName');\n\nlet hrBluetoothDevice = null;\n\nhrConnectButton.addEventListener('click', async () => {\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        hrStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n\n    try {\n        hrStatusText.textContent = 'Scanning for devices...';\n        hrStatusIndicator.className = 'status-indicator connecting';\n\n        // Filter for devices that advertise the 'heart_rate' service\n        hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [{\n                services: ['heart_rate']\n            }]\n        });\n\n        hrStatusText.textContent = 'Connecting to device...';\n        hrDeviceName.textContent = `Device: ${hrBluetoothDevice.name}`;\n\n        // Add a listener for when the device gets disconnected\n        hrBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedHr);\n\n        const hrServer = await hrBluetoothDevice.gatt.connect();\n        const hrService = await hrServer.getPrimaryService('heart_rate');\n        const hrCharacteristic = await hrService.getCharacteristic('heart_rate_measurement');\n\n        // Start notifications to receive heart rate data\n        await hrCharacteristic.startNotifications();\n\n        hrCharacteristic.addEventListener('characteristicvaluechanged', handleHeartRateChanged);\n\n        hrStatusText.textContent = 'Connected!';\n        hrStatusIndicator.className = 'status-indicator connected';\n        hrConnectButton.disabled = true;\n\n    } catch (error) {\n        hrStatusText.textContent = `Error: ${error.message}`;\n        hrStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n    }\n});\n\nfunction handleHeartRateChanged(event) {\n    const value = event.target.value;\n    const heartRate = parseHeartRate(value);\n    hrValue.textContent = heartRate;\n    lastHeartRateValue = heartRate;\n}\n\n/**\n * The heart rate measurement is a DataView object.\n * The first byte is a flag, and the subsequent byte(s) are the heart rate value.\n * We need to check the first bit of the flag to see if the value is 8-bit or 16-bit.\n */\nfunction parseHeartRate(value) {\n    const flags = value.getUint8(0);\n    // Check if the heart rate value format is UINT16 (bit 0 is 1) or UINT8 (bit 0 is 0)\n    const is16bit = (flags & 0x1);\n    if (is16bit) {\n        // If 16-bit, read 2 bytes starting from the second byte\n        return value.getUint16(1, /*littleEndian=*/ true);\n    } else {\n        // If 8-bit, read 1 byte starting from the second byte\n        return value.getUint8(1);\n    }\n}\n\nfunction onDisconnectedHr() {\n    hrStatusText.textContent = 'Device disconnected.';\n    hrStatusIndicator.className = 'status-indicator';\n    hrDeviceName.textContent = '';\n    hrValue.textContent = '--';\n    hrConnectButton.disabled = false;\n    hrBluetoothDevice = null;\n    lastHeartRateValue = 0;\n}\n\nconst speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\nconst cadenceStatusText = document.getElementById('cadenceStatus');\nconst cadenceDeviceName = document.getElementById('cadenceDeviceName');\nlet speedCadenceBluetoothDevice = null;\n\nspeedCadenceConnectButton.addEventListener('click', async () => {\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        cadenceStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n\n    try {\n        cadenceStatusText.textContent = 'Scanning for sensors...';\n        cadenceStatusIndicator.className = 'status-indicator connecting';\n        \n        // Reset cadence variables for clean start\n        if (cadenceResetTimer) {\n            clearTimeout(cadenceResetTimer);\n            cadenceResetTimer = null;\n        }\n        lastCrankRevs = 0;\n        lastCrankTime = 0;\n        lastCadenceValue = 0;\n\n        speedCadenceBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [{\n                services: [CYCLING_CADENCE_SERVICE_UUID]\n            }]\n        });\n\n        cadenceStatusText.textContent = 'Connecting to device...';\n        cadenceDeviceName.textContent = `Device: ${speedCadenceBluetoothDevice.name}`;\n\n        speedCadenceBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedSpeedCadence);\n\n        const server = await speedCadenceBluetoothDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CSC_MEASUREMENT_CHARACTERISTIC_UUID);\n\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handleSpeedCadenceMeasurement);\n\n        cadenceStatusText.textContent = 'Connected!';\n        cadenceStatusIndicator.className = 'status-indicator connected';\n        speedCadenceConnectButton.disabled = true;\n\n    } catch (error) {\n        cadenceStatusText.textContent = `Error: ${error.message}`;\n        cadenceStatusIndicator.className = 'status-indicator';\n        console.error('Speed/Cadence connection failed:', error);\n    }\n});\n\nlet lastCrankRevs = 0;\nlet lastCrankTime = 0;\nlet cadenceResetTimer = null;\n\nfunction handleSpeedCadenceMeasurement(event) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n\n    const wheelRevsPresent = (flags & 0x01);\n    const crankRevsPresent = (flags & 0x02);\n\n    // Skip wheel revolution data since we don't need speed/distance\n    if (wheelRevsPresent) {\n        offset += 6; // Skip wheel data\n    }\n\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n\n        if (lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - lastCrankRevs;\n            const time = (lastCrankEventTime - lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = (revs / time) * 60; // RPM\n                cadenceValueElement.textContent = Math.round(cadence);\n                lastCadenceValue = Math.round(cadence);\n                \n                // Clear any existing reset timer\n                if (cadenceResetTimer) {\n                    clearTimeout(cadenceResetTimer);\n                }\n                \n                // Set timer to reset cadence to 0 if no new data comes in for 3 seconds\n                cadenceResetTimer = setTimeout(() => {\n                    cadenceValueElement.textContent = '0';\n                    lastCadenceValue = 0;\n                    cadenceResetTimer = null;\n                }, 3000);\n            }\n        }\n        lastCrankRevs = cumulativeCrankRevolutions;\n        lastCrankTime = lastCrankEventTime;\n    }\n}\n\nfunction onDisconnectedSpeedCadence() {\n    cadenceStatusText.textContent = 'Device disconnected.';\n    cadenceStatusIndicator.className = 'status-indicator';\n    cadenceDeviceName.textContent = '';\n    cadenceValueElement.textContent = '--';\n    speedCadenceConnectButton.disabled = false;\n    speedCadenceBluetoothDevice = null;\n    lastCadenceValue = 0;\n    \n    // Clear cadence reset timer and reset variables\n    if (cadenceResetTimer) {\n        clearTimeout(cadenceResetTimer);\n        cadenceResetTimer = null;\n    }\n    lastCrankRevs = 0;\n    lastCrankTime = 0;\n}\n\n// Initialize session on page load\n/**\n * Show restoration dialog to let user choose\n */\nfunction showRestorationDialog(sessionData) {\n    return new Promise((resolve) => {\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n\n        // Create modal dialog\n        const modal = document.createElement('div');\n        modal.className = 'modal';\n\n        // Get session info\n        const sessionAge = Math.round((Date.now() - sessionData.timestamp) / (1000 * 60)); // minutes\n        const dataCount = (sessionData.powerData?.length || 0) + (sessionData.heartData?.length || 0) + (sessionData.cadenceData?.length || 0);\n\n        modal.innerHTML = `\n            <h3>Previous Session Found</h3>\n            <p>\n                A previous session was found from ${sessionAge} minutes ago with ${dataCount} data points.\n            </p>\n            <p>\n                Would you like to restore this session or start fresh?\n            </p>\n            <div class=\"modal-buttons\">\n                <button id=\"startFresh\" class=\"modal-button secondary\">Start Fresh</button>\n                <button id=\"restoreSession\" class=\"modal-button primary\">Restore Session</button>\n            </div>\n        `;\n\n        backdrop.appendChild(modal);\n        document.body.appendChild(backdrop);\n\n        // Handle button clicks\n        modal.querySelector('#startFresh').addEventListener('click', () => {\n            document.body.removeChild(backdrop);\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            resolve(false);\n        });\n\n        modal.querySelector('#restoreSession').addEventListener('click', () => {\n            document.body.removeChild(backdrop);\n            resolve(true);\n        });\n\n        // Handle backdrop click\n        backdrop.addEventListener('click', (e) => {\n            if (e.target === backdrop) {\n                document.body.removeChild(backdrop);\n                resolve(false);\n            }\n        });\n    });\n}\n\n// Strava Integration Functions\nfunction getStravaAuthFromStorage() {\n    try {\n        const authData = localStorage.getItem('stravaAuth');\n        if (authData) {\n            const parsed = JSON.parse(authData);\n            // Check if token is expired (tokens typically last 6 hours)\n            if (parsed.expires_at && Date.now() > parsed.expires_at * 1000) {\n                localStorage.removeItem('stravaAuth');\n                return null;\n            }\n            return parsed;\n        }\n    } catch (error) {\n        console.error('Error reading Strava auth from storage:', error);\n    }\n    return null;\n}\n\nasync function initiateStravaAuth() {\n    const clientId = getStravaClientId();\n\n    if (!clientId) {\n        // Show configuration dialog\n        const configuredClientId = await showStravaConfigDialog();\n        if (!configuredClientId) {\n            return; // User cancelled\n        }\n    }\n\n    // Get the client ID again (might have been just configured)\n    const finalClientId = getStravaClientId();\n\n    // Strava OAuth configuration using implicit flow (no client secret needed)\n    const redirectUri = encodeURIComponent(window.location.origin + window.location.pathname);\n    const scope = 'activity:write';\n\n    const authUrl = `https://www.strava.com/oauth/authorize?client_id=${finalClientId}&response_type=token&redirect_uri=${redirectUri}&approval_prompt=force&scope=${scope}`;\n\n    // Store current state to return to after auth\n    localStorage.setItem('stravaAuthPending', 'true');\n\n    // Open Strava auth in new window\n    window.location.href = authUrl;\n}\n\nasync function uploadToStrava(tcxContent, accessToken) {\n    try {\n        // Create a form data object for the file upload\n        const formData = new FormData();\n        const blob = new Blob([tcxContent], { type: 'application/xml' });\n        const now = new Date();\n        const filename = `power_data_${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')}.tcx`;\n\n        formData.append('file', blob, filename);\n        formData.append('data_type', 'tcx');\n        formData.append('name', `Power Meter Session - ${now.toLocaleDateString()}`);\n        formData.append('description', 'Cycling session data from Web Bluetooth Power Meter');\n\n        const response = await fetch('https://www.strava.com/api/v3/uploads', {\n            method: 'POST',\n            headers: {\n                'Authorization': `Bearer ${accessToken}`\n            },\n            body: formData\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Failed to upload to Strava');\n        }\n\n        const result = await response.json();\n        return result;\n    } catch (error) {\n        console.error('Error uploading to Strava:', error);\n        throw error;\n    }\n}\n\n// Update Strava button text based on connection status\nfunction updateStravaButtonStatus() {\n    const syncToStravaButton = document.getElementById('syncToStravaButton');\n    if (!syncToStravaButton) return;\n\n    const stravaAuth = getStravaAuthFromStorage();\n    if (stravaAuth && stravaAuth.access_token) {\n        syncToStravaButton.textContent = '🚴 Sync to Strava';\n        syncToStravaButton.title = 'Connected to Strava - Click to sync your session';\n    } else {\n        syncToStravaButton.textContent = '🚴 Connect to Strava';\n        syncToStravaButton.title = 'Click to connect to Strava first';\n    }\n}\n\n// Check for Strava OAuth callback (implicit flow)\nfunction checkStravaCallback() {\n    // For implicit flow, token is in URL hash, not query params\n    const hashParams = new URLSearchParams(window.location.hash.substring(1));\n    const accessToken = hashParams.get('access_token');\n    const expiresIn = hashParams.get('expires_in');\n    const scope = hashParams.get('scope');\n\n    if (accessToken && localStorage.getItem('stravaAuthPending')) {\n        // Store token data\n        const tokenData = {\n            access_token: accessToken,\n            expires_at: Math.floor(Date.now() / 1000) + parseInt(expiresIn || '21600'), // Default 6 hours\n            scope: scope\n        };\n\n        localStorage.setItem('stravaAuth', JSON.stringify(tokenData));\n        localStorage.removeItem('stravaAuthPending');\n\n        alert('Successfully connected to Strava!');\n        // Update button status\n        updateStravaButtonStatus();\n        // Clean up URL hash\n        window.history.replaceState({}, document.title, window.location.pathname);\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', async function () {\n    // Try to load previous session data\n    const sessionData = loadSessionData();\n    if (sessionData) {\n        // Show restoration dialog\n        const shouldRestore = await showRestorationDialog(sessionData);\n        if (shouldRestore) {\n            restoreSessionData(sessionData);\n        } else {\n            sessionStartTime = Date.now();\n        }\n    } else {\n        sessionStartTime = Date.now();\n    }\n\n    // Check for Strava callback on page load\n    checkStravaCallback();\n\n    // Update button status on page load\n    updateStravaButtonStatus();\n\n    // Save session data when page is about to be closed/refreshed\n    window.addEventListener('beforeunload', function () {\n        if (powerData.length > 0) {\n            saveSessionData();\n        }\n    });\n\n    // Save session data periodically (every 30 seconds as backup)\n    setInterval(() => {\n        if (powerData.length > 0) {\n            saveSessionData();\n        }\n    }, 30000);\n});"],"names":["getStravaClientId","localStorage","getItem","setStravaClientId","clientId","setItem","showStravaConfigDialog","Promise","resolve","backdrop","document","createElement","className","modal","innerHTML","window","location","hostname","appendChild","body","clientIdInput","querySelector","saveButton","cancelButton","focus","addEventListener","value","trim","test","removeChild","alert","e","key","click","escapeHandler","removeEventListener","target","wakeLock","requestWakeLock","navigator","request","err","console","error","name","message","releaseWakeLock","release","createTrackpoint","dataPoint","translations","time","Date","toISOString","heartRate","hr","cadence","cad","power","pw","contents","Object","keys","map","undefined","filter","x","join","generateTcxString","powerData","Array","isArray","length","Error","validDataPoints","timestamp","isNaN","getTime","processedData","item","sort","a","b","isEmptyPower","shift","pop","validPowerReadings","d","parseFloat","avgPower","Math","round","reduce","maxPower","max","startTime","duration","endTime","powerAveragesText","powerAverages","averagesList","best","push","activityNotes","exerciseDescription","trackpoints","startTimeISO","text","replace","SESSION_STORAGE_KEY","SESSION_TIMEOUT","saveSessionData","sessionData","now","heartData","cadenceData","rawPowerMeasurements","powerReadings","lastPowerValue","lastHeartRateValue","lastCadenceValue","sessionStartTime","JSON","stringify","warn","loadSessionData","savedData","parse","removeItem","restoreSessionData","assign","updateDisplaysFromRestoredData","powerValueElement","textContent","hrValueElement","cadenceValueElement","updatePowerAveragesDisplay","showSessionRestoredNotification","notification","style","cssText","head","setTimeout","animation","parentNode","clearSessionData","connectButton","getElementById","statusText","deviceNameElement","exportJsonButton","exportCsvButton","exportTcxButton","exportRawJsonButton","exportRawCsvButton","syncToStravaButton","clearSessionButton","avg10sCurrentElement","avg10sBestElement","avg30sCurrentElement","avg30sBestElement","avg1mCurrentElement","avg1mBestElement","avg2mCurrentElement","avg2mBestElement","avg4mCurrentElement","avg4mBestElement","avg8mCurrentElement","avg8mBestElement","toggleConnectSection","toggleExportSection","connectSection","exportSection","powerAveragesSection","connectToggleText","exportToggleText","hamburgerBtn","menuDropdown","powerAveragesToggle","powerMetricToggle","heartRateMetricToggle","cadenceMetricToggle","connectSectionToggle","exportSectionToggle","stravaSettingsMenuItem","powerCard","heartRateCard","cadenceCard","powerStatusIndicator","hrStatusIndicator","cadenceStatusIndicator","classList","contains","remove","add","event","closest","powerAveragesVisible","display","manageCollapsedSectionsLayout","powerMetricVisible","heartRateMetricVisible","cadenceMetricVisible","connectSectionVisible","exportSectionVisible","updateDashboardLayout","dashboard","existingRow","sectionsInRow","querySelectorAll","forEach","section","insertBefore","nextSibling","connectButtons","sectionHeader","btn","exportButtons","updateStravaButtonStatus","current","addPowerReading","eightMinutesAgo","reading","calculatePowerAverages","periodKey","periodMs","entries","cutoffTime","relevantReadings","average","sum","total","resetPowerAverages","period","resetAllSessionData","dataLoggerInterval","powerMeterDevice","CYCLING_POWER_SERVICE_UUID","CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID","CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID","CYCLING_CADENCE_SERVICE_UUID","CSC_MEASUREMENT_CHARACTERISTIC_UUID","handlePowerMeasurement","rawMeasurement","flags","getUint16","rawBytes","from","Uint8Array","buffer","toString","padStart","dataLength","byteLength","getInt16","instantaneousPower","parsePowerMeasurement","onDisconnected","disabled","clearInterval","bluetooth","requestDevice","filters","services","server","gatt","connect","service","getPrimaryService","characteristic","getCharacteristic","featureCharacteristic","readValue","startNotifications","setInterval","blob","Blob","type","url","URL","createObjectURL","href","year","getFullYear","month","String","getMonth","day","getDate","dateString","download","revokeObjectURL","csvContent","row","measurement","tcxContent","stravaAuth","getStravaAuthFromStorage","access_token","initiateStravaAuth","uploadToStrava","confirm","hrDataLoggerInterval","hrConnectButton","hrStatusText","hrValue","hrDeviceName","hrBluetoothDevice","handleHeartRateChanged","parseHeartRate","getUint8","onDisconnectedHr","hrServer","hrService","hrCharacteristic","speedCadenceConnectButton","cadenceStatusText","cadenceDeviceName","speedCadenceBluetoothDevice","cadenceResetTimer","clearTimeout","lastCrankRevs","lastCrankTime","onDisconnectedSpeedCadence","handleSpeedCadenceMeasurement","offset","wheelRevsPresent","cumulativeCrankRevolutions","lastCrankEventTime","revs","showRestorationDialog","sessionAge","dataCount","authData","parsed","expires_at","finalClientId","redirectUri","encodeURIComponent","origin","pathname","authUrl","accessToken","formData","FormData","filename","append","toLocaleDateString","response","fetch","method","headers","ok","errorData","json","title","checkStravaCallback","hashParams","URLSearchParams","hash","substring","get","expiresIn","scope","tokenData","floor","parseInt","history","replaceState"],"version":3,"file":"power-saver.de843bf5.js.map"}