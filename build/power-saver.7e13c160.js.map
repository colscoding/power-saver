{"mappings":"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","sources":["<anon>","src/script.js"],"sourcesContent":["// Screen Wake Lock\nlet wakeLock = null;\nasync function requestWakeLock() {\n    if ('wakeLock' in navigator) try {\n        wakeLock = await navigator.wakeLock.request('screen');\n        console.log('Screen Wake Lock is active.');\n        wakeLock.addEventListener('release', ()=>{\n            console.log('Screen Wake Lock was released.');\n        });\n    } catch (err) {\n        console.error(`${err.name}, ${err.message}`);\n    }\n}\nasync function releaseWakeLock() {\n    if (wakeLock !== null) {\n        await wakeLock.release();\n        wakeLock = null;\n    }\n}\nconst connectButton = document.getElementById('connectButton');\nconst statusText = document.getElementById('status');\nconst powerValueElement = document.getElementById('power-value');\nconst deviceNameElement = document.getElementById('device-name');\nconst exportButtons = document.getElementById('export-buttons');\nconst exportJsonButton = document.getElementById('exportJsonButton');\nconst exportCsvButton = document.getElementById('exportCsvButton');\nconst exportRawJsonButton = document.getElementById('exportRawJsonButton');\nconst exportRawCsvButton = document.getElementById('exportRawCsvButton');\n// Power averages elements\nconst avg10sCurrentElement = document.getElementById('avg10s-current');\nconst avg10sBestElement = document.getElementById('avg10s-best');\nconst avg30sCurrentElement = document.getElementById('avg30s-current');\nconst avg30sBestElement = document.getElementById('avg30s-best');\nconst avg1mCurrentElement = document.getElementById('avg1m-current');\nconst avg1mBestElement = document.getElementById('avg1m-best');\nconst avg2mCurrentElement = document.getElementById('avg2m-current');\nconst avg2mBestElement = document.getElementById('avg2m-best');\nconst avg4mCurrentElement = document.getElementById('avg4m-current');\nconst avg4mBestElement = document.getElementById('avg4m-best');\n// Toggle elements\nconst toggleConnectSection = document.getElementById('toggleConnectSection');\nconst toggleExportSection = document.getElementById('toggleExportSection');\nconst connectSection = document.getElementById('connectSection');\nconst exportSection = document.getElementById('exportSection');\nconst powerAveragesSection = document.getElementById('powerAveragesSection');\nconst connectToggleText = document.getElementById('connectToggleText');\nconst exportToggleText = document.getElementById('exportToggleText');\n// Hamburger menu elements\nconst hamburgerBtn = document.getElementById('hamburgerButton');\nconst menuDropdown = document.getElementById('menuDropdown');\nconst powerAveragesToggle = document.getElementById('powerAveragesToggle');\nconst powerMetricToggle = document.getElementById('powerMetricToggle');\nconst heartRateMetricToggle = document.getElementById('heartRateMetricToggle');\nconst cadenceMetricToggle = document.getElementById('cadenceMetricToggle');\n// Metric card elements\nconst powerCard = document.querySelector('.power-card');\nconst heartRateCard = document.querySelector('.hr-card');\nconst cadenceCard = document.querySelector('.cadence-card');\n// Debug: Check if elements exist\nconsole.log('Hamburger elements:', {\n    hamburgerBtn: hamburgerBtn,\n    menuDropdown: menuDropdown,\n    powerAveragesToggle: powerAveragesToggle,\n    powerMetricToggle: powerMetricToggle,\n    heartRateMetricToggle: heartRateMetricToggle,\n    cadenceMetricToggle: cadenceMetricToggle\n});\nconsole.log('Metric card elements:', {\n    powerCard: powerCard,\n    heartRateCard: heartRateCard,\n    cadenceCard: cadenceCard\n});\nconst balanceValueElement = document.getElementById('balance-value');\nconst smoothnessValueElement = document.getElementById('smoothness-value');\nconst torqueValueElement = document.getElementById('torque-value');\n// Status indicator elements\nconst powerStatusIndicator = document.getElementById('power-status-indicator');\nconst hrStatusIndicator = document.getElementById('hr-status-indicator');\nconst cadenceStatusIndicator = document.getElementById('cadence-status-indicator');\nconst speedStatusIndicator = document.getElementById('speed-status-indicator');\nconst distanceStatusIndicator = document.getElementById('distance-status-indicator');\n// Initialize all status indicators to disconnected state\npowerStatusIndicator.className = 'status-indicator';\nhrStatusIndicator.className = 'status-indicator';\ncadenceStatusIndicator.className = 'status-indicator';\nspeedStatusIndicator.className = 'status-indicator';\ndistanceStatusIndicator.className = 'status-indicator';\n// Only add event listeners if elements exist\nif (hamburgerBtn && menuDropdown) {\n    // Hamburger menu functionality\n    hamburgerBtn.addEventListener('click', function() {\n        console.log('Hamburger button clicked');\n        const isActive = menuDropdown.classList.contains('active');\n        if (isActive) {\n            menuDropdown.classList.remove('active');\n            console.log('Menu dropdown hidden');\n        } else {\n            menuDropdown.classList.add('active');\n            console.log('Menu dropdown shown');\n        }\n    });\n    // Close menu when clicking outside\n    document.addEventListener('click', function(event) {\n        if (!event.target.closest('.hamburger-menu')) menuDropdown.classList.remove('active');\n    });\n} else console.error('Hamburger menu elements not found:', {\n    hamburgerBtn: !!hamburgerBtn,\n    menuDropdown: !!menuDropdown\n});\nif (powerAveragesToggle && powerAveragesSection) {\n    // Power averages toggle via hamburger menu\n    let powerAveragesVisible = false;\n    powerAveragesToggle.addEventListener('click', function() {\n        console.log('Power averages toggle clicked');\n        powerAveragesVisible = !powerAveragesVisible;\n        if (powerAveragesVisible) {\n            powerAveragesSection.style.display = 'block';\n            powerAveragesToggle.classList.add('active');\n            console.log('Power averages shown');\n        } else {\n            powerAveragesSection.style.display = 'none';\n            powerAveragesToggle.classList.remove('active');\n            console.log('Power averages hidden');\n        }\n        manageCollapsedSectionsLayout();\n    });\n} else console.error('Power averages toggle elements not found:', {\n    powerAveragesToggle: !!powerAveragesToggle,\n    powerAveragesSection: !!powerAveragesSection\n});\n// Power metric toggle via hamburger menu\nif (powerMetricToggle && powerCard) {\n    let powerMetricVisible = true; // Start visible by default\n    powerMetricToggle.classList.add('active'); // Set initial active state\n    powerMetricToggle.addEventListener('click', function() {\n        console.log('Power metric toggle clicked');\n        powerMetricVisible = !powerMetricVisible;\n        if (powerMetricVisible) {\n            powerCard.style.display = 'block';\n            powerMetricToggle.classList.add('active');\n            console.log('Power metric shown');\n        } else {\n            powerCard.style.display = 'none';\n            powerMetricToggle.classList.remove('active');\n            console.log('Power metric hidden');\n        }\n    });\n} else console.error('Power metric toggle elements not found:', {\n    powerMetricToggle: !!powerMetricToggle,\n    powerCard: !!powerCard\n});\n// Heart rate metric toggle via hamburger menu\nif (heartRateMetricToggle && heartRateCard) {\n    let heartRateMetricVisible = true; // Start visible by default\n    heartRateMetricToggle.classList.add('active'); // Set initial active state\n    heartRateMetricToggle.addEventListener('click', function() {\n        console.log('Heart rate metric toggle clicked');\n        heartRateMetricVisible = !heartRateMetricVisible;\n        if (heartRateMetricVisible) {\n            heartRateCard.style.display = 'block';\n            heartRateMetricToggle.classList.add('active');\n            console.log('Heart rate metric shown');\n        } else {\n            heartRateCard.style.display = 'none';\n            heartRateMetricToggle.classList.remove('active');\n            console.log('Heart rate metric hidden');\n        }\n    });\n} else console.error('Heart rate metric toggle elements not found:', {\n    heartRateMetricToggle: !!heartRateMetricToggle,\n    heartRateCard: !!heartRateCard\n});\n// Cadence metric toggle via hamburger menu\nif (cadenceMetricToggle && cadenceCard) {\n    let cadenceMetricVisible = true; // Start visible by default\n    cadenceMetricToggle.classList.add('active'); // Set initial active state\n    cadenceMetricToggle.addEventListener('click', function() {\n        console.log('Cadence metric toggle clicked');\n        cadenceMetricVisible = !cadenceMetricVisible;\n        if (cadenceMetricVisible) {\n            cadenceCard.style.display = 'block';\n            cadenceMetricToggle.classList.add('active');\n            console.log('Cadence metric shown');\n        } else {\n            cadenceCard.style.display = 'none';\n            cadenceMetricToggle.classList.remove('active');\n            console.log('Cadence metric hidden');\n        }\n    });\n} else console.error('Cadence metric toggle elements not found:', {\n    cadenceMetricToggle: !!cadenceMetricToggle,\n    cadenceCard: !!cadenceCard\n});\n// Toggle functionality for connect section\ntoggleConnectSection.addEventListener('click', ()=>{\n    const connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\n    const sectionHeader = connectSection.querySelector('.section-header');\n    const isHidden = connectButtons[0].style.display === 'none';\n    if (isHidden) {\n        connectButtons.forEach((btn)=>btn.style.display = 'block');\n        connectToggleText.textContent = 'Hide Connect Devices';\n        toggleConnectSection.classList.remove('collapsed');\n        connectSection.classList.remove('collapsed');\n        sectionHeader.classList.remove('collapsed');\n    } else {\n        connectButtons.forEach((btn)=>btn.style.display = 'none');\n        connectToggleText.textContent = 'Show Connect Devices';\n        toggleConnectSection.classList.add('collapsed');\n        connectSection.classList.add('collapsed');\n        sectionHeader.classList.add('collapsed');\n    }\n// Don't call updateDashboardLayout for bottom controls\n});\n// Toggle functionality for export section\ntoggleExportSection.addEventListener('click', ()=>{\n    const exportButtons = document.getElementById('export-buttons');\n    const sectionHeader = exportSection.querySelector('.section-header');\n    const isHidden = exportButtons.style.display === 'none';\n    if (isHidden) {\n        exportSection.style.display = 'block';\n        exportButtons.style.display = 'flex';\n        exportToggleText.textContent = 'Hide Export Data';\n        toggleExportSection.classList.remove('collapsed');\n        exportSection.classList.remove('collapsed');\n        sectionHeader.classList.remove('collapsed');\n    } else {\n        exportButtons.style.display = 'none';\n        exportToggleText.textContent = 'Show Export Data';\n        toggleExportSection.classList.add('collapsed');\n        exportSection.classList.add('collapsed');\n        sectionHeader.classList.add('collapsed');\n    }\n// Don't call updateDashboardLayout for bottom controls\n});\n// Function to update dashboard layout based on visible sections\nfunction updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const powerAveragesHidden = powerAveragesSection && powerAveragesSection.style.display === 'none';\n    if (powerAveragesHidden) dashboard.classList.add('maximized');\n    else dashboard.classList.remove('maximized');\n    // Manage horizontal layout for collapsed sections (excluding bottom controls)\n    manageCollapsedSectionsLayout();\n}\n// Function to manage horizontal layout of collapsed sections\nfunction manageCollapsedSectionsLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    // Only manage power averages section for collapsed layout - \n    // connect and export sections are now bottom controls and stay at bottom\n    const collapsedSections = [\n        powerAveragesSection.classList.contains('collapsed') ? powerAveragesSection : null\n    ].filter((section)=>section !== null);\n    // Remove any existing collapsed sections row\n    const existingRow = document.querySelector('.collapsed-sections-row');\n    if (existingRow) {\n        // Move sections back to their original positions\n        const sectionsInRow = existingRow.querySelectorAll('.power-averages-section');\n        sectionsInRow.forEach((section)=>{\n            // Insert sections back after the dashboard\n            dashboard.parentNode.insertBefore(section, dashboard.nextSibling);\n        });\n        existingRow.remove();\n    }\n    // Power averages section doesn't need horizontal grouping since it's the only\n    // section that can be managed this way now\n    dashboard.classList.remove('has-collapsed-sections');\n}\n// Initialize sections - bottom controls are always visible\n// Power averages section is controlled by hamburger menu\nconst connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\nconnectButtons.forEach((btn)=>btn.style.display = 'block');\nconst exportButtonsContainer = document.getElementById('export-buttons');\n// Initialize export section as collapsed\nexportSection.style.display = 'block';\nexportButtonsContainer.style.display = 'none';\ntoggleExportSection.classList.add('collapsed');\nexportSection.classList.add('collapsed');\nexportSection.querySelector('.section-header').classList.add('collapsed');\n// Initialize power averages section as hidden (controlled by hamburger menu)\npowerAveragesSection.style.display = 'none';\nupdateDashboardLayout();\nlet powerData = [];\nlet rawPowerMeasurements = [];\nlet lastPowerValue = 0;\n// Power averaging data structures\nlet powerReadings = []; // Array to store timestamped power readings\nlet powerAverages = {\n    '10s': {\n        current: 0,\n        best: 0\n    },\n    '30s': {\n        current: 0,\n        best: 0\n    },\n    '1m': {\n        current: 0,\n        best: 0\n    },\n    '2m': {\n        current: 0,\n        best: 0\n    },\n    '4m': {\n        current: 0,\n        best: 0\n    }\n};\n// Power averaging functions\nfunction addPowerReading(power) {\n    const now = Date.now();\n    powerReadings.push({\n        timestamp: now,\n        power: power\n    });\n    // Keep only the last 4 minutes of readings (plus some buffer)\n    const fourMinutesAgo = now - 300000; // 5 minutes to be safe\n    powerReadings = powerReadings.filter((reading)=>reading.timestamp > fourMinutesAgo);\n    // Calculate current averages\n    calculatePowerAverages();\n    updatePowerAveragesDisplay();\n}\nfunction calculatePowerAverages() {\n    const now = Date.now();\n    const periods = {\n        '10s': 10000,\n        '30s': 30000,\n        '1m': 60000,\n        '2m': 120000,\n        '4m': 240000\n    };\n    for (const [periodKey, periodMs] of Object.entries(periods)){\n        const cutoffTime = now - periodMs;\n        const relevantReadings = powerReadings.filter((reading)=>reading.timestamp >= cutoffTime);\n        if (relevantReadings.length > 0) {\n            const sum = relevantReadings.reduce((total, reading)=>total + reading.power, 0);\n            const average = Math.round(sum / relevantReadings.length);\n            powerAverages[periodKey].current = average;\n            // Update best if current is better\n            if (average > powerAverages[periodKey].best) powerAverages[periodKey].best = average;\n        } else powerAverages[periodKey].current = 0;\n    }\n}\nfunction updatePowerAveragesDisplay() {\n    avg10sCurrentElement.textContent = powerAverages['10s'].current || '--';\n    avg10sBestElement.textContent = powerAverages['10s'].best || '--';\n    avg30sCurrentElement.textContent = powerAverages['30s'].current || '--';\n    avg30sBestElement.textContent = powerAverages['30s'].best || '--';\n    avg1mCurrentElement.textContent = powerAverages['1m'].current || '--';\n    avg1mBestElement.textContent = powerAverages['1m'].best || '--';\n    avg2mCurrentElement.textContent = powerAverages['2m'].current || '--';\n    avg2mBestElement.textContent = powerAverages['2m'].best || '--';\n    avg4mCurrentElement.textContent = powerAverages['4m'].current || '--';\n    avg4mBestElement.textContent = powerAverages['4m'].best || '--';\n}\nfunction resetPowerAverages() {\n    powerReadings = [];\n    for (const period of Object.keys(powerAverages)){\n        powerAverages[period].current = 0;\n        powerAverages[period].best = 0;\n    }\n    updatePowerAveragesDisplay();\n}\nlet lastHeartRateValue = 0;\nlet lastCadenceValue = 0;\nlet lastSpeedValue = 0;\nlet lastBalanceValue = 0;\nlet lastSmoothnessValue = 0;\nlet lastTorqueValue = 0;\nlet totalDistance = 0;\nlet dataLoggerInterval = null;\nlet powerMeterDevice = null;\nconst CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID = 'cycling_power_feature';\nconst CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\nconnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        statusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    // Reset data from previous session\n    powerData = [];\n    rawPowerMeasurements = [];\n    lastPowerValue = 0;\n    resetPowerAverages();\n    if (dataLoggerInterval) clearInterval(dataLoggerInterval);\n    try {\n        statusText.textContent = 'Scanning for power meters...';\n        powerStatusIndicator.className = 'status-indicator connecting';\n        // Scan specifically for devices advertising the Cycling Power service\n        powerMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        CYCLING_POWER_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        statusText.textContent = 'Connecting to device...';\n        deviceNameElement.textContent = `Device: ${powerMeterDevice.name || 'Unknown Device'}`;\n        powerMeterDevice.addEventListener('gattserverdisconnected', onDisconnected);\n        const server = await powerMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);\n        // Check for and subscribe to advanced power features if available\n        try {\n            const featureCharacteristic = await service.getCharacteristic(CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID);\n            const features = await featureCharacteristic.readValue();\n            console.log(`Power Features: ${features.getUint32(0, true)}`);\n        // This value can be used to determine what the power meter supports,\n        // but for now we just parse what's in the measurement characteristic.\n        } catch (e) {\n            console.log('Cycling Power Feature characteristic not found.');\n        }\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handlePowerMeasurement);\n        statusText.textContent = 'Connected and receiving data!';\n        powerStatusIndicator.className = 'status-indicator connected';\n        connectButton.disabled = true;\n        // exportButtons.style.display = 'block';\n        dataLoggerInterval = setInterval(()=>{\n            powerData.push({\n                timestamp: Date.now(),\n                power: lastPowerValue,\n                heartRate: lastHeartRateValue,\n                cadence: lastCadenceValue,\n                speed: lastSpeedValue,\n                distance: totalDistance,\n                balance: lastBalanceValue,\n                smoothness: lastSmoothnessValue,\n                torque: lastTorqueValue\n            });\n        }, 100);\n    } catch (error) {\n        statusText.textContent = `Error: ${error.message}`;\n        powerStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n        if (powerMeterDevice) powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n    }\n});\nexportJsonButton.addEventListener('click', ()=>{\n    const jsonString = JSON.stringify(powerData, null, 2);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\nexportCsvButton.addEventListener('click', ()=>{\n    let csvContent = 'timestamp,power,heartRate,cadence,speed,distance,balance,smoothness,torque\\n';\n    powerData.forEach((row)=>{\n        csvContent += `${row.timestamp},${row.power},${row.heartRate},${row.cadence},${row.speed},${row.distance},${row.balance || ''},${row.smoothness || ''},${row.torque || ''}\\n`;\n    });\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n// Export raw power measurements as JSON\nexportRawJsonButton.addEventListener('click', ()=>{\n    const jsonString = JSON.stringify(rawPowerMeasurements, null, 2);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n// Export raw power measurements as CSV\nexportRawCsvButton.addEventListener('click', ()=>{\n    let csvContent = 'timestamp,flags,dataLength,instantaneousPower,pedalPowerBalance,accumulatedTorque,wheelRevolutions,wheelEventTime,crankRevolutions,crankEventTime,maxForceMagnitude,minForceMagnitude,maxTorqueMagnitude,topDeadSpotAngle,bottomDeadSpotAngle,accumulatedEnergy,torqueEffectiveness,pedalSmoothness,rawBytes\\n';\n    rawPowerMeasurements.forEach((measurement)=>{\n        const wheelRevs = measurement.wheelRevolutionData ? measurement.wheelRevolutionData.cumulativeWheelRevolutions : '';\n        const wheelTime = measurement.wheelRevolutionData ? measurement.wheelRevolutionData.lastWheelEventTime : '';\n        const crankRevs = measurement.crankRevolutionData ? measurement.crankRevolutionData.cumulativeCrankRevolutions : '';\n        const crankTime = measurement.crankRevolutionData ? measurement.crankRevolutionData.lastCrankEventTime : '';\n        const maxForce = measurement.extremeForceAngles ? measurement.extremeForceAngles.maximumForceMagnitude : '';\n        const minForce = measurement.extremeForceAngles ? measurement.extremeForceAngles.minimumForceMagnitude : '';\n        const maxTorque = measurement.extremeForceAngles ? measurement.extremeForceAngles.maximumTorqueMagnitude : '';\n        const topAngle = measurement.topBottomDeadSpotAngles ? measurement.topBottomDeadSpotAngles.topDeadSpotAngle : '';\n        const bottomAngle = measurement.topBottomDeadSpotAngles ? measurement.topBottomDeadSpotAngles.bottomDeadSpotAngle : '';\n        csvContent += `${measurement.timestamp},${measurement.flags},${measurement.dataLength},${measurement.instantaneousPower},${measurement.pedalPowerBalance || ''},${measurement.accumulatedTorque || ''},${wheelRevs},${wheelTime},${crankRevs},${crankTime},${maxForce},${minForce},${maxTorque},${topAngle},${bottomAngle},${measurement.accumulatedEnergy || ''},${measurement.torqueEffectiveness || ''},${measurement.pedalSmoothness || ''},\"${measurement.rawBytes}\"\\n`;\n    });\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\nfunction handlePowerMeasurement(event) {\n    const value = event.target.value;\n    const timestamp = Date.now();\n    // Store raw measurement data for detailed analysis\n    const rawMeasurement = {\n        timestamp: timestamp,\n        flags: value.getUint16(0, true),\n        rawBytes: Array.from(new Uint8Array(value.buffer)).map((b)=>b.toString(16).padStart(2, '0')).join(' '),\n        dataLength: value.byteLength\n    };\n    // The data is a DataView object with a flags field and the power value.\n    // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n    const flags = value.getUint16(0, true);\n    let offset = 2;\n    // Power is always present\n    const power = value.getInt16(offset, true);\n    rawMeasurement.instantaneousPower = power;\n    powerValueElement.textContent = power;\n    lastPowerValue = power;\n    // Add power reading to averaging calculations\n    addPowerReading(power);\n    offset += 2;\n    // Reset optional values\n    balanceValueElement.textContent = '--';\n    lastBalanceValue = 0;\n    smoothnessValueElement.textContent = '--';\n    lastSmoothnessValue = 0;\n    torqueValueElement.textContent = '--';\n    lastTorqueValue = 0;\n    // Initialize all optional fields\n    rawMeasurement.pedalPowerBalance = null;\n    rawMeasurement.accumulatedTorque = null;\n    rawMeasurement.wheelRevolutionData = null;\n    rawMeasurement.crankRevolutionData = null;\n    rawMeasurement.extremeForceAngles = null;\n    rawMeasurement.topBottomDeadSpotAngles = null;\n    rawMeasurement.accumulatedEnergy = null;\n    rawMeasurement.torqueEffectiveness = null;\n    rawMeasurement.pedalSmoothness = null;\n    // Check for Pedal Power Balance (Flag bit 0)\n    if (flags & 0x0001) {\n        const balance = value.getUint8(offset);\n        rawMeasurement.pedalPowerBalance = balance;\n        // Balance is percentage of power from the right pedal\n        balanceValueElement.textContent = `${100 - balance}/${balance}`;\n        lastBalanceValue = balance;\n        offset += 1;\n    }\n    // Accumulated Torque (Flag bit 2)\n    if (flags & 0x0004) {\n        rawMeasurement.accumulatedTorque = value.getUint16(offset, true);\n        offset += 2;\n    }\n    // Wheel Revolution Data (Flag bits 4 & 5)\n    if (flags & 0x0010) {\n        rawMeasurement.wheelRevolutionData = {\n            cumulativeWheelRevolutions: value.getUint32(offset, true),\n            lastWheelEventTime: value.getUint16(offset + 4, true)\n        };\n        offset += 6;\n    }\n    // Crank Revolution Data (Flag bit 6)\n    if (flags & 0x0020) {\n        rawMeasurement.crankRevolutionData = {\n            cumulativeCrankRevolutions: value.getUint16(offset, true),\n            lastCrankEventTime: value.getUint16(offset + 2, true)\n        };\n        offset += 4;\n    }\n    // Extreme Force/Angle Magnitudes (Flag bits 7 & 8)\n    if (flags & 0x0080) {\n        rawMeasurement.extremeForceAngles = {\n            maximumForceMagnitude: value.getInt16(offset, true),\n            minimumForceMagnitude: value.getInt16(offset + 2, true),\n            maximumTorqueMagnitude: value.getInt16(offset + 4, true)\n        };\n        offset += 6;\n    }\n    // Top/Bottom Dead Spot Angles (Flag bits 9 & 10)\n    if (flags & 0x0200) {\n        rawMeasurement.topBottomDeadSpotAngles = {\n            topDeadSpotAngle: value.getUint16(offset, true),\n            bottomDeadSpotAngle: value.getUint16(offset + 2, true)\n        };\n        offset += 4;\n    }\n    // Accumulated Energy (Flag bit 11)\n    if (flags & 0x0800) {\n        rawMeasurement.accumulatedEnergy = value.getUint16(offset, true);\n        offset += 2;\n    }\n    // Check for Torque Effectiveness and Pedal Smoothness (Flag bit 12)\n    if (flags & 0x1000) {\n        const torqueEffectiveness = value.getUint8(offset) / 2; // In percent\n        const pedalSmoothness = value.getUint8(offset + 2) / 2; // In percent\n        rawMeasurement.torqueEffectiveness = torqueEffectiveness;\n        rawMeasurement.pedalSmoothness = pedalSmoothness;\n        torqueValueElement.textContent = torqueEffectiveness.toFixed(1);\n        smoothnessValueElement.textContent = pedalSmoothness.toFixed(1);\n        lastTorqueValue = torqueEffectiveness;\n        lastSmoothnessValue = pedalSmoothness;\n        offset += 4; // 2 bytes for TE, 2 bytes for PS\n    }\n    // Store the complete raw measurement\n    rawPowerMeasurements.push(rawMeasurement);\n}\n/**\n * Parses the Cycling Power Measurement characteristic data.\n * The data is a DataView object with a flags field and the power value.\n * The instantaneous power is a 16-bit signed integer starting at the 3rd byte (offset 2).\n * Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n */ function parsePowerMeasurement(value) {\n    // The first 2 bytes are flags. The next 2 bytes are the instantaneous power.\n    // The power value is a signed 16-bit integer (sint16)\n    const instantaneousPower = value.getInt16(2, /*littleEndian=*/ true);\n    return instantaneousPower;\n}\nfunction onDisconnected() {\n    statusText.textContent = 'Device disconnected.';\n    powerStatusIndicator.className = 'status-indicator';\n    deviceNameElement.textContent = '';\n    powerValueElement.textContent = '--';\n    balanceValueElement.textContent = '--';\n    smoothnessValueElement.textContent = '--';\n    torqueValueElement.textContent = '--';\n    resetPowerAverages();\n    connectButton.disabled = false;\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n        dataLoggerInterval = null;\n    }\n    if (powerMeterDevice) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n        powerMeterDevice = null;\n    }\n    lastPowerValue = 0;\n    lastBalanceValue = 0;\n    lastSmoothnessValue = 0;\n    lastTorqueValue = 0;\n}\nconst heartData = [];\nlet hrDataLoggerInterval = null;\nconst hrConnectButton = document.getElementById('hrConnectButton');\nconst hrStatusText = document.getElementById('hrStatus');\nconst hrValue = document.getElementById('hr-value');\nconst hrDeviceName = document.getElementById('hrDeviceName');\nlet hrBluetoothDevice = null;\nhrConnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        hrStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    try {\n        hrStatusText.textContent = 'Scanning for devices...';\n        hrStatusIndicator.className = 'status-indicator connecting';\n        // Filter for devices that advertise the 'heart_rate' service\n        hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        'heart_rate'\n                    ]\n                }\n            ]\n        });\n        hrStatusText.textContent = 'Connecting to device...';\n        hrDeviceName.textContent = `Device: ${hrBluetoothDevice.name}`;\n        // Add a listener for when the device gets disconnected\n        hrBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedHr);\n        const hrServer = await hrBluetoothDevice.gatt.connect();\n        const hrService = await hrServer.getPrimaryService('heart_rate');\n        const hrCharacteristic = await hrService.getCharacteristic('heart_rate_measurement');\n        // Start notifications to receive heart rate data\n        await hrCharacteristic.startNotifications();\n        hrCharacteristic.addEventListener('characteristicvaluechanged', handleHeartRateChanged);\n        hrStatusText.textContent = 'Connected!';\n        hrStatusIndicator.className = 'status-indicator connected';\n        hrConnectButton.disabled = true;\n    } catch (error) {\n        hrStatusText.textContent = `Error: ${error.message}`;\n        hrStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n    }\n});\nfunction handleHeartRateChanged(event) {\n    const value = event.target.value;\n    const heartRate = parseHeartRate(value);\n    hrValue.textContent = heartRate;\n    lastHeartRateValue = heartRate;\n}\n/**\n * The heart rate measurement is a DataView object.\n * The first byte is a flag, and the subsequent byte(s) are the heart rate value.\n * We need to check the first bit of the flag to see if the value is 8-bit or 16-bit.\n */ function parseHeartRate(value) {\n    const flags = value.getUint8(0);\n    // Check if the heart rate value format is UINT16 (bit 0 is 1) or UINT8 (bit 0 is 0)\n    const is16bit = flags & 0x1;\n    if (is16bit) // If 16-bit, read 2 bytes starting from the second byte\n    return value.getUint16(1, /*littleEndian=*/ true);\n    else // If 8-bit, read 1 byte starting from the second byte\n    return value.getUint8(1);\n}\nfunction onDisconnectedHr() {\n    hrStatusText.textContent = 'Device disconnected.';\n    hrStatusIndicator.className = 'status-indicator';\n    hrDeviceName.textContent = '';\n    hrValue.textContent = '--';\n    hrConnectButton.disabled = false;\n    hrBluetoothDevice = null;\n    lastHeartRateValue = 0;\n}\nconst speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\nconst cadenceValueElement = document.getElementById('cadence-value');\nconst speedValueElement = document.getElementById('speed-value');\nconst distanceValueElement = document.getElementById('distance-value');\nconst cadenceStatusText = document.getElementById('cadenceStatus');\nconst cadenceDeviceName = document.getElementById('cadenceDeviceName');\nlet speedCadenceBluetoothDevice = null;\nconst WHEEL_CIRCUMFERENCE = 2.105; // meters, for a 700x25c tire\nspeedCadenceConnectButton.addEventListener('click', async ()=>{\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        cadenceStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n    try {\n        cadenceStatusText.textContent = 'Scanning for sensors...';\n        cadenceStatusIndicator.className = 'status-indicator connecting';\n        speedStatusIndicator.className = 'status-indicator connecting';\n        speedCadenceBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        CYCLING_CADENCE_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        cadenceStatusText.textContent = 'Connecting to device...';\n        cadenceDeviceName.textContent = `Device: ${speedCadenceBluetoothDevice.name}`;\n        speedCadenceBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedSpeedCadence);\n        const server = await speedCadenceBluetoothDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CSC_MEASUREMENT_CHARACTERISTIC_UUID);\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handleSpeedCadenceMeasurement);\n        cadenceStatusText.textContent = 'Connected!';\n        cadenceStatusIndicator.className = 'status-indicator connected';\n        speedStatusIndicator.className = 'status-indicator connected';\n        speedCadenceConnectButton.disabled = true;\n    } catch (error) {\n        cadenceStatusText.textContent = `Error: ${error.message}`;\n        cadenceStatusIndicator.className = 'status-indicator';\n        speedStatusIndicator.className = 'status-indicator';\n        console.error('Speed/Cadence connection failed:', error);\n    }\n});\nlet lastWheelRevs = 0;\nlet lastWheelTime = 0;\nlet lastCrankRevs = 0;\nlet lastCrankTime = 0;\nfunction handleSpeedCadenceMeasurement(event) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n    const wheelRevsPresent = flags & 0x01;\n    const crankRevsPresent = flags & 0x02;\n    if (wheelRevsPresent) {\n        const cumulativeWheelRevolutions = value.getUint32(offset, true);\n        const lastWheelEventTime = value.getUint16(offset + 4, true); // 1/1024 seconds\n        offset += 6;\n        if (lastWheelRevs > 0) {\n            const revs = cumulativeWheelRevolutions - lastWheelRevs;\n            const time = (lastWheelEventTime - lastWheelTime) / 1024; // in seconds\n            if (time > 0) {\n                const distance = revs * WHEEL_CIRCUMFERENCE; // meters\n                totalDistance += distance / 1000; // km\n                const speed = distance / time * 3.6; // km/h\n                speedValueElement.textContent = Math.round(speed);\n                lastSpeedValue = Math.round(speed);\n                distanceValueElement.textContent = totalDistance.toFixed(2);\n            }\n        }\n        lastWheelRevs = cumulativeWheelRevolutions;\n        lastWheelTime = lastWheelEventTime;\n    }\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n        if (lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - lastCrankRevs;\n            const time = (lastCrankEventTime - lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = revs / time * 60; // RPM\n                cadenceValueElement.textContent = Math.round(cadence);\n                lastCadenceValue = Math.round(cadence);\n            }\n        }\n        lastCrankRevs = cumulativeCrankRevolutions;\n        lastCrankTime = lastCrankEventTime;\n    }\n}\nfunction onDisconnectedSpeedCadence() {\n    cadenceStatusText.textContent = 'Device disconnected.';\n    cadenceStatusIndicator.className = 'status-indicator';\n    speedStatusIndicator.className = 'status-indicator';\n    cadenceDeviceName.textContent = '';\n    cadenceValueElement.textContent = '--';\n    speedValueElement.textContent = '--';\n    speedCadenceConnectButton.disabled = false;\n    speedCadenceBluetoothDevice = null;\n    lastCadenceValue = 0;\n    lastSpeedValue = 0;\n}\n\n//# sourceMappingURL=power-saver.7e13c160.js.map\n","// Screen Wake Lock\nlet wakeLock = null;\n\nasync function requestWakeLock() {\n    if ('wakeLock' in navigator) {\n        try {\n            wakeLock = await navigator.wakeLock.request('screen');\n            console.log('Screen Wake Lock is active.');\n            wakeLock.addEventListener('release', () => {\n                console.log('Screen Wake Lock was released.');\n            });\n        } catch (err) {\n            console.error(`${err.name}, ${err.message}`);\n        }\n    }\n}\n\nasync function releaseWakeLock() {\n    if (wakeLock !== null) {\n        await wakeLock.release();\n        wakeLock = null;\n    }\n}\n\nconst connectButton = document.getElementById('connectButton');\nconst statusText = document.getElementById('status');\nconst powerValueElement = document.getElementById('power-value');\nconst deviceNameElement = document.getElementById('device-name');\nconst exportButtons = document.getElementById('export-buttons');\nconst exportJsonButton = document.getElementById('exportJsonButton');\nconst exportCsvButton = document.getElementById('exportCsvButton');\nconst exportRawJsonButton = document.getElementById('exportRawJsonButton');\nconst exportRawCsvButton = document.getElementById('exportRawCsvButton');\n\n// Power averages elements\nconst avg10sCurrentElement = document.getElementById('avg10s-current');\nconst avg10sBestElement = document.getElementById('avg10s-best');\nconst avg30sCurrentElement = document.getElementById('avg30s-current');\nconst avg30sBestElement = document.getElementById('avg30s-best');\nconst avg1mCurrentElement = document.getElementById('avg1m-current');\nconst avg1mBestElement = document.getElementById('avg1m-best');\nconst avg2mCurrentElement = document.getElementById('avg2m-current');\nconst avg2mBestElement = document.getElementById('avg2m-best');\nconst avg4mCurrentElement = document.getElementById('avg4m-current');\nconst avg4mBestElement = document.getElementById('avg4m-best');\n\n// Toggle elements\nconst toggleConnectSection = document.getElementById('toggleConnectSection');\nconst toggleExportSection = document.getElementById('toggleExportSection');\nconst connectSection = document.getElementById('connectSection');\nconst exportSection = document.getElementById('exportSection');\nconst powerAveragesSection = document.getElementById('powerAveragesSection');\nconst connectToggleText = document.getElementById('connectToggleText');\nconst exportToggleText = document.getElementById('exportToggleText');\n\n// Hamburger menu elements\nconst hamburgerBtn = document.getElementById('hamburgerButton');\nconst menuDropdown = document.getElementById('menuDropdown');\nconst powerAveragesToggle = document.getElementById('powerAveragesToggle');\nconst powerMetricToggle = document.getElementById('powerMetricToggle');\nconst heartRateMetricToggle = document.getElementById('heartRateMetricToggle');\nconst cadenceMetricToggle = document.getElementById('cadenceMetricToggle');\n\n// Metric card elements\nconst powerCard = document.querySelector('.power-card');\nconst heartRateCard = document.querySelector('.hr-card');\nconst cadenceCard = document.querySelector('.cadence-card');\n\n// Debug: Check if elements exist\nconsole.log('Hamburger elements:', {\n    hamburgerBtn: hamburgerBtn,\n    menuDropdown: menuDropdown,\n    powerAveragesToggle: powerAveragesToggle,\n    powerMetricToggle: powerMetricToggle,\n    heartRateMetricToggle: heartRateMetricToggle,\n    cadenceMetricToggle: cadenceMetricToggle\n});\n\nconsole.log('Metric card elements:', {\n    powerCard: powerCard,\n    heartRateCard: heartRateCard,\n    cadenceCard: cadenceCard\n});\n\nconst balanceValueElement = document.getElementById('balance-value');\nconst smoothnessValueElement = document.getElementById('smoothness-value');\nconst torqueValueElement = document.getElementById('torque-value');\n\n// Status indicator elements\nconst powerStatusIndicator = document.getElementById('power-status-indicator');\nconst hrStatusIndicator = document.getElementById('hr-status-indicator');\nconst cadenceStatusIndicator = document.getElementById('cadence-status-indicator');\nconst speedStatusIndicator = document.getElementById('speed-status-indicator');\nconst distanceStatusIndicator = document.getElementById('distance-status-indicator');\n\n// Initialize all status indicators to disconnected state\npowerStatusIndicator.className = 'status-indicator';\nhrStatusIndicator.className = 'status-indicator';\ncadenceStatusIndicator.className = 'status-indicator';\nspeedStatusIndicator.className = 'status-indicator';\ndistanceStatusIndicator.className = 'status-indicator';\n\n// Only add event listeners if elements exist\nif (hamburgerBtn && menuDropdown) {\n    // Hamburger menu functionality\n    hamburgerBtn.addEventListener('click', function () {\n        console.log('Hamburger button clicked');\n        const isActive = menuDropdown.classList.contains('active');\n        if (isActive) {\n            menuDropdown.classList.remove('active');\n            console.log('Menu dropdown hidden');\n        } else {\n            menuDropdown.classList.add('active');\n            console.log('Menu dropdown shown');\n        }\n    });\n\n    // Close menu when clicking outside\n    document.addEventListener('click', function (event) {\n        if (!event.target.closest('.hamburger-menu')) {\n            menuDropdown.classList.remove('active');\n        }\n    });\n} else {\n    console.error('Hamburger menu elements not found:', {\n        hamburgerBtn: !!hamburgerBtn,\n        menuDropdown: !!menuDropdown\n    });\n}\n\nif (powerAveragesToggle && powerAveragesSection) {\n    // Power averages toggle via hamburger menu\n    let powerAveragesVisible = false;\n    powerAveragesToggle.addEventListener('click', function () {\n        console.log('Power averages toggle clicked');\n        powerAveragesVisible = !powerAveragesVisible;\n\n        if (powerAveragesVisible) {\n            powerAveragesSection.style.display = 'block';\n            powerAveragesToggle.classList.add('active');\n            console.log('Power averages shown');\n        } else {\n            powerAveragesSection.style.display = 'none';\n            powerAveragesToggle.classList.remove('active');\n            console.log('Power averages hidden');\n        }\n        manageCollapsedSectionsLayout();\n    });\n} else {\n    console.error('Power averages toggle elements not found:', {\n        powerAveragesToggle: !!powerAveragesToggle,\n        powerAveragesSection: !!powerAveragesSection\n    });\n}\n\n// Power metric toggle via hamburger menu\nif (powerMetricToggle && powerCard) {\n    let powerMetricVisible = true; // Start visible by default\n    powerMetricToggle.classList.add('active'); // Set initial active state\n\n    powerMetricToggle.addEventListener('click', function () {\n        console.log('Power metric toggle clicked');\n        powerMetricVisible = !powerMetricVisible;\n\n        if (powerMetricVisible) {\n            powerCard.style.display = 'block';\n            powerMetricToggle.classList.add('active');\n            console.log('Power metric shown');\n        } else {\n            powerCard.style.display = 'none';\n            powerMetricToggle.classList.remove('active');\n            console.log('Power metric hidden');\n        }\n    });\n} else {\n    console.error('Power metric toggle elements not found:', {\n        powerMetricToggle: !!powerMetricToggle,\n        powerCard: !!powerCard\n    });\n}\n\n// Heart rate metric toggle via hamburger menu\nif (heartRateMetricToggle && heartRateCard) {\n    let heartRateMetricVisible = true; // Start visible by default\n    heartRateMetricToggle.classList.add('active'); // Set initial active state\n\n    heartRateMetricToggle.addEventListener('click', function () {\n        console.log('Heart rate metric toggle clicked');\n        heartRateMetricVisible = !heartRateMetricVisible;\n\n        if (heartRateMetricVisible) {\n            heartRateCard.style.display = 'block';\n            heartRateMetricToggle.classList.add('active');\n            console.log('Heart rate metric shown');\n        } else {\n            heartRateCard.style.display = 'none';\n            heartRateMetricToggle.classList.remove('active');\n            console.log('Heart rate metric hidden');\n        }\n    });\n} else {\n    console.error('Heart rate metric toggle elements not found:', {\n        heartRateMetricToggle: !!heartRateMetricToggle,\n        heartRateCard: !!heartRateCard\n    });\n}\n\n// Cadence metric toggle via hamburger menu\nif (cadenceMetricToggle && cadenceCard) {\n    let cadenceMetricVisible = true; // Start visible by default\n    cadenceMetricToggle.classList.add('active'); // Set initial active state\n\n    cadenceMetricToggle.addEventListener('click', function () {\n        console.log('Cadence metric toggle clicked');\n        cadenceMetricVisible = !cadenceMetricVisible;\n\n        if (cadenceMetricVisible) {\n            cadenceCard.style.display = 'block';\n            cadenceMetricToggle.classList.add('active');\n            console.log('Cadence metric shown');\n        } else {\n            cadenceCard.style.display = 'none';\n            cadenceMetricToggle.classList.remove('active');\n            console.log('Cadence metric hidden');\n        }\n    });\n} else {\n    console.error('Cadence metric toggle elements not found:', {\n        cadenceMetricToggle: !!cadenceMetricToggle,\n        cadenceCard: !!cadenceCard\n    });\n}\n\n// Toggle functionality for connect section\ntoggleConnectSection.addEventListener('click', () => {\n    const connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\n    const sectionHeader = connectSection.querySelector('.section-header');\n    const isHidden = connectButtons[0].style.display === 'none';\n    if (isHidden) {\n        connectButtons.forEach(btn => btn.style.display = 'block');\n        connectToggleText.textContent = 'Hide Connect Devices';\n        toggleConnectSection.classList.remove('collapsed');\n        connectSection.classList.remove('collapsed');\n        sectionHeader.classList.remove('collapsed');\n    } else {\n        connectButtons.forEach(btn => btn.style.display = 'none');\n        connectToggleText.textContent = 'Show Connect Devices';\n        toggleConnectSection.classList.add('collapsed');\n        connectSection.classList.add('collapsed');\n        sectionHeader.classList.add('collapsed');\n    }\n    // Don't call updateDashboardLayout for bottom controls\n});\n\n// Toggle functionality for export section\ntoggleExportSection.addEventListener('click', () => {\n    const exportButtons = document.getElementById('export-buttons');\n    const sectionHeader = exportSection.querySelector('.section-header');\n    const isHidden = exportButtons.style.display === 'none';\n    if (isHidden) {\n        exportSection.style.display = 'block';\n        exportButtons.style.display = 'flex';\n        exportToggleText.textContent = 'Hide Export Data';\n        toggleExportSection.classList.remove('collapsed');\n        exportSection.classList.remove('collapsed');\n        sectionHeader.classList.remove('collapsed');\n    } else {\n        exportButtons.style.display = 'none';\n        exportToggleText.textContent = 'Show Export Data';\n        toggleExportSection.classList.add('collapsed');\n        exportSection.classList.add('collapsed');\n        sectionHeader.classList.add('collapsed');\n    }\n    // Don't call updateDashboardLayout for bottom controls\n});\n\n// Function to update dashboard layout based on visible sections\nfunction updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const powerAveragesHidden = powerAveragesSection && powerAveragesSection.style.display === 'none';\n\n    if (powerAveragesHidden) {\n        dashboard.classList.add('maximized');\n    } else {\n        dashboard.classList.remove('maximized');\n    }\n\n    // Manage horizontal layout for collapsed sections (excluding bottom controls)\n    manageCollapsedSectionsLayout();\n}\n\n// Function to manage horizontal layout of collapsed sections\nfunction manageCollapsedSectionsLayout() {\n    const dashboard = document.querySelector('.dashboard');\n\n    // Only manage power averages section for collapsed layout - \n    // connect and export sections are now bottom controls and stay at bottom\n    const collapsedSections = [\n        powerAveragesSection.classList.contains('collapsed') ? powerAveragesSection : null\n    ].filter(section => section !== null);\n\n    // Remove any existing collapsed sections row\n    const existingRow = document.querySelector('.collapsed-sections-row');\n    if (existingRow) {\n        // Move sections back to their original positions\n        const sectionsInRow = existingRow.querySelectorAll('.power-averages-section');\n        sectionsInRow.forEach(section => {\n            // Insert sections back after the dashboard\n            dashboard.parentNode.insertBefore(section, dashboard.nextSibling);\n        });\n        existingRow.remove();\n    }\n\n    // Power averages section doesn't need horizontal grouping since it's the only\n    // section that can be managed this way now\n    dashboard.classList.remove('has-collapsed-sections');\n}\n\n// Initialize sections - bottom controls are always visible\n// Power averages section is controlled by hamburger menu\nconst connectButtons = connectSection.querySelectorAll('button:not(.section-toggle-button)');\nconnectButtons.forEach(btn => btn.style.display = 'block');\n\nconst exportButtonsContainer = document.getElementById('export-buttons');\n\n// Initialize export section as collapsed\nexportSection.style.display = 'block';\nexportButtonsContainer.style.display = 'none';\ntoggleExportSection.classList.add('collapsed');\nexportSection.classList.add('collapsed');\nexportSection.querySelector('.section-header').classList.add('collapsed');\n\n// Initialize power averages section as hidden (controlled by hamburger menu)\npowerAveragesSection.style.display = 'none';\n\nupdateDashboardLayout();\n\n\nlet powerData = [];\nlet rawPowerMeasurements = [];\nlet lastPowerValue = 0;\n\n// Power averaging data structures\nlet powerReadings = [];  // Array to store timestamped power readings\nlet powerAverages = {\n    '10s': { current: 0, best: 0 },\n    '30s': { current: 0, best: 0 },\n    '1m': { current: 0, best: 0 },\n    '2m': { current: 0, best: 0 },\n    '4m': { current: 0, best: 0 }\n};\n\n// Power averaging functions\nfunction addPowerReading(power) {\n    const now = Date.now();\n    powerReadings.push({ timestamp: now, power: power });\n\n    // Keep only the last 4 minutes of readings (plus some buffer)\n    const fourMinutesAgo = now - (5 * 60 * 1000); // 5 minutes to be safe\n    powerReadings = powerReadings.filter(reading => reading.timestamp > fourMinutesAgo);\n\n    // Calculate current averages\n    calculatePowerAverages();\n    updatePowerAveragesDisplay();\n}\n\nfunction calculatePowerAverages() {\n    const now = Date.now();\n    const periods = {\n        '10s': 10 * 1000,\n        '30s': 30 * 1000,\n        '1m': 60 * 1000,\n        '2m': 120 * 1000,\n        '4m': 240 * 1000\n    };\n\n    for (const [periodKey, periodMs] of Object.entries(periods)) {\n        const cutoffTime = now - periodMs;\n        const relevantReadings = powerReadings.filter(reading => reading.timestamp >= cutoffTime);\n\n        if (relevantReadings.length > 0) {\n            const sum = relevantReadings.reduce((total, reading) => total + reading.power, 0);\n            const average = Math.round(sum / relevantReadings.length);\n            powerAverages[periodKey].current = average;\n\n            // Update best if current is better\n            if (average > powerAverages[periodKey].best) {\n                powerAverages[periodKey].best = average;\n            }\n        } else {\n            powerAverages[periodKey].current = 0;\n        }\n    }\n}\n\nfunction updatePowerAveragesDisplay() {\n    avg10sCurrentElement.textContent = powerAverages['10s'].current || '--';\n    avg10sBestElement.textContent = powerAverages['10s'].best || '--';\n    avg30sCurrentElement.textContent = powerAverages['30s'].current || '--';\n    avg30sBestElement.textContent = powerAverages['30s'].best || '--';\n    avg1mCurrentElement.textContent = powerAverages['1m'].current || '--';\n    avg1mBestElement.textContent = powerAverages['1m'].best || '--';\n    avg2mCurrentElement.textContent = powerAverages['2m'].current || '--';\n    avg2mBestElement.textContent = powerAverages['2m'].best || '--';\n    avg4mCurrentElement.textContent = powerAverages['4m'].current || '--';\n    avg4mBestElement.textContent = powerAverages['4m'].best || '--';\n}\n\nfunction resetPowerAverages() {\n    powerReadings = [];\n    for (const period of Object.keys(powerAverages)) {\n        powerAverages[period].current = 0;\n        powerAverages[period].best = 0;\n    }\n    updatePowerAveragesDisplay();\n}\n\nlet lastHeartRateValue = 0;\nlet lastCadenceValue = 0;\nlet lastSpeedValue = 0;\nlet lastBalanceValue = 0;\nlet lastSmoothnessValue = 0;\nlet lastTorqueValue = 0;\nlet totalDistance = 0;\nlet dataLoggerInterval = null;\nlet powerMeterDevice = null;\nconst CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID = 'cycling_power_feature';\nconst CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\n\nconnectButton.addEventListener('click', async () => {\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        statusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n\n    // Reset data from previous session\n    powerData = [];\n    rawPowerMeasurements = [];\n    lastPowerValue = 0;\n    resetPowerAverages();\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n    }\n\n    try {\n        statusText.textContent = 'Scanning for power meters...';\n        powerStatusIndicator.className = 'status-indicator connecting';\n\n        // Scan specifically for devices advertising the Cycling Power service\n        powerMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [{\n                services: [CYCLING_POWER_SERVICE_UUID]\n            }]\n        });\n\n        statusText.textContent = 'Connecting to device...';\n        deviceNameElement.textContent = `Device: ${powerMeterDevice.name || 'Unknown Device'}`;\n\n        powerMeterDevice.addEventListener('gattserverdisconnected', onDisconnected);\n\n        const server = await powerMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);\n\n        // Check for and subscribe to advanced power features if available\n        try {\n            const featureCharacteristic = await service.getCharacteristic(CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID);\n            const features = await featureCharacteristic.readValue();\n            console.log(`Power Features: ${features.getUint32(0, true)}`);\n            // This value can be used to determine what the power meter supports,\n            // but for now we just parse what's in the measurement characteristic.\n        } catch (e) {\n            console.log('Cycling Power Feature characteristic not found.');\n        }\n\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n\n        characteristic.addEventListener('characteristicvaluechanged', handlePowerMeasurement);\n\n        statusText.textContent = 'Connected and receiving data!';\n        powerStatusIndicator.className = 'status-indicator connected';\n        connectButton.disabled = true;\n        // exportButtons.style.display = 'block';\n\n        dataLoggerInterval = setInterval(() => {\n            powerData.push({\n                timestamp: Date.now(),\n                power: lastPowerValue,\n                heartRate: lastHeartRateValue,\n                cadence: lastCadenceValue,\n                speed: lastSpeedValue,\n                distance: totalDistance,\n                balance: lastBalanceValue,\n                smoothness: lastSmoothnessValue,\n                torque: lastTorqueValue\n            });\n        }, 100);\n\n    } catch (error) {\n        statusText.textContent = `Error: ${error.message}`;\n        powerStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n        if (powerMeterDevice) {\n            powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n        }\n    }\n});\n\nexportJsonButton.addEventListener('click', () => {\n    const jsonString = JSON.stringify(powerData, null, 2);\n    const blob = new Blob([jsonString], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\nexportCsvButton.addEventListener('click', () => {\n    let csvContent = 'timestamp,power,heartRate,cadence,speed,distance,balance,smoothness,torque\\n';\n    powerData.forEach(row => {\n        csvContent += `${row.timestamp},${row.power},${row.heartRate},${row.cadence},${row.speed},${row.distance},${row.balance || ''},${row.smoothness || ''},${row.torque || ''}\\n`;\n    });\n\n    const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `power_data_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\n// Export raw power measurements as JSON\nexportRawJsonButton.addEventListener('click', () => {\n    const jsonString = JSON.stringify(rawPowerMeasurements, null, 2);\n    const blob = new Blob([jsonString], {\n        type: 'application/json'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.json`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\n// Export raw power measurements as CSV\nexportRawCsvButton.addEventListener('click', () => {\n    let csvContent = 'timestamp,flags,dataLength,instantaneousPower,pedalPowerBalance,accumulatedTorque,wheelRevolutions,wheelEventTime,crankRevolutions,crankEventTime,maxForceMagnitude,minForceMagnitude,maxTorqueMagnitude,topDeadSpotAngle,bottomDeadSpotAngle,accumulatedEnergy,torqueEffectiveness,pedalSmoothness,rawBytes\\n';\n\n    rawPowerMeasurements.forEach(measurement => {\n        const wheelRevs = measurement.wheelRevolutionData ? measurement.wheelRevolutionData.cumulativeWheelRevolutions : '';\n        const wheelTime = measurement.wheelRevolutionData ? measurement.wheelRevolutionData.lastWheelEventTime : '';\n        const crankRevs = measurement.crankRevolutionData ? measurement.crankRevolutionData.cumulativeCrankRevolutions : '';\n        const crankTime = measurement.crankRevolutionData ? measurement.crankRevolutionData.lastCrankEventTime : '';\n        const maxForce = measurement.extremeForceAngles ? measurement.extremeForceAngles.maximumForceMagnitude : '';\n        const minForce = measurement.extremeForceAngles ? measurement.extremeForceAngles.minimumForceMagnitude : '';\n        const maxTorque = measurement.extremeForceAngles ? measurement.extremeForceAngles.maximumTorqueMagnitude : '';\n        const topAngle = measurement.topBottomDeadSpotAngles ? measurement.topBottomDeadSpotAngles.topDeadSpotAngle : '';\n        const bottomAngle = measurement.topBottomDeadSpotAngles ? measurement.topBottomDeadSpotAngles.bottomDeadSpotAngle : '';\n\n        csvContent += `${measurement.timestamp},${measurement.flags},${measurement.dataLength},${measurement.instantaneousPower},${measurement.pedalPowerBalance || ''},${measurement.accumulatedTorque || ''},${wheelRevs},${wheelTime},${crankRevs},${crankTime},${maxForce},${minForce},${maxTorque},${topAngle},${bottomAngle},${measurement.accumulatedEnergy || ''},${measurement.torqueEffectiveness || ''},${measurement.pedalSmoothness || ''},\"${measurement.rawBytes}\"\\n`;\n    });\n\n    const blob = new Blob([csvContent], {\n        type: 'text/csv;charset=utf-8;'\n    });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    const dateString = `${year}-${month}-${day}`;\n    a.download = `raw_power_measurements_${dateString}.csv`;\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n    URL.revokeObjectURL(url);\n});\n\n\nfunction handlePowerMeasurement(event) {\n    const value = event.target.value;\n    const timestamp = Date.now();\n\n    // Store raw measurement data for detailed analysis\n    const rawMeasurement = {\n        timestamp: timestamp,\n        flags: value.getUint16(0, true),\n        rawBytes: Array.from(new Uint8Array(value.buffer)).map(b => b.toString(16).padStart(2, '0')).join(' '),\n        dataLength: value.byteLength\n    };\n\n    // The data is a DataView object with a flags field and the power value.\n    // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n    const flags = value.getUint16(0, true);\n    let offset = 2;\n\n    // Power is always present\n    const power = value.getInt16(offset, true);\n    rawMeasurement.instantaneousPower = power;\n    powerValueElement.textContent = power;\n    lastPowerValue = power;\n\n    // Add power reading to averaging calculations\n    addPowerReading(power);\n\n    offset += 2;\n\n    // Reset optional values\n    balanceValueElement.textContent = '--';\n    lastBalanceValue = 0;\n    smoothnessValueElement.textContent = '--';\n    lastSmoothnessValue = 0;\n    torqueValueElement.textContent = '--';\n    lastTorqueValue = 0;\n\n    // Initialize all optional fields\n    rawMeasurement.pedalPowerBalance = null;\n    rawMeasurement.accumulatedTorque = null;\n    rawMeasurement.wheelRevolutionData = null;\n    rawMeasurement.crankRevolutionData = null;\n    rawMeasurement.extremeForceAngles = null;\n    rawMeasurement.topBottomDeadSpotAngles = null;\n    rawMeasurement.accumulatedEnergy = null;\n    rawMeasurement.torqueEffectiveness = null;\n    rawMeasurement.pedalSmoothness = null;\n\n    // Check for Pedal Power Balance (Flag bit 0)\n    if (flags & 0x0001) {\n        const balance = value.getUint8(offset);\n        rawMeasurement.pedalPowerBalance = balance;\n        // Balance is percentage of power from the right pedal\n        balanceValueElement.textContent = `${100 - balance}/${balance}`;\n        lastBalanceValue = balance;\n        offset += 1;\n    }\n\n    // Accumulated Torque (Flag bit 2)\n    if (flags & 0x0004) {\n        rawMeasurement.accumulatedTorque = value.getUint16(offset, true);\n        offset += 2;\n    }\n\n    // Wheel Revolution Data (Flag bits 4 & 5)\n    if (flags & 0x0010) {\n        rawMeasurement.wheelRevolutionData = {\n            cumulativeWheelRevolutions: value.getUint32(offset, true),\n            lastWheelEventTime: value.getUint16(offset + 4, true)\n        };\n        offset += 6;\n    }\n\n    // Crank Revolution Data (Flag bit 6)\n    if (flags & 0x0020) {\n        rawMeasurement.crankRevolutionData = {\n            cumulativeCrankRevolutions: value.getUint16(offset, true),\n            lastCrankEventTime: value.getUint16(offset + 2, true)\n        };\n        offset += 4;\n    }\n\n    // Extreme Force/Angle Magnitudes (Flag bits 7 & 8)\n    if (flags & 0x0080) {\n        rawMeasurement.extremeForceAngles = {\n            maximumForceMagnitude: value.getInt16(offset, true),\n            minimumForceMagnitude: value.getInt16(offset + 2, true),\n            maximumTorqueMagnitude: value.getInt16(offset + 4, true)\n        };\n        offset += 6;\n    }\n\n    // Top/Bottom Dead Spot Angles (Flag bits 9 & 10)\n    if (flags & 0x0200) {\n        rawMeasurement.topBottomDeadSpotAngles = {\n            topDeadSpotAngle: value.getUint16(offset, true),\n            bottomDeadSpotAngle: value.getUint16(offset + 2, true)\n        };\n        offset += 4;\n    }\n\n    // Accumulated Energy (Flag bit 11)\n    if (flags & 0x0800) {\n        rawMeasurement.accumulatedEnergy = value.getUint16(offset, true);\n        offset += 2;\n    }\n\n    // Check for Torque Effectiveness and Pedal Smoothness (Flag bit 12)\n    if (flags & 0x1000) {\n        const torqueEffectiveness = value.getUint8(offset) / 2; // In percent\n        const pedalSmoothness = value.getUint8(offset + 2) / 2; // In percent\n        rawMeasurement.torqueEffectiveness = torqueEffectiveness;\n        rawMeasurement.pedalSmoothness = pedalSmoothness;\n        torqueValueElement.textContent = torqueEffectiveness.toFixed(1);\n        smoothnessValueElement.textContent = pedalSmoothness.toFixed(1);\n        lastTorqueValue = torqueEffectiveness;\n        lastSmoothnessValue = pedalSmoothness;\n        offset += 4; // 2 bytes for TE, 2 bytes for PS\n    }\n\n    // Store the complete raw measurement\n    rawPowerMeasurements.push(rawMeasurement);\n}\n/**\n * Parses the Cycling Power Measurement characteristic data.\n * The data is a DataView object with a flags field and the power value.\n * The instantaneous power is a 16-bit signed integer starting at the 3rd byte (offset 2).\n * Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n */\nfunction parsePowerMeasurement(value) {\n    // The first 2 bytes are flags. The next 2 bytes are the instantaneous power.\n    // The power value is a signed 16-bit integer (sint16)\n    const instantaneousPower = value.getInt16(2, /*littleEndian=*/ true);\n    return instantaneousPower;\n}\n\nfunction onDisconnected() {\n    statusText.textContent = 'Device disconnected.';\n    powerStatusIndicator.className = 'status-indicator';\n    deviceNameElement.textContent = '';\n    powerValueElement.textContent = '--';\n    balanceValueElement.textContent = '--';\n    smoothnessValueElement.textContent = '--';\n    torqueValueElement.textContent = '--';\n    resetPowerAverages();\n    connectButton.disabled = false;\n    if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n        dataLoggerInterval = null;\n    }\n    if (powerMeterDevice) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', onDisconnected);\n        powerMeterDevice = null;\n    }\n    lastPowerValue = 0;\n    lastBalanceValue = 0;\n    lastSmoothnessValue = 0;\n    lastTorqueValue = 0;\n}\n\n\nconst heartData = [];\nlet hrDataLoggerInterval = null;\n\nconst hrConnectButton = document.getElementById('hrConnectButton');\nconst hrStatusText = document.getElementById('hrStatus');\nconst hrValue = document.getElementById('hr-value');\nconst hrDeviceName = document.getElementById('hrDeviceName');\n\nlet hrBluetoothDevice = null;\n\nhrConnectButton.addEventListener('click', async () => {\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        hrStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n\n    try {\n        hrStatusText.textContent = 'Scanning for devices...';\n        hrStatusIndicator.className = 'status-indicator connecting';\n\n        // Filter for devices that advertise the 'heart_rate' service\n        hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [{\n                services: ['heart_rate']\n            }]\n        });\n\n        hrStatusText.textContent = 'Connecting to device...';\n        hrDeviceName.textContent = `Device: ${hrBluetoothDevice.name}`;\n\n        // Add a listener for when the device gets disconnected\n        hrBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedHr);\n\n        const hrServer = await hrBluetoothDevice.gatt.connect();\n        const hrService = await hrServer.getPrimaryService('heart_rate');\n        const hrCharacteristic = await hrService.getCharacteristic('heart_rate_measurement');\n\n        // Start notifications to receive heart rate data\n        await hrCharacteristic.startNotifications();\n\n        hrCharacteristic.addEventListener('characteristicvaluechanged', handleHeartRateChanged);\n\n        hrStatusText.textContent = 'Connected!';\n        hrStatusIndicator.className = 'status-indicator connected';\n        hrConnectButton.disabled = true;\n\n    } catch (error) {\n        hrStatusText.textContent = `Error: ${error.message}`;\n        hrStatusIndicator.className = 'status-indicator';\n        console.error('Connection failed:', error);\n    }\n});\n\nfunction handleHeartRateChanged(event) {\n    const value = event.target.value;\n    const heartRate = parseHeartRate(value);\n    hrValue.textContent = heartRate;\n    lastHeartRateValue = heartRate;\n}\n\n/**\n * The heart rate measurement is a DataView object.\n * The first byte is a flag, and the subsequent byte(s) are the heart rate value.\n * We need to check the first bit of the flag to see if the value is 8-bit or 16-bit.\n */\nfunction parseHeartRate(value) {\n    const flags = value.getUint8(0);\n    // Check if the heart rate value format is UINT16 (bit 0 is 1) or UINT8 (bit 0 is 0)\n    const is16bit = (flags & 0x1);\n    if (is16bit) {\n        // If 16-bit, read 2 bytes starting from the second byte\n        return value.getUint16(1, /*littleEndian=*/ true);\n    } else {\n        // If 8-bit, read 1 byte starting from the second byte\n        return value.getUint8(1);\n    }\n}\n\nfunction onDisconnectedHr() {\n    hrStatusText.textContent = 'Device disconnected.';\n    hrStatusIndicator.className = 'status-indicator';\n    hrDeviceName.textContent = '';\n    hrValue.textContent = '--';\n    hrConnectButton.disabled = false;\n    hrBluetoothDevice = null;\n    lastHeartRateValue = 0;\n}\n\nconst speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\nconst cadenceValueElement = document.getElementById('cadence-value');\nconst speedValueElement = document.getElementById('speed-value');\nconst distanceValueElement = document.getElementById('distance-value');\nconst cadenceStatusText = document.getElementById('cadenceStatus');\nconst cadenceDeviceName = document.getElementById('cadenceDeviceName');\nlet speedCadenceBluetoothDevice = null;\nconst WHEEL_CIRCUMFERENCE = 2.105; // meters, for a 700x25c tire\n\nspeedCadenceConnectButton.addEventListener('click', async () => {\n    await requestWakeLock();\n    if (!navigator.bluetooth) {\n        cadenceStatusText.textContent = 'Web Bluetooth API is not available.';\n        return;\n    }\n\n    try {\n        cadenceStatusText.textContent = 'Scanning for sensors...';\n        cadenceStatusIndicator.className = 'status-indicator connecting';\n        speedStatusIndicator.className = 'status-indicator connecting';\n\n        speedCadenceBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [{\n                services: [CYCLING_CADENCE_SERVICE_UUID]\n            }]\n        });\n\n        cadenceStatusText.textContent = 'Connecting to device...';\n        cadenceDeviceName.textContent = `Device: ${speedCadenceBluetoothDevice.name}`;\n\n        speedCadenceBluetoothDevice.addEventListener('gattserverdisconnected', onDisconnectedSpeedCadence);\n\n        const server = await speedCadenceBluetoothDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CSC_MEASUREMENT_CHARACTERISTIC_UUID);\n\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', handleSpeedCadenceMeasurement);\n\n        cadenceStatusText.textContent = 'Connected!';\n        cadenceStatusIndicator.className = 'status-indicator connected';\n        speedStatusIndicator.className = 'status-indicator connected';\n        speedCadenceConnectButton.disabled = true;\n\n    } catch (error) {\n        cadenceStatusText.textContent = `Error: ${error.message}`;\n        cadenceStatusIndicator.className = 'status-indicator';\n        speedStatusIndicator.className = 'status-indicator';\n        console.error('Speed/Cadence connection failed:', error);\n    }\n});\n\nlet lastWheelRevs = 0;\nlet lastWheelTime = 0;\nlet lastCrankRevs = 0;\nlet lastCrankTime = 0;\n\nfunction handleSpeedCadenceMeasurement(event) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n\n    const wheelRevsPresent = (flags & 0x01);\n    const crankRevsPresent = (flags & 0x02);\n\n    if (wheelRevsPresent) {\n        const cumulativeWheelRevolutions = value.getUint32(offset, true);\n        const lastWheelEventTime = value.getUint16(offset + 4, true); // 1/1024 seconds\n        offset += 6;\n\n        if (lastWheelRevs > 0) {\n            const revs = cumulativeWheelRevolutions - lastWheelRevs;\n            const time = (lastWheelEventTime - lastWheelTime) / 1024; // in seconds\n            if (time > 0) {\n                const distance = revs * WHEEL_CIRCUMFERENCE; // meters\n                totalDistance += distance / 1000; // km\n                const speed = (distance / time) * 3.6; // km/h\n                speedValueElement.textContent = Math.round(speed);\n                lastSpeedValue = Math.round(speed);\n                distanceValueElement.textContent = totalDistance.toFixed(2);\n            }\n        }\n        lastWheelRevs = cumulativeWheelRevolutions;\n        lastWheelTime = lastWheelEventTime;\n    }\n\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n\n        if (lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - lastCrankRevs;\n            const time = (lastCrankEventTime - lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = (revs / time) * 60; // RPM\n                cadenceValueElement.textContent = Math.round(cadence);\n                lastCadenceValue = Math.round(cadence);\n            }\n        }\n        lastCrankRevs = cumulativeCrankRevolutions;\n        lastCrankTime = lastCrankEventTime;\n    }\n}\n\nfunction onDisconnectedSpeedCadence() {\n    cadenceStatusText.textContent = 'Device disconnected.';\n    cadenceStatusIndicator.className = 'status-indicator';\n    speedStatusIndicator.className = 'status-indicator';\n    cadenceDeviceName.textContent = '';\n    cadenceValueElement.textContent = '--';\n    speedValueElement.textContent = '--';\n    speedCadenceConnectButton.disabled = false;\n    speedCadenceBluetoothDevice = null;\n    lastCadenceValue = 0;\n    lastSpeedValue = 0;\n}"],"names":["wakeLock","requestWakeLock","navigator","request","console","log","addEventListener","err","error","name","message","releaseWakeLock","release","connectButton","document","getElementById","statusText","powerValueElement","deviceNameElement","exportButtons","exportJsonButton","exportCsvButton","exportRawJsonButton","exportRawCsvButton","avg10sCurrentElement","avg10sBestElement","avg30sCurrentElement","avg30sBestElement","avg1mCurrentElement","avg1mBestElement","avg2mCurrentElement","avg2mBestElement","avg4mCurrentElement","avg4mBestElement","toggleConnectSection","toggleExportSection","connectSection","exportSection","powerAveragesSection","connectToggleText","exportToggleText","hamburgerBtn","menuDropdown","powerAveragesToggle","powerMetricToggle","heartRateMetricToggle","cadenceMetricToggle","powerCard","querySelector","heartRateCard","cadenceCard","balanceValueElement","smoothnessValueElement","torqueValueElement","powerStatusIndicator","hrStatusIndicator","cadenceStatusIndicator","speedStatusIndicator","distanceStatusIndicator","className","classList","contains","remove","add","event","target","closest","powerAveragesVisible","style","display","manageCollapsedSectionsLayout","powerMetricVisible","heartRateMetricVisible","cadenceMetricVisible","updateDashboardLayout","dashboard","filter","section","existingRow","sectionsInRow","querySelectorAll","forEach","parentNode","insertBefore","nextSibling","connectButtons","sectionHeader","btn","textContent","exportButtonsContainer","powerData","rawPowerMeasurements","lastPowerValue","powerReadings","powerAverages","current","best","addPowerReading","power","now","Date","push","timestamp","fourMinutesAgo","reading","calculatePowerAverages","updatePowerAveragesDisplay","periodKey","periodMs","Object","entries","cutoffTime","relevantReadings","length","average","Math","round","sum","reduce","total","resetPowerAverages","period","keys","lastHeartRateValue","lastCadenceValue","lastSpeedValue","lastBalanceValue","lastSmoothnessValue","lastTorqueValue","totalDistance","dataLoggerInterval","powerMeterDevice","CYCLING_POWER_SERVICE_UUID","CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID","CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID","CYCLING_CADENCE_SERVICE_UUID","CSC_MEASUREMENT_CHARACTERISTIC_UUID","handlePowerMeasurement","value","rawMeasurement","flags","getUint16","rawBytes","Array","from","Uint8Array","buffer","map","b","toString","padStart","join","dataLength","byteLength","offset","getInt16","instantaneousPower","pedalPowerBalance","accumulatedTorque","wheelRevolutionData","crankRevolutionData","extremeForceAngles","topBottomDeadSpotAngles","accumulatedEnergy","torqueEffectiveness","pedalSmoothness","balance","getUint8","cumulativeWheelRevolutions","getUint32","lastWheelEventTime","cumulativeCrankRevolutions","lastCrankEventTime","maximumForceMagnitude","minimumForceMagnitude","maximumTorqueMagnitude","topDeadSpotAngle","bottomDeadSpotAngle","toFixed","parsePowerMeasurement","onDisconnected","disabled","clearInterval","removeEventListener","bluetooth","requestDevice","filters","services","server","gatt","connect","service","getPrimaryService","characteristic","getCharacteristic","featureCharacteristic","features","readValue","e","startNotifications","setInterval","heartRate","cadence","speed","distance","smoothness","torque","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","a","createElement","href","year","getFullYear","month","String","getMonth","day","getDate","dateString","download","body","appendChild","click","removeChild","revokeObjectURL","csvContent","row","measurement","wheelRevs","wheelTime","crankRevs","crankTime","maxForce","minForce","maxTorque","topAngle","bottomAngle","heartData","hrDataLoggerInterval","hrConnectButton","hrStatusText","hrValue","hrDeviceName","hrBluetoothDevice","handleHeartRateChanged","parseHeartRate","onDisconnectedHr","hrServer","hrService","hrCharacteristic","speedCadenceConnectButton","cadenceValueElement","speedValueElement","distanceValueElement","cadenceStatusText","cadenceDeviceName","speedCadenceBluetoothDevice","WHEEL_CIRCUMFERENCE","onDisconnectedSpeedCadence","handleSpeedCadenceMeasurement","lastWheelRevs","lastWheelTime","lastCrankRevs","lastCrankTime","revs","time"],"version":3,"file":"power-saver.7e13c160.js.map"}