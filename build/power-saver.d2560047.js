let wakeLock=null;async function requestWakeLock(){if("wakeLock"in navigator)try{(wakeLock=await navigator.wakeLock.request("screen")).addEventListener("release",()=>{})}catch(e){console.error(`${e.name}, ${e.message}`)}}async function releaseWakeLock(){null!==wakeLock&&(await wakeLock.release(),wakeLock=null)}function createTrackpoint(e){let t={time:e=>`<Time>${new Date(e).toISOString()}</Time>`,heartRate:e=>`
<HeartRateBpm>
  <Value>${e}</Value>
</HeartRateBpm>
            `.trim(),cadence:e=>`<Cadence>${e}</Cadence>`,power:e=>`
<Extensions>
  <ns2:TPX>
    <ns2:Watts>${e}</ns2:Watts>
  </ns2:TPX>
</Extensions>
            `.trim()},n=Object.keys(t).map(n=>void 0===e[n]?"":t[n](e[n])).filter(e=>e).join("\n");return`
<Trackpoint>
  ${n}
</Trackpoint>
`.trim()}function generateTcxString(e){if(!Array.isArray(e)||0===e.length)throw Error("Input power data array is empty or invalid");let t=e.filter(e=>e&&"object"==typeof e&&void 0!==e.timestamp&&!isNaN(new Date(e.timestamp).getTime()));if(0===t.length)throw Error("No valid data points found");let n=t.map(e=>({time:e.timestamp,...void 0!==e.power&&{power:e.power},...void 0!==e.heartRate&&{heartRate:e.heartRate},...void 0!==e.cadence&&{cadence:e.cadence}})).sort((e,t)=>e.time-t.time),a=e=>!e.power||e.power<=0;for(;n.length>0&&a(n[0]);)n.shift();for(;n.length>0&&a(n[n.length-1]);)n.pop();if(0===n.length)throw Error("No valid power data found after processing");let o=n.filter(e=>e.power&&e.power>0).map(e=>parseFloat(e.power)),r=o.length>0?Math.round(o.reduce((e,t)=>e+t,0)/o.length):0,l=o.length>0?Math.max(...o):0,s=n[0].time,c=Math.round((n[n.length-1].time-s)/1e3/60),i="";if(void 0!==powerAverages&&powerAverages){let e=[];powerAverages["10s"]&&powerAverages["10s"].best>0&&e.push(`10s: ${powerAverages["10s"].best}W`),powerAverages["30s"]&&powerAverages["30s"].best>0&&e.push(`30s: ${powerAverages["30s"].best}W`),powerAverages["1m"]&&powerAverages["1m"].best>0&&e.push(`1min: ${powerAverages["1m"].best}W`),powerAverages["2m"]&&powerAverages["2m"].best>0&&e.push(`2min: ${powerAverages["2m"].best}W`),powerAverages["4m"]&&powerAverages["4m"].best>0&&e.push(`4min: ${powerAverages["4m"].best}W`),powerAverages["8m"]&&powerAverages["8m"].best>0&&e.push(`8min: ${powerAverages["8m"].best}W`),e.length>0&&(i=`

Best Power Averages: ${e.join(", ")}`)}let d=`Indoor cycling session recorded with Power Saver app.
Session Stats: Duration: ${c} min, Avg Power: ${r}W, Max Power: ${l}W`+i,m=n.map(createTrackpoint).join("\n"),g=new Date(s).toISOString();return`<?xml version="1.0" encoding="UTF-8"?>
<TrainingCenterDatabase
  xmlns="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd"
  xmlns:ns2="http://www.garmin.com/xmlschemas/ActivityExtension/v2">
  <Activities>
    <Activity Sport="Biking">
      <Id>${g}</Id>
      <Name>E Bike Indoor Cycling Trainer</Name>
      <Notes>${d.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&apos;")}</Notes>
      <Lap StartTime="${g}">
        <Track>
        ${m}
        </Track>
      </Lap>
    </Activity>
  </Activities>
</TrainingCenterDatabase>`}async function generateSummaryImage(e){let t=e.filter(e=>void 0!==e.heartRate),n=e.filter(e=>void 0!==e.cadence),a=e.filter(e=>void 0!==e.power),o=document.createElement("canvas"),r=o.getContext("2d"),l=200;Object.values(powerAverages).some(e=>e.current>0||e.best>0)&&(l+=200),t.length>0&&t.some(e=>e.heartRate>0)&&(l+=140),n.length>0&&n.some(e=>e.cadence>0)&&(l+=140),a.length>0&&(l+=350),t.length>0&&(l+=350),n.length>0&&(l+=350);let s=Math.max(600,l);o.width=1200,o.height=s,r.fillStyle="#1a1a2e",r.fillRect(0,0,1200,s),r.fillStyle="#ffffff",r.font="bold 36px Arial, sans-serif",r.textAlign="center",r.fillText("Power Meter Summary",600,50),r.font="18px Arial, sans-serif",r.fillStyle="#cccccc";let c=new Date;if(r.fillText(c.toLocaleDateString()+" "+c.toLocaleTimeString(),600,80),a.length>0){let e=Math.round(Math.round((a[a.length-1].timestamp-a[0].timestamp)/1e3)/60);r.fillText(`Session Duration: ${e} minutes`,600,105)}let i=130;if(Object.values(powerAverages).some(e=>e.current>0||e.best>0)){r.fillStyle="#ffffff",r.font="bold 24px Arial, sans-serif",r.textAlign="left",r.fillText("Power Averages",50,i),i+=40;let e=[{label:"10s",data:powerAverages["10s"]},{label:"30s",data:powerAverages["30s"]},{label:"1m",data:powerAverages["1m"]},{label:"2m",data:powerAverages["2m"]},{label:"4m",data:powerAverages["4m"]},{label:"8m",data:powerAverages["8m"]}];r.font="16px Arial, sans-serif",r.fillStyle="#cccccc",r.fillText("Duration",70,i),r.fillText("Best",220,i),r.fillText("Duration",470,i),r.fillText("Best",620,i),i+=30;for(let t=0;t<e.length;t++){let n=e[t],a=t<3?70:470,o=i+25*(t<3?t:t-3);r.fillStyle="#ffffff",r.fillText(n.label,a,o),r.fillStyle=n.data.best>0?"#e74c3c":"#666666",r.fillText(n.data.best+"W",a+150,o)}i+=100}if(t.length>0){let e=t.map(e=>e.heartRate).filter(e=>e>0);if(e.length>0){r.fillStyle="#ffffff",r.font="bold 24px Arial, sans-serif",r.textAlign="left",r.fillText("Heart Rate Statistics",50,i),i+=40;let t=Math.max(...e),n=Math.min(...e),a=Math.round(e.reduce((e,t)=>e+t,0)/e.length);r.font="16px Arial, sans-serif",r.fillStyle="#cccccc",r.fillText("Average:",70,i),r.fillStyle="#e74c3c",r.fillText(`${a} BPM`,200,i),i+=25,r.fillStyle="#cccccc",r.fillText("Maximum:",70,i),r.fillStyle="#e74c3c",r.fillText(`${t} BPM`,200,i),i+=25,r.fillStyle="#cccccc",r.fillText("Minimum:",70,i),r.fillStyle="#e74c3c",r.fillText(`${n} BPM`,200,i),i+=40}}if(n.length>0){let e=n.map(e=>e.cadence).filter(e=>e>0);if(e.length>0){r.fillStyle="#ffffff",r.font="bold 24px Arial, sans-serif",r.textAlign="left",r.fillText("Cadence Statistics",50,i),i+=40;let t=Math.max(...e),n=Math.min(...e),a=Math.round(e.reduce((e,t)=>e+t,0)/e.length);r.font="16px Arial, sans-serif",r.fillStyle="#cccccc",r.fillText("Average:",70,i),r.fillStyle="#f39c12",r.fillText(`${a} RPM`,200,i),i+=25,r.fillStyle="#cccccc",r.fillText("Maximum:",70,i),r.fillStyle="#f39c12",r.fillText(`${t} RPM`,200,i),i+=25,r.fillStyle="#cccccc",r.fillText("Minimum:",70,i),r.fillStyle="#f39c12",r.fillText(`${n} RPM`,200,i),i+=40}}return a.length>0||t.length>0||n.length>0?(a.length>0&&(i+=20,r.fillStyle="#ffffff",r.font="bold 20px Arial, sans-serif",r.fillText("Power Timeline",50,i),drawTimelineChart(r,a,"power",50,i+=30,1100,300,"#3498db","W"),i+=350),t.length>0&&(r.fillStyle="#ffffff",r.font="bold 20px Arial, sans-serif",r.fillText("Heart Rate Timeline",50,i),drawTimelineChart(r,t,"heartRate",50,i+=30,1100,300,"#e74c3c","BPM"),i+=350),n.length>0&&(r.fillStyle="#ffffff",r.font="bold 20px Arial, sans-serif",r.fillText("Cadence Timeline",50,i),drawTimelineChart(r,n,"cadence",50,i+=30,1100,300,"#f39c12","RPM"),i+=350),o):(r.fillStyle="#cccccc",r.font="24px Arial, sans-serif",r.textAlign="center",r.fillText("No data recorded yet",600,s/2),r.font="16px Arial, sans-serif",r.fillText("Start recording to see your activity summary",600,s/2+40),o)}function drawTimelineChart(e,t,n,a,o,r,l,s,c){if(0===t.length)return;e.fillStyle="rgba(255, 255, 255, 0.05)",e.fillRect(a,o,r,l),e.strokeStyle="rgba(255, 255, 255, 0.2)",e.lineWidth=1,e.strokeRect(a,o,r,l);let i=t.map(e=>e[n]).filter(e=>e>0);if(0===i.length)return;let d=Math.min(...i),m=Math.max(...i),g=m-d||1;e.fillStyle="#cccccc",e.font="12px Arial, sans-serif",e.textAlign="right";for(let t=0;t<=4;t++){let n=Math.round(d+g*t/4),r=o+l-l*t/4;e.fillText(n+c,a-10,r+4)}e.strokeStyle=s,e.lineWidth=2,e.beginPath();let u=!0;for(let s=0;s<t.length;s++){let c=t[s][n];if(c>0){let n=a+s/(t.length-1)*r,i=o+l-(c-d)/g*l;u?(e.moveTo(n,i),u=!1):e.lineTo(n,i)}}e.stroke(),e.fillStyle=s;for(let s=0;s<t.length;s+=Math.max(1,Math.floor(t.length/50))){let c=t[s][n];if(c>0){let n=a+s/(t.length-1)*r,i=o+l-(c-d)/g*l;e.beginPath(),e.arc(n,i,3,0,2*Math.PI),e.fill()}}e.strokeStyle="rgba(255, 255, 255, 0.1)",e.lineWidth=1;for(let t=1;t<4;t++){let n=o+l*t/4;e.beginPath(),e.moveTo(a,n),e.lineTo(a+r,n),e.stroke()}if(t.length>1){e.fillStyle="#cccccc",e.font="12px Arial, sans-serif",e.textAlign="center";let n=new Date(t[0].timestamp),s=new Date(t[t.length-1].timestamp);if(e.fillText(n.toLocaleTimeString(),a,o+l+20),e.fillText(s.toLocaleTimeString(),a+r,o+l+20),t.length>10){let n=new Date(t[Math.floor(t.length/2)].timestamp);e.fillText(n.toLocaleTimeString(),a+r/2,o+l+20)}}e.fillStyle="#ffffff",e.font="12px Arial, sans-serif",e.textAlign="left",e.fillText(`Max: ${m}${c}`,a+10,o+20),e.fillText(`Min: ${d}${c}`,a+10,o+35),e.fillText(`Avg: ${Math.round(i.reduce((e,t)=>e+t,0)/i.length)}${c}`,a+10,o+50)}let SESSION_STORAGE_KEY="powerMeterSession",SESSION_TIMEOUT=864e5;function saveSessionData(){try{let e={timestamp:Date.now(),powerData:powerData,heartData:heartData,cadenceData:cadenceData,rawPowerMeasurements:rawPowerMeasurements,powerReadings:powerReadings,powerAverages:powerAverages,lastPowerValue:lastPowerValue,lastHeartRateValue:lastHeartRateValue,lastCadenceValue:lastCadenceValue,sessionStartTime:sessionStartTime};localStorage.setItem(SESSION_STORAGE_KEY,JSON.stringify(e))}catch(e){console.warn("Failed to save session data:",e)}}function loadSessionData(){try{let e=localStorage.getItem(SESSION_STORAGE_KEY);if(!e)return null;let t=JSON.parse(e);if(Date.now()-t.timestamp>864e5)return localStorage.removeItem(SESSION_STORAGE_KEY),null;return t}catch(e){return console.warn("Failed to load session data:",e),localStorage.removeItem(SESSION_STORAGE_KEY),null}}function restoreSessionData(e){try{return e.powerData&&(powerData.length=0,powerData.push(...e.powerData)),e.heartData&&(heartData.length=0,heartData.push(...e.heartData)),e.cadenceData&&(cadenceData.length=0,cadenceData.push(...e.cadenceData)),e.rawPowerMeasurements&&(rawPowerMeasurements.length=0,rawPowerMeasurements.push(...e.rawPowerMeasurements)),e.powerReadings&&(powerReadings.length=0,powerReadings.push(...e.powerReadings)),e.powerAverages&&Object.assign(powerAverages,e.powerAverages),void 0!==e.lastPowerValue&&(lastPowerValue=e.lastPowerValue),void 0!==e.lastHeartRateValue&&(lastHeartRateValue=e.lastHeartRateValue),void 0!==e.lastCadenceValue&&(lastCadenceValue=e.lastCadenceValue),void 0!==e.sessionStartTime&&(sessionStartTime=e.sessionStartTime),updateDisplaysFromRestoredData(),!0}catch(e){return console.warn("Failed to restore session data:",e),!1}}function updatePowerValue(e){let t=e||"--";powerValueElement.textContent=t,powerValueElement.setAttribute("data-value",t)}function updateDisplaysFromRestoredData(){updatePowerValue(lastPowerValue),hrValueElement.textContent=lastHeartRateValue||"--",cadenceValueElement.textContent=lastCadenceValue||"--",updatePowerAveragesDisplay(),powerData.length>0&&showSessionRestoredNotification()}function showSessionRestoredNotification(){let e=document.createElement("div");e.style.cssText=`
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4CAF50;
        color: white;
        padding: 1rem 1.5rem;
        border-radius: 8px;
        z-index: 1000;
        font-size: 0.9rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.3);
        animation: slideIn 0.3s ease-out;
    `,e.textContent=`Session restored! ${powerData.length} data points recovered.`;let t=document.createElement("style");t.textContent=`
        @keyframes slideIn {
            from { transform: translateX(100%); opacity: 0; }
            to { transform: translateX(0); opacity: 1; }
        }
    `,document.head.appendChild(t),document.body.appendChild(e),setTimeout(()=>{e.style.animation="slideIn 0.3s ease-out reverse",setTimeout(()=>{e.parentNode&&e.parentNode.removeChild(e),t.parentNode&&t.parentNode.removeChild(t)},300)},5e3)}function clearSessionData(){localStorage.removeItem(SESSION_STORAGE_KEY)}let connectButton=document.getElementById("connectButton"),statusText=document.getElementById("status"),powerValueElement=document.getElementById("power-value"),hrValueElement=document.getElementById("hr-value"),cadenceValueElement=document.getElementById("cadence-value"),deviceNameElement=document.getElementById("device-name"),exportJsonButton=document.getElementById("exportJsonButton"),exportCsvButton=document.getElementById("exportCsvButton"),exportTcxButton=document.getElementById("exportTcxButton"),exportRawJsonButton=document.getElementById("exportRawJsonButton"),exportRawCsvButton=document.getElementById("exportRawCsvButton"),exportImageButton=document.getElementById("exportImageButton"),clearSessionButton=document.getElementById("clearSessionButton"),avg10sCurrentElement=document.getElementById("avg10s-current"),avg10sBestElement=document.getElementById("avg10s-best"),avg30sCurrentElement=document.getElementById("avg30s-current"),avg30sBestElement=document.getElementById("avg30s-best"),avg1mCurrentElement=document.getElementById("avg1m-current"),avg1mBestElement=document.getElementById("avg1m-best"),avg2mCurrentElement=document.getElementById("avg2m-current"),avg2mBestElement=document.getElementById("avg2m-best"),avg4mCurrentElement=document.getElementById("avg4m-current"),avg4mBestElement=document.getElementById("avg4m-best"),avg8mCurrentElement=document.getElementById("avg8m-current"),avg8mBestElement=document.getElementById("avg8m-best"),toggleConnectSection=document.getElementById("toggleConnectSection"),toggleExportSection=document.getElementById("toggleExportSection"),connectSection=document.getElementById("connectSection"),exportSection=document.getElementById("exportSection"),powerAveragesSection=document.getElementById("powerAveragesSection"),connectToggleText=document.getElementById("connectToggleText"),exportToggleText=document.getElementById("exportToggleText"),hamburgerBtn=document.getElementById("hamburgerButton"),menuDropdown=document.getElementById("menuDropdown"),powerAveragesToggle=document.getElementById("powerAveragesToggle"),powerMetricToggle=document.getElementById("powerMetricToggle"),heartRateMetricToggle=document.getElementById("heartRateMetricToggle"),cadenceMetricToggle=document.getElementById("cadenceMetricToggle"),connectSectionToggle=document.getElementById("connectSectionToggle"),exportSectionToggle=document.getElementById("exportSectionToggle"),loadDebugDataMenuItem=document.getElementById("loadDebugDataMenuItem"),showInfoMenuItem=document.getElementById("showInfoMenuItem"),showQrCodeMenuItem=document.getElementById("showQrCodeMenuItem"),spyModeToggle=document.getElementById("spyModeToggle"),powerCard=document.querySelector(".power-card"),heartRateCard=document.querySelector(".hr-card"),cadenceCard=document.querySelector(".cadence-card"),spyCard=document.querySelector(".spy-card"),spyModeSection=document.getElementById("spyModeSection"),hrConnectionStatus=document.getElementById("hrConnectionStatus"),cadenceConnectionStatus=document.getElementById("cadenceConnectionStatus");if(hrConnectionStatus&&(hrConnectionStatus.textContent="Disconnected"),cadenceConnectionStatus&&(cadenceConnectionStatus.textContent="Disconnected"),hamburgerBtn&&menuDropdown?(hamburgerBtn.addEventListener("click",function(){menuDropdown.classList.contains("active")?menuDropdown.classList.remove("active"):menuDropdown.classList.add("active")}),document.addEventListener("click",function(e){e.target.closest(".hamburger-menu")||menuDropdown.classList.remove("active")})):console.error("Hamburger menu elements not found:",{hamburgerBtn:!!hamburgerBtn,menuDropdown:!!menuDropdown}),powerAveragesToggle&&powerAveragesSection){let e=!1;powerAveragesToggle.addEventListener("click",function(){(e=!e)?(powerAveragesSection.style.display="block",powerAveragesToggle.classList.add("active")):(powerAveragesSection.style.display="none",powerAveragesToggle.classList.remove("active")),manageCollapsedSectionsLayout()})}else console.error("Power averages toggle elements not found:",{powerAveragesToggle:!!powerAveragesToggle,powerAveragesSection:!!powerAveragesSection});if(powerMetricToggle&&powerCard){let e=!0;powerMetricToggle.classList.add("active"),powerMetricToggle.addEventListener("click",function(){(e=!e)?(powerCard.style.display="block",powerMetricToggle.classList.add("active")):(powerCard.style.display="none",powerMetricToggle.classList.remove("active"))})}else console.error("Power metric toggle elements not found:",{powerMetricToggle:!!powerMetricToggle,powerCard:!!powerCard});if(heartRateMetricToggle&&heartRateCard){let e=!0;heartRateMetricToggle.classList.add("active"),heartRateMetricToggle.addEventListener("click",function(){(e=!e)?(heartRateCard.style.display="block",heartRateMetricToggle.classList.add("active")):(heartRateCard.style.display="none",heartRateMetricToggle.classList.remove("active"))})}else console.error("Heart rate metric toggle elements not found:",{heartRateMetricToggle:!!heartRateMetricToggle,heartRateCard:!!heartRateCard});if(cadenceMetricToggle&&cadenceCard){let e=!0;cadenceMetricToggle.classList.add("active"),cadenceMetricToggle.addEventListener("click",function(){(e=!e)?(cadenceCard.style.display="block",cadenceMetricToggle.classList.add("active")):(cadenceCard.style.display="none",cadenceMetricToggle.classList.remove("active"))})}else console.error("Cadence metric toggle elements not found:",{cadenceMetricToggle:!!cadenceMetricToggle,cadenceCard:!!cadenceCard});if(connectSectionToggle&&connectSection){let e=!0;connectSectionToggle.classList.add("active"),connectSectionToggle.addEventListener("click",function(){(e=!e)?(connectSection.style.display="block",connectSectionToggle.classList.add("active")):(connectSection.style.display="none",connectSectionToggle.classList.remove("active"))})}else console.error("Connect section toggle elements not found:",{connectSectionToggle:!!connectSectionToggle,connectSection:!!connectSection});if(exportSectionToggle&&exportSection){let e=!1;exportSectionToggle.addEventListener("click",function(){(e=!e)?(exportSection.style.display="block",exportSectionToggle.classList.add("active")):(exportSection.style.display="none",exportSectionToggle.classList.remove("active"))})}else console.error("Export section toggle elements not found:",{exportSectionToggle:!!exportSectionToggle,exportSection:!!exportSection});if(spyModeToggle&&spyModeSection){let e=!1;spyModeToggle.addEventListener("click",function(){(e=!e)?(spyModeSection.style.display="block",spyModeToggle.classList.add("active")):(spyModeSection.style.display="none",spyModeToggle.classList.remove("active"),spyMeterDevice&&disconnectSpyMeter(),spyValueElement&&(spyValueElement.textContent="--"),spyStatusElement&&(spyStatusElement.style.display="none")),spyInstructionsElement&&(spyInstructionsElement.style.display="block")})}else console.error("Spy mode toggle elements not found:",{spyModeToggle:!!spyModeToggle,spyModeSection:!!spyModeSection});function updateDashboardLayout(){let e=document.querySelector(".dashboard");powerAveragesSection&&"none"===powerAveragesSection.style.display?e.classList.add("maximized"):e.classList.remove("maximized"),manageCollapsedSectionsLayout()}function manageCollapsedSectionsLayout(){let e=document.querySelector(".dashboard"),t=document.querySelector(".collapsed-sections-row");t&&(t.querySelectorAll(".power-averages-section").forEach(t=>{e.parentNode.insertBefore(t,e.nextSibling)}),t.remove()),e.classList.remove("has-collapsed-sections")}loadDebugDataMenuItem?loadDebugDataMenuItem.addEventListener("click",function(){loadDebugData(),menuDropdown&&menuDropdown.classList.remove("active")}):console.error("Load debug data menu item not found"),showInfoMenuItem?showInfoMenuItem.addEventListener("click",function(){showAppInfo(),menuDropdown&&menuDropdown.classList.remove("active")}):console.error("Show info menu item not found"),showQrCodeMenuItem?showQrCodeMenuItem.addEventListener("click",function(){showQrCodeModal(),menuDropdown&&menuDropdown.classList.remove("active")}):console.error("Show QR code menu item not found"),toggleConnectSection.addEventListener("click",()=>{let e=connectSection.querySelectorAll("button:not(.section-toggle-button)"),t=connectSection.querySelector(".section-header");"none"===e[0].style.display?(e.forEach(e=>e.style.display="block"),connectToggleText.textContent="Hide Connect Devices",toggleConnectSection.classList.remove("collapsed"),connectSection.classList.remove("collapsed"),t.classList.remove("collapsed")):(e.forEach(e=>e.style.display="none"),connectToggleText.textContent="Show Connect Devices",toggleConnectSection.classList.add("collapsed"),connectSection.classList.add("collapsed"),t.classList.add("collapsed"))}),toggleExportSection.addEventListener("click",()=>{let e=document.getElementById("export-buttons"),t=exportSection.querySelector(".section-header");"none"===e.style.display?(exportSection.style.display="block",e.style.display="flex",exportToggleText.textContent="Hide Export Data",toggleExportSection.classList.remove("collapsed"),exportSection.classList.remove("collapsed"),t.classList.remove("collapsed")):(e.style.display="none",exportToggleText.textContent="Show Export Data",toggleExportSection.classList.add("collapsed"),exportSection.classList.add("collapsed"),t.classList.add("collapsed"))});let connectButtons=connectSection.querySelectorAll("button:not(.section-toggle-button)");connectButtons.forEach(e=>e.style.display="block"),exportSection.style.display="none",powerAveragesSection.style.display="none",updateDashboardLayout();let powerData=[],rawPowerMeasurements=[],lastPowerValue=0,sessionStartTime=null,powerReadings=[],powerAverages={"10s":{current:0,best:0},"30s":{current:0,best:0},"1m":{current:0,best:0},"2m":{current:0,best:0},"4m":{current:0,best:0},"8m":{current:0,best:0}};function addPowerReading(e){let t=Date.now();powerReadings.push({timestamp:t,power:e});let n=t-54e4;powerReadings=powerReadings.filter(e=>e.timestamp>n),calculatePowerAverages(),updatePowerAveragesDisplay()}function calculatePowerAverages(){let e=Date.now();for(let[t,n]of Object.entries({"10s":1e4,"30s":3e4,"1m":6e4,"2m":12e4,"4m":24e4,"8m":48e4})){let a=e-n,o=powerReadings.filter(e=>e.timestamp>=a);if(o.length>0){let e=Math.round(o.reduce((e,t)=>e+t.power,0)/o.length);powerAverages[t].current=e,e>powerAverages[t].best&&(powerAverages[t].best=e)}else powerAverages[t].current=0}}function updatePowerAveragesDisplay(){avg10sCurrentElement.textContent=powerAverages["10s"].current||"--",avg10sBestElement.textContent=powerAverages["10s"].best||"--",avg30sCurrentElement.textContent=powerAverages["30s"].current||"--",avg30sBestElement.textContent=powerAverages["30s"].best||"--",avg1mCurrentElement.textContent=powerAverages["1m"].current||"--",avg1mBestElement.textContent=powerAverages["1m"].best||"--",avg2mCurrentElement.textContent=powerAverages["2m"].current||"--",avg2mBestElement.textContent=powerAverages["2m"].best||"--",avg4mCurrentElement.textContent=powerAverages["4m"].current||"--",avg4mBestElement.textContent=powerAverages["4m"].best||"--",avg8mCurrentElement.textContent=powerAverages["8m"].current||"--",avg8mBestElement.textContent=powerAverages["8m"].best||"--"}function resetPowerAverages(){for(let e of(powerReadings=[],Object.keys(powerAverages)))powerAverages[e].current=0,powerAverages[e].best=0;updatePowerAveragesDisplay()}function resetAllSessionData(){for(let e of(powerData.length=0,heartData.length=0,cadenceData.length=0,rawPowerMeasurements.length=0,powerReadings.length=0,Object.keys(powerAverages)))powerAverages[e].current=0,powerAverages[e].best=0;lastPowerValue=0,lastHeartRateValue=0,lastCadenceValue=0,sessionStartTime=null,updatePowerAveragesDisplay(),updatePowerValue("--"),hrValueElement.textContent="--",cadenceValueElement.textContent="--",clearSessionData()}function loadDebugData(){console.log("Loading debug data..."),resetAllSessionData(),sessionStartTime=Date.now()-36e5;for(let e=0;e<1e3;e++){let t=sessionStartTime+3600*e,n=Math.max(0,Math.round(250+150*Math.sin(e/100)+(Math.random()-.5)*50)),a=Math.max(60,Math.min(200,Math.round(150+30*Math.sin(e/150)+(Math.random()-.5)*10))),o=Math.max(0,Math.round(90+20*Math.sin(e/80)+(Math.random()-.5)*8));powerData.push({timestamp:t,power:n,heartRate:a,cadence:o}),heartData.push({timestamp:t,heartRate:a}),cadenceData.push({timestamp:t,cadence:o}),powerReadings.push({timestamp:t,power:n}),rawPowerMeasurements.push({timestamp:t,flags:0,rawBytes:"00 00 "+n.toString(16).padStart(4,"0"),dataLength:4,instantaneousPower:n})}let e=powerData[powerData.length-1];lastPowerValue=e.power,lastHeartRateValue=e.heartRate,lastCadenceValue=e.cadence,calculateAllPowerAverages(),updatePowerValue(lastPowerValue),hrValueElement.textContent=lastHeartRateValue,cadenceValueElement.textContent=lastCadenceValue,updatePowerAveragesDisplay(),saveSessionData(),alert(`Debug data loaded successfully!
1000 data points generated over 1 hour.
Power: ${lastPowerValue}W, HR: ${lastHeartRateValue}BPM, Cadence: ${lastCadenceValue}RPM`),console.log("Debug data loaded:",{powerDataPoints:powerData.length,heartDataPoints:heartData.length,cadenceDataPoints:cadenceData.length})}function calculateAllPowerAverages(){let e=Date.now();for(let[t,n]of Object.entries({"10s":1e4,"30s":3e4,"1m":6e4,"2m":12e4,"4m":24e4,"8m":48e4})){let a=e-n,o=powerReadings.filter(e=>e.timestamp>=a);if(o.length>0){let e=Math.round(o.reduce((e,t)=>e+t.power,0)/o.length);powerAverages[t].current=e,e>powerAverages[t].best&&(powerAverages[t].best=e)}}}function showAppInfo(){let e=document.createElement("div");e.className="modal-backdrop",e.style.cssText=`
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;let t=document.createElement("div");t.className="modal",t.style.cssText=`
        background: #1a1a2e;
        border-radius: 12px;
        padding: 2rem;
        max-width: 600px;
        max-height: 80vh;
        overflow-y: auto;
        margin: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
    `,t.innerHTML=`
        <div style="text-align: center; margin-bottom: 1.5rem;">
            <h2 style="color: #3498db; margin: 0 0 0.5rem 0; font-size: 1.8rem;">\u{1F6B4} Web Bluetooth Power Meter</h2>
            <p style="color: #cccccc; margin: 0; font-size: 1rem;">Real-time cycling data analysis</p>
        </div>

        <div style="color: #ffffff; line-height: 1.6;">
            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{1F4F1} What is this app?</h3>
            <p style="margin-bottom: 1rem;">
                This is a web-based power meter application that connects to Bluetooth cycling devices 
                to provide real-time power, heart rate, and cadence data analysis. Perfect for indoor 
                training, data logging, and performance tracking.
            </p>

            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{1F517} How to connect devices:</h3>
            <ol style="margin-bottom: 1rem; padding-left: 1.5rem;">
                <li><strong>Power Meter:</strong> Click "Connect Power Meter" and select your cycling power device</li>
                <li><strong>Heart Rate:</strong> Click "Connect Heart Rate" to pair your HR monitor</li>
                <li><strong>Cadence:</strong> Click "Connect Cadence" for speed/cadence sensors</li>
            </ol>

            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{1F4CA} Features:</h3>
            <ul style="margin-bottom: 1rem; padding-left: 1.5rem;">
                <li><strong>Real-time Metrics:</strong> Live power, heart rate, and cadence display</li>
                <li><strong>Power Averages:</strong> 10s, 30s, 1m, 2m, 4m, and 8m rolling averages</li>
                <li><strong>Data Export:</strong> JSON, CSV, TCX, and visual summary image formats</li>
                <li><strong>Session Persistence:</strong> Data automatically saved and restored</li>
                <li><strong>Custom Dashboard:</strong> Toggle metrics and sections via hamburger menu</li>
            </ul>

            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{2699}\u{FE0F} Using the hamburger menu:</h3>
            <ul style="margin-bottom: 1rem; padding-left: 1.5rem;">
                <li><strong>Toggle Sections:</strong> Show/hide different parts of the interface</li>
                <li><strong>Load Debug Data:</strong> Generate 1000 test data points for testing</li>
                <li><strong>Customize View:</strong> Control which metrics are visible</li>
            </ul>

            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{1F310} Browser Support:</h3>
            <p style="margin-bottom: 1rem;">
                Requires a browser with Web Bluetooth support:
                <br>\u{2022} Chrome 56+ \u{2022} Edge 79+ \u{2022} Opera 43+
            </p>

            <h3 style="color: #f39c12; margin: 1.5rem 0 1rem 0;">\u{1F4A1} Tips:</h3>
            <ul style="margin-bottom: 1.5rem; padding-left: 1.5rem;">
                <li>Make sure your devices are in pairing mode before connecting</li>
                <li>Data is automatically saved to your browser's local storage</li>
                <li>Use the export functions to save your workout data</li>
                <li>The app works offline once loaded</li>
            </ul>
        </div>

        <div style="text-align: center; margin-top: 2rem;">
            <button id="closeInfoModal" style="
                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
            ">Got it!</button>
        </div>
    `,e.appendChild(t),document.body.appendChild(e);let n=t.querySelector("#closeInfoModal"),a=()=>{document.body.removeChild(e)};n.addEventListener("click",a),e.addEventListener("click",t=>{t.target===e&&a()});let o=e=>{"Escape"===e.key&&(a(),document.removeEventListener("keydown",o))};document.addEventListener("keydown",o),n.addEventListener("mouseenter",()=>{n.style.transform="translateY(-2px)",n.style.boxShadow="0 8px 24px rgba(52, 152, 219, 0.4)"}),n.addEventListener("mouseleave",()=>{n.style.transform="translateY(0)",n.style.boxShadow="none"})}function showQrCodeModal(){let e="https://colscoding.github.io/power-saver/",t=document.createElement("div");t.className="modal-backdrop",t.style.cssText=`
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    `;let n=document.createElement("div");n.className="modal",n.style.cssText=`
        background: #1a1a2e;
        border-radius: 12px;
        padding: 2rem;
        max-width: 400px;
        max-height: 80vh;
        overflow-y: auto;
        margin: 20px;
        border: 1px solid rgba(255, 255, 255, 0.2);
        text-align: center;
    `;let a=document.createElement("canvas");a.width=256,a.height=256,a.style.cssText=`
        background: white;
        border-radius: 8px;
        margin: 1rem 0;
        max-width: 100%;
        height: auto;
    `,generateQRCode(a,e),n.innerHTML=`
        <div style="margin-bottom: 1.5rem;">
            <h2 style="color: #9b59b6; margin: 0 0 0.5rem 0; font-size: 1.8rem;">\u{1F4F1} Share Power Meter App</h2>
            <p style="color: #cccccc; margin: 0; font-size: 1rem;">Scan to access the app on any device</p>
        </div>
        
        <div id="qr-container" style="margin: 1.5rem 0;"></div>
        
        <div style="margin: 1.5rem 0;">
            <p style="color: #ffffff; margin: 0 0 0.5rem 0; font-weight: 600;">Or visit directly:</p>
            <a href="${e}" target="_blank" style="
                color: #9b59b6; 
                text-decoration: none; 
                font-size: 0.9rem;
                word-break: break-all;
                line-height: 1.4;
            ">${e}</a>
        </div>

        <div style="text-align: center; margin-top: 2rem;">
            <button id="closeQrModal" style="
                background: linear-gradient(135deg, #9b59b6 0%, #8e44ad 100%);
                color: white;
                border: none;
                padding: 12px 24px;
                border-radius: 8px;
                font-size: 16px;
                font-weight: 600;
                cursor: pointer;
                transition: all 0.3s ease;
            ">Close</button>
        </div>
    `,n.querySelector("#qr-container").appendChild(a),t.appendChild(n),document.body.appendChild(t);let o=n.querySelector("#closeQrModal"),r=()=>{document.body.removeChild(t)};o.addEventListener("click",r),t.addEventListener("click",e=>{e.target===t&&r()});let l=e=>{"Escape"===e.key&&(r(),document.removeEventListener("keydown",l))};document.addEventListener("keydown",l),o.addEventListener("mouseenter",()=>{o.style.transform="translateY(-2px)",o.style.boxShadow="0 8px 24px rgba(155, 89, 182, 0.4)"}),o.addEventListener("mouseleave",()=>{o.style.transform="translateY(0)",o.style.boxShadow="none"})}function generateQRCode(e,t){let n=e.getContext("2d"),a=e.width;n.fillStyle="#ffffff",n.fillRect(0,0,a,a);let o=`https://api.qrserver.com/v1/create-qr-code/?size=${a}x${a}&data=${encodeURIComponent(t)}`,r=new Image;r.crossOrigin="anonymous",r.onload=function(){n.drawImage(r,0,0,a,a)},r.onerror=function(){drawFallbackQR(n,a)},r.src=o}function drawFallbackQR(e,t){e.fillStyle="#000000",e.font="12px Arial",e.textAlign="center";let n=t/25;for(let t=0;t<25;t++)for(let a=0;a<25;a++)((t+a)%3==0||0===t||24===t||0===a||24===a)&&e.fillRect(t*n,a*n,n,n);e.fillStyle="#ffffff",e.fillRect(.2*t,.4*t,.6*t,.2*t),e.fillStyle="#000000",e.fillText("QR Code",t/2,t/2-10),e.fillText("Unavailable",t/2,t/2+10)}let lastHeartRateValue=0,lastCadenceValue=0,dataLoggerInterval=null,powerMeterDevice=null,CYCLING_POWER_SERVICE_UUID="cycling_power",CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID="cycling_power_measurement",CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID="cycling_power_feature",CYCLING_CADENCE_SERVICE_UUID="cycling_speed_and_cadence",CSC_MEASUREMENT_CHARACTERISTIC_UUID="csc_measurement",spyMeterDevice=null,spyValueElement=document.getElementById("spy-value"),spyStatusElement=document.getElementById("spyStatus"),spyInstructionsElement=document.getElementById("spyInstructions");async function connectToSpyMeter(){if(!navigator.bluetooth)return void console.error("Web Bluetooth API is not available.");try{spyInstructionsElement.style.display="none",spyStatusElement.textContent="Scanning for spy power meter...",spyStatusElement.style.display="block",spyMeterDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_POWER_SERVICE_UUID]}]}),spyStatusElement.textContent="Connecting to spy device...",spyMeterDevice.addEventListener("gattserverdisconnected",onSpyDisconnected);let e=await spyMeterDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_POWER_SERVICE_UUID),n=await t.getCharacteristic(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);await n.startNotifications(),n.addEventListener("characteristicvaluechanged",handleSpyPowerMeasurement),spyStatusElement.textContent="Spy connected!",spyStatusElement.style.display="none"}catch(e){spyStatusElement.textContent=`Spy Error: ${e.message}`,console.error("Spy connection failed:",e),spyMeterDevice&&(spyMeterDevice.removeEventListener("gattserverdisconnected",onSpyDisconnected),spyMeterDevice=null),setTimeout(()=>{spyStatusElement.style.display="none",spyInstructionsElement.style.display="block"},3e3)}}function disconnectSpyMeter(){spyMeterDevice&&spyMeterDevice.gatt.connected&&spyMeterDevice.gatt.disconnect(),spyMeterDevice=null,spyValueElement.textContent="--",spyStatusElement.style.display="none",spyInstructionsElement.style.display="block"}function onSpyDisconnected(){console.log("Spy device disconnected"),spyMeterDevice=null,spyValueElement.textContent="--",spyStatusElement.textContent="Spy disconnected",spyStatusElement.style.display="block",setTimeout(()=>{spyStatusElement.style.display="none",spyInstructionsElement.style.display="block"},3e3)}function handleSpyPowerMeasurement(e){let t=new Uint8Array(e.target.value.buffer),n=0;t.length>=4&&(n=t[2]+(t[3]<<8)),spyValueElement.textContent=n}function handlePowerMeasurement(e){let t=e.target.value,n={timestamp:Date.now(),flags:t.getUint16(0,!0),rawBytes:Array.from(new Uint8Array(t.buffer)).map(e=>e.toString(16).padStart(2,"0")).join(" "),dataLength:t.byteLength};t.getUint16(0,!0);let a=t.getInt16(2,!0);n.instantaneousPower=a,updatePowerValue(a),lastPowerValue=a,addPowerReading(a),rawPowerMeasurements.push(n)}function parsePowerMeasurement(e){return e.getInt16(2,!0)}function onDisconnected(){statusText.textContent="Device disconnected.",deviceNameElement.textContent="",updatePowerValue("--"),resetPowerAverages(),connectButton.disabled=!1,dataLoggerInterval&&(clearInterval(dataLoggerInterval),dataLoggerInterval=null),powerMeterDevice&&(powerMeterDevice.removeEventListener("gattserverdisconnected",onDisconnected),powerMeterDevice=null),lastPowerValue=0}connectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){statusText.textContent="Web Bluetooth API is not available.";return}powerData=[],rawPowerMeasurements=[],lastPowerValue=0,resetPowerAverages(),dataLoggerInterval&&clearInterval(dataLoggerInterval);try{statusText.textContent="Scanning for power meters...",powerMeterDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_POWER_SERVICE_UUID]}]}),statusText.textContent="Connecting to device...",deviceNameElement.textContent=`Device: ${powerMeterDevice.name||"Unknown Device"}`,powerMeterDevice.addEventListener("gattserverdisconnected",onDisconnected);let e=await powerMeterDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_POWER_SERVICE_UUID),n=await t.getCharacteristic(CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);try{let e=await t.getCharacteristic("cycling_power_feature");await e.readValue()}catch{}await n.startNotifications(),n.addEventListener("characteristicvaluechanged",handlePowerMeasurement),statusText.textContent="Connected and receiving data!",connectButton.disabled=!0,sessionStartTime||(sessionStartTime=Date.now()),dataLoggerInterval=setInterval(()=>{powerData.push({timestamp:Date.now(),power:lastPowerValue,heartRate:lastHeartRateValue,cadence:lastCadenceValue}),powerData.length%100==0&&saveSessionData()},100)}catch(e){statusText.textContent=`Error: ${e.message}`,console.error("Connection failed:",e),powerMeterDevice&&powerMeterDevice.removeEventListener("gattserverdisconnected",onDisconnected)}}),spyCard.addEventListener("click",async()=>{spyMeterDevice?disconnectSpyMeter():await connectToSpyMeter()}),exportJsonButton.addEventListener("click",()=>{let e=new Blob([JSON.stringify(powerData,null,2)],{type:"application/json"}),t=URL.createObjectURL(e),n=document.createElement("a");n.href=t;let a=new Date,o=a.getFullYear(),r=String(a.getMonth()+1).padStart(2,"0"),l=String(a.getDate()).padStart(2,"0"),s=`${o}-${r}-${l}`;n.download=`power_data_${s}.json`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(t)}),exportCsvButton.addEventListener("click",()=>{let e="timestamp,power,heartRate,cadence\n";powerData.forEach(t=>{e+=`${t.timestamp},${t.power},${t.heartRate},${t.cadence}
`});let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),n=URL.createObjectURL(t),a=document.createElement("a");a.href=n;let o=new Date,r=o.getFullYear(),l=String(o.getMonth()+1).padStart(2,"0"),s=String(o.getDate()).padStart(2,"0"),c=`${r}-${l}-${s}`;a.download=`power_data_${c}.csv`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(n)}),exportRawJsonButton.addEventListener("click",()=>{let e=new Blob([JSON.stringify(rawPowerMeasurements,null,2)],{type:"application/json"}),t=URL.createObjectURL(e),n=document.createElement("a");n.href=t;let a=new Date,o=a.getFullYear(),r=String(a.getMonth()+1).padStart(2,"0"),l=String(a.getDate()).padStart(2,"0"),s=`${o}-${r}-${l}`;n.download=`raw_power_measurements_${s}.json`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(t)}),exportRawCsvButton.addEventListener("click",()=>{let e="timestamp,flags,dataLength,instantaneousPower,rawBytes\n";rawPowerMeasurements.forEach(t=>{e+=`${t.timestamp},${t.flags},${t.dataLength},${t.instantaneousPower},"${t.rawBytes}"
`});let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),n=URL.createObjectURL(t),a=document.createElement("a");a.href=n;let o=new Date,r=o.getFullYear(),l=String(o.getMonth()+1).padStart(2,"0"),s=String(o.getDate()).padStart(2,"0"),c=`${r}-${l}-${s}`;a.download=`raw_power_measurements_${c}.csv`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(n)}),exportTcxButton.addEventListener("click",()=>{try{if(0===powerData.length)return void alert("No power data available to export.");let e=generateTcxString(powerData),t=new Blob([e],{type:"application/xml;charset=utf-8;"}),n=URL.createObjectURL(t),a=document.createElement("a");a.href=n;let o=new Date,r=o.getFullYear(),l=String(o.getMonth()+1).padStart(2,"0"),s=String(o.getDate()).padStart(2,"0"),c=`${r}-${l}-${s}`;a.download=`power_data_${c}.tcx`,document.body.appendChild(a),a.click(),document.body.removeChild(a),URL.revokeObjectURL(n)}catch(e){console.error("Error generating TCX:",e),alert(`Error generating TCX file: ${e.message}`)}}),exportImageButton.addEventListener("click",async()=>{try{if(0===powerData.length)return void alert("No data available to export. Please record some activity first.");(await generateSummaryImage(powerData)).toBlob(e=>{let t=URL.createObjectURL(e),n=document.createElement("a");n.href=t;let a=new Date,o=a.getFullYear(),r=String(a.getMonth()+1).padStart(2,"0"),l=String(a.getDate()).padStart(2,"0"),s=`${o}-${r}-${l}`;n.download=`power_meter_summary_${s}.png`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(t)},"image/png")}catch(e){console.error("Error generating summary image:",e),alert(`Error generating summary image: ${e.message}`)}}),clearSessionButton.addEventListener("click",()=>{confirm("Are you sure you want to clear all session data? This action cannot be undone.")&&(resetAllSessionData(),alert("Session data cleared successfully!"))});let heartData=[],cadenceData=[],hrDataLoggerInterval=null,hrConnectButton=document.getElementById("hrConnectButton"),hrStatusText=document.getElementById("hrStatus"),hrValue=document.getElementById("hr-value"),hrDeviceName=document.getElementById("hrDeviceName"),hrBluetoothDevice=null;function handleHeartRateChanged(e){let t=parseHeartRate(e.target.value);hrValue.textContent=t,lastHeartRateValue=t}function parseHeartRate(e){return 1&e.getUint8(0)?e.getUint16(1,!0):e.getUint8(1)}function onDisconnectedHr(){hrStatusText.textContent="Device disconnected.",hrConnectionStatus&&(hrConnectionStatus.textContent="Disconnected"),hrDeviceName.textContent="",hrValue.textContent="--",hrConnectButton.disabled=!1,hrBluetoothDevice=null,lastHeartRateValue=0}hrConnectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){hrStatusText.textContent="Web Bluetooth API is not available.";return}try{hrStatusText.textContent="Scanning for devices...",hrConnectionStatus&&(hrConnectionStatus.textContent="Connecting..."),hrBluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:["heart_rate"]}]}),hrStatusText.textContent="Connecting to device...",hrDeviceName.textContent=`Device: ${hrBluetoothDevice.name}`,hrBluetoothDevice.addEventListener("gattserverdisconnected",onDisconnectedHr);let e=await hrBluetoothDevice.gatt.connect(),t=await e.getPrimaryService("heart_rate"),n=await t.getCharacteristic("heart_rate_measurement");await n.startNotifications(),n.addEventListener("characteristicvaluechanged",handleHeartRateChanged),hrStatusText.textContent="Connected!",hrConnectionStatus&&(hrConnectionStatus.textContent="Connected"),hrConnectButton.disabled=!0}catch(e){hrStatusText.textContent=`Error: ${e.message}`,hrConnectionStatus&&(hrConnectionStatus.textContent="Connection Failed"),console.error("Connection failed:",e)}});let speedCadenceConnectButton=document.getElementById("speedCadenceConnectButton"),cadenceStatusText=document.getElementById("cadenceStatus"),cadenceDeviceName=document.getElementById("cadenceDeviceName"),speedCadenceBluetoothDevice=null;speedCadenceConnectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){cadenceStatusText.textContent="Web Bluetooth API is not available.";return}try{cadenceStatusText.textContent="Scanning for sensors...",cadenceConnectionStatus&&(cadenceConnectionStatus.textContent="Connecting..."),cadenceResetTimer&&(clearTimeout(cadenceResetTimer),cadenceResetTimer=null),lastCrankRevs=0,lastCrankTime=0,lastCadenceValue=0,speedCadenceBluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_CADENCE_SERVICE_UUID]}]}),cadenceStatusText.textContent="Connecting to device...",cadenceDeviceName.textContent=`Device: ${speedCadenceBluetoothDevice.name}`,speedCadenceBluetoothDevice.addEventListener("gattserverdisconnected",onDisconnectedSpeedCadence);let e=await speedCadenceBluetoothDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID),n=await t.getCharacteristic("csc_measurement");await n.startNotifications(),n.addEventListener("characteristicvaluechanged",handleSpeedCadenceMeasurement),cadenceStatusText.textContent="Connected!",cadenceConnectionStatus&&(cadenceConnectionStatus.textContent="Connected"),speedCadenceConnectButton.disabled=!0}catch(e){cadenceStatusText.textContent=`Error: ${e.message}`,cadenceConnectionStatus&&(cadenceConnectionStatus.textContent="Connection Failed"),console.error("Speed/Cadence connection failed:",e)}});let lastCrankRevs=0,lastCrankTime=0,cadenceResetTimer=null;function handleSpeedCadenceMeasurement(e){let t=e.target.value,n=t.getUint8(0),a=1;if(1&n&&(a+=6),2&n){let e=t.getUint16(a,!0),n=t.getUint16(a+2,!0);if(lastCrankRevs>0){let t=e-lastCrankRevs,a=(n-lastCrankTime)/1024;if(a>0){let e=t/a*60;cadenceValueElement.textContent=Math.round(e),lastCadenceValue=Math.round(e),cadenceResetTimer&&clearTimeout(cadenceResetTimer),cadenceResetTimer=setTimeout(()=>{cadenceValueElement.textContent="0",lastCadenceValue=0,cadenceResetTimer=null},3e3)}}lastCrankRevs=e,lastCrankTime=n}}function onDisconnectedSpeedCadence(){cadenceStatusText.textContent="Device disconnected.",cadenceConnectionStatus&&(cadenceConnectionStatus.textContent="Disconnected"),cadenceDeviceName.textContent="",cadenceValueElement.textContent="--",speedCadenceConnectButton.disabled=!1,speedCadenceBluetoothDevice=null,lastCadenceValue=0,cadenceResetTimer&&(clearTimeout(cadenceResetTimer),cadenceResetTimer=null),lastCrankRevs=0,lastCrankTime=0}function showRestorationDialog(e){return new Promise(t=>{let n=document.createElement("div");n.className="modal-backdrop";let a=document.createElement("div");a.className="modal";let o=Math.round((Date.now()-e.timestamp)/6e4),r=(e.powerData?.length||0)+(e.heartData?.length||0)+(e.cadenceData?.length||0);a.innerHTML=`
            <h3>Previous Session Found</h3>
            <p>
                A previous session was found from ${o} minutes ago with ${r} data points.
            </p>
            <p>
                Would you like to restore this session or start fresh?
            </p>
            <div class="modal-buttons">
                <button id="startFresh" class="modal-button secondary">Start Fresh</button>
                <button id="restoreSession" class="modal-button primary">Restore Session</button>
            </div>
        `,n.appendChild(a),document.body.appendChild(n),a.querySelector("#startFresh").addEventListener("click",()=>{document.body.removeChild(n),localStorage.removeItem(SESSION_STORAGE_KEY),t(!1)}),a.querySelector("#restoreSession").addEventListener("click",()=>{document.body.removeChild(n),t(!0)}),n.addEventListener("click",e=>{e.target===n&&(document.body.removeChild(n),t(!1))})})}document.addEventListener("DOMContentLoaded",async function(){let e=loadSessionData();e&&await showRestorationDialog(e)?restoreSessionData(e):sessionStartTime=Date.now(),window.addEventListener("beforeunload",function(){powerData.length>0&&saveSessionData()}),setInterval(()=>{powerData.length>0&&saveSessionData()},3e4)});
//# sourceMappingURL=power-saver.d2560047.js.map
