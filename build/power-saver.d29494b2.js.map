{"mappings":"IGuCI,EAAsB,EACtB,EAAsB,EACtB,EAAsB,EACtB,EAAsB,EACtB,EAAsB,EACtB,EAAqB,EACrB,EAAqB,EACrB,EAAqB,EACrB,EAAqB,EACrB,EAAqB,ED1CzB,MAAM,EAAsB,oBAO5B,SAAS,EAAgB,CAAS,EAC9B,GAAI,CACA,IAAM,EAAc,CAChB,UAAW,KAAK,GAAG,GACnB,UAAW,EAAU,SAAS,CAC9B,eAAgB,EAAU,cAAc,CACxC,mBAAoB,EAAU,kBAAkB,CAChD,iBAAkB,EAAU,gBAAgB,CAC5C,iBAAkB,EAAU,gBAAgB,AAChD,EAEA,aAAa,OAAO,CAAC,EAAqB,KAAK,SAAS,CAAC,GAC7D,CAAE,MAAO,EAAO,CACZ,QAAQ,IAAI,CAAC,+BAAgC,EACjD,CACJ,CAmCA,SAAS,IACL,aAAa,UAAU,CAAC,EAC5B,CC3DA,MAAM,EAAkB,CACpB,MAAO,IACP,MAAO,IACP,MAAO,IACP,MAAO,IACP,MAAO,IACP,KAAM,IACN,KAAM,KACN,KAAM,KACN,KAAM,KACN,KAAM,GACV,EAKA,IAAI,EAAgB,EAAE,CACtB,MAAM,EAA2B,EAAE,CAC7B,EAAoB,EAAE,CAC5B,IAAI,EAAgB,CAChB,MAAO,CAAE,QAAS,EAAG,KAAM,CAAE,EAC7B,MAAO,CAAE,QAAS,EAAG,KAAM,CAAE,EAC7B,MAAO,CAAE,QAAS,EAAG,KAAM,CAAE,EAC7B,MAAO,CAAE,QAAS,EAAG,KAAM,CAAE,EAC7B,MAAO,CAAE,QAAS,EAAG,KAAM,CAAE,EAC7B,KAAM,CAAE,QAAS,EAAG,KAAM,CAAE,EAC5B,KAAM,CAAE,QAAS,EAAG,KAAM,CAAE,EAC5B,KAAM,CAAE,QAAS,EAAG,KAAM,CAAE,EAC5B,KAAM,CAAE,QAAS,EAAG,KAAM,CAAE,EAC5B,KAAM,CAAE,QAAS,EAAG,KAAM,CAAE,CAChC,EAwFO,SAAS,IACP,IAEL,EAAqB,WAAW,CAAG,CAAa,CAAC,MAAM,CAAC,OAAO,EAAI,KACnE,EAAkB,WAAW,CAAG,CAAa,CAAC,MAAM,CAAC,IAAI,EAAI,KAC7D,EAAqB,WAAW,CAAG,CAAa,CAAC,MAAM,CAAC,OAAO,EAAI,KACnE,EAAkB,WAAW,CAAG,CAAa,CAAC,MAAM,CAAC,IAAI,EAAI,KAC7D,EAAqB,WAAW,CAAG,CAAa,CAAC,MAAM,CAAC,OAAO,EAAI,KACnE,EAAkB,WAAW,CAAG,CAAa,CAAC,MAAM,CAAC,IAAI,EAAI,KAC7D,EAAqB,WAAW,CAAG,CAAa,CAAC,MAAM,CAAC,OAAO,EAAI,KACnE,EAAkB,WAAW,CAAG,CAAa,CAAC,MAAM,CAAC,IAAI,EAAI,KAC7D,EAAqB,WAAW,CAAG,CAAa,CAAC,MAAM,CAAC,OAAO,EAAI,KACnE,EAAkB,WAAW,CAAG,CAAa,CAAC,MAAM,CAAC,IAAI,EAAI,KAC7D,EAAoB,WAAW,CAAG,CAAa,CAAC,KAAK,CAAC,OAAO,EAAI,KACjE,EAAiB,WAAW,CAAG,CAAa,CAAC,KAAK,CAAC,IAAI,EAAI,KAC3D,EAAoB,WAAW,CAAG,CAAa,CAAC,KAAK,CAAC,OAAO,EAAI,KACjE,EAAiB,WAAW,CAAG,CAAa,CAAC,KAAK,CAAC,IAAI,EAAI,KAC3D,EAAoB,WAAW,CAAG,CAAa,CAAC,KAAK,CAAC,OAAO,EAAI,KACjE,EAAiB,WAAW,CAAG,CAAa,CAAC,KAAK,CAAC,IAAI,EAAI,KAC3D,EAAoB,WAAW,CAAG,CAAa,CAAC,KAAK,CAAC,OAAO,EAAI,KACjE,EAAiB,WAAW,CAAG,CAAa,CAAC,KAAK,CAAC,IAAI,EAAI,KAC3D,EAAoB,WAAW,CAAG,CAAa,CAAC,KAAK,CAAC,OAAO,EAAI,KACjE,EAAiB,WAAW,CAAG,CAAa,CAAC,KAAK,CAAC,IAAI,EAAI,KAC/D,CAKO,SAAS,IAEZ,IAAK,IAAM,KADX,EAAgB,EAAE,CACG,OAAO,IAAI,CAAC,IAC7B,CAAa,CAAC,EAAO,CAAC,OAAO,CAAG,EAChC,CAAa,CAAC,EAAO,CAAC,IAAI,CAAG,EAEjC,GACJ,CCzJO,MAAM,EAAW,CAEpB,kBAAmB,KACnB,eAAgB,KAChB,oBAAqB,KAGrB,kBAAmB,KACnB,aAAc,KACd,kBAAmB,KAGnB,WAAY,KACZ,aAAc,KACd,kBAAmB,KACnB,mBAAoB,KACpB,wBAAyB,KAGzB,wBAAyB,KACzB,gBAAiB,KACjB,0BAA2B,KAC3B,cAAe,CACX,KAAM,KACN,IAAK,KACL,IAAK,KACL,MAAO,KACP,aAAc,IAClB,EAGA,qBAAsB,KAGtB,aAAc,KACd,aAAc,KACd,oBAAqB,KACrB,kBAAmB,KACnB,sBAAuB,KACvB,oBAAqB,KACrB,iBAAkB,KAClB,cAAe,KAGf,UAAW,KACX,cAAe,KACf,YAAa,KACb,QAAS,KACT,eAAgB,KAGhB,gBAAiB,KACjB,iBAAkB,KAClB,uBAAwB,IAC5B,EA8DO,SAAS,EAAiB,CAAK,EAClC,GAAI,CAAC,EAAS,iBAAiB,CAAE,OAEjC,IAAM,EAAe,GAAS,IAC9B,CAAA,EAAS,iBAAiB,CAAC,WAAW,CAAG,EACzC,EAAS,iBAAiB,CAAC,YAAY,CAAC,aAAc,EAC1D,CAuBO,SAAS,IACZ,EAAiB,MACb,EAAS,cAAc,EAAE,CAAA,EAAS,cAAc,CAAC,WAAW,CAAG,IAAnE,EACI,EAAS,mBAAmB,EAAE,CAAA,EAAS,mBAAmB,CAAC,WAAW,CAAG,IAA7E,CACJ,CA8BO,SAAS,IACZ,IAAM,EAAM,IAAI,KACV,EAAO,EAAI,WAAW,GACtB,EAAQ,OAAO,EAAI,QAAQ,GAAK,GAAG,QAAQ,CAAC,EAAG,KAC/C,EAAM,OAAO,EAAI,OAAO,IAAI,QAAQ,CAAC,EAAG,KAC9C,MAAO,CAAA,EAAG,EAAK,CAAC,EAAE,EAAM,CAAC,EAAE,EAAA,CAAK,AACpC,CGpLO,eAAe,IAClB,GAAI,aAAc,UACd,GAAI,CAEA,AADW,CAAA,MAAM,UAAU,QAAQ,CAAC,OAAO,CAAC,SAA5C,EACS,gBAAgB,CAAC,UAAW,KAEjC,QAAQ,GAAG,CAAC,yBAChB,EACJ,CAAE,MAAO,EAAK,CACV,QAAQ,KAAK,CAAC,CAAA,EAAG,EAAI,IAAI,CAAC,EAAE,EAAE,EAAI,OAAO,CAAA,CAAE,CAC/C,CAER,CFdA,MAAM,EAA6B,gBAC7B,EAAgD,4BAEhD,EAA+B,4BAUrC,IAAI,EAAmB,KACnB,EAAoB,KACpB,EAA8B,KAC9B,EAAiB,KAIjB,EAAsB,KAKtB,EAAgB,EAChB,EAAgB,EAChB,EAAoB,KAUjB,eAAe,EAAkB,CAAS,CAAE,CAAQ,EAGvD,GAFA,MAAM,AAAA,IAEF,CAAC,UAAU,SAAS,CAAE,YACtB,EAAU,cAAc,CAAC,uCAI7B,GAAI,CACA,EAAU,cAAc,CAAC,gCAGzB,EAAmB,MAAM,UAAU,SAAS,CAAC,aAAa,CAAC,CACvD,QAAS,CACL,CACI,SAAU,CAAC,EAA2B,AAC1C,EACH,AACL,GAEA,EAAU,cAAc,CAAC,2BACrB,EAAS,iBAAiB,EAC1B,CAAA,EAAS,iBAAiB,CAAC,WAAW,CAAG,CAAC,QAAQ,EAAE,EAAiB,IAAI,EAAI,iBAAA,CAAkB,AAAlB,EAGjF,EAAiB,gBAAgB,CAAC,yBAA0B,KACxD,GAAyB,EAAW,EACxC,GAEA,IAAM,EAAS,MAAM,EAAiB,IAAI,CAAC,OAAO,GAC5C,EAAU,MAAM,EAAO,iBAAiB,CAAC,GACzC,EAAiB,MAAM,EAAQ,iBAAiB,CAClD,GAIJ,GAAI,CACA,IAAM,EAAwB,MAAM,EAAQ,iBAAiB,CAxEvB,wBA4ErB,OAAM,EAAsB,SAAS,EAG1D,CAAE,KAAM,CAER,CAUA,OAPA,MAAM,EAAe,kBAAkB,GACvC,EAAe,gBAAgB,CAAC,6BAA8B,AAAC,QAsWvC,EArWG,EAqWI,EArWG,EAsWtC,IAKM,EAAQ,AALA,EAAM,MAAM,CAAC,KAAK,CAKZ,QAAQ,CADb,EACsB,CAAA,GAErC,EAAU,kBAAkB,CAAC,EA5WzB,GAEA,EAAU,cAAc,CAAC,iCAElB,CAAA,CACX,CAAE,MAAO,EAAO,CAQZ,OAPA,EAAU,cAAc,CAAC,CAAC,OAAO,EAAE,EAAM,OAAO,CAAA,CAAE,EAClD,QAAQ,KAAK,CAAC,qBAAsB,GAChC,GACA,EAAiB,mBAAmB,CAAC,yBAA0B,KAC3D,GAAyB,EAAW,EACxC,GAEG,CAAA,CACX,CACJ,CAOO,eAAe,EAAwB,CAAS,CAAE,CAAQ,EAG7D,GAFA,MAAM,AAAA,IAEF,CAAC,UAAU,SAAS,CAAE,YACtB,EAAU,cAAc,CAAC,uCAI7B,GAAI,CAiBA,OAhBA,EAAU,cAAc,CAAC,2BACrB,EAAS,kBAAkB,EAC3B,CAAA,EAAS,kBAAkB,CAAC,WAAW,CAAG,eAD9C,EAKA,EAAoB,MAAM,UAAU,SAAS,CAAC,aAAa,CAAC,CACxD,QAAS,CACL,CACI,SAAU,CAAC,aAAa,AAC5B,EACH,CACD,iBAAkB,CAAC,qBAAsB,kBAAkB,AAC/D,GAEA,MAAM,EAAkB,EAAmB,EAAW,GAC/C,CAAA,CAEX,CAAE,MAAO,EAAO,CAMZ,OALA,EAAU,cAAc,CAAC,CAAC,OAAO,EAAE,EAAM,OAAO,CAAA,CAAE,EAC9C,EAAS,kBAAkB,EAC3B,CAAA,EAAS,kBAAkB,CAAC,WAAW,CAAG,mBAD9C,EAGA,QAAQ,KAAK,CAAC,qBAAsB,GAC7B,CAAA,CACX,CACJ,CAQA,eAAe,EAAkB,CAAM,CAAE,CAAS,CAAE,CAAQ,EACxD,EAAU,cAAc,CAAC,2BAGzB,IAAM,EAAa,MAAM,EAAsB,EAC3C,CAAA,EAAS,YAAY,EACrB,CAAA,EAAS,YAAY,CAAC,WAAW,CAAG,CAAC,QAAQ,EAAE,EAAA,CAAY,AAAZ,EAInD,EAAsB,SAqXO,EAAW,EAAX,EApXD,EAoXY,EApXD,EAqXvC,EAAU,cAAc,CAAC,wBACrB,EAAS,kBAAkB,EAC3B,CAAA,EAAS,kBAAkB,CAAC,WAAW,CAAG,cAD9C,EAGI,EAAS,YAAY,EACrB,CAAA,EAAS,YAAY,CAAC,WAAW,CAAG,EADxC,EAGA,EAAoB,KACpB,EAAU,iBAAiB,CAAC,GACxB,EAAU,cAAc,EACxB,EAAU,cAAc,EA9X5B,EACA,EAAO,gBAAgB,CAAC,yBAA0B,GAElD,IAAM,EAAW,MAAM,EAAO,IAAI,CAAC,OAAO,GACpC,EAAY,MAAM,EAAS,iBAAiB,CAAC,cAC7C,EAAmB,MAAM,EAAU,iBAAiB,CAAC,yBAG3D,OAAM,EAAiB,kBAAkB,GACzC,EAAiB,gBAAgB,CAAC,6BAA8B,AAAC,QCpK7C,ED6bQ,EAxRD,EAwRQ,EAxRD,EA0RlC,IAAM,EC3bN,AAFuB,AAAC,CAAA,AAnBC,EAkBX,CADM,ED8bN,EAAM,MAAM,CAAC,KAAK,EC7bZ,QAAQ,CAjBR,EAkBY,GAA0B,EAG/C,EAAM,SAAS,CApBN,EAoB4C,CAAA,GAGzD,EAAM,QAAQ,CAvBD,GD+cpB,EAAU,iBAAiB,CAAC,EA1R5B,GAEA,EAAU,cAAc,CAAC,cACrB,EAAS,kBAAkB,EAC3B,CAAA,EAAS,kBAAkB,CAAC,WAAW,CAAG,WAD9C,CAGJ,CAOA,eAAe,EAAsB,CAAM,EACvC,IAAI,EAAa,EAAO,IAAI,EAAI,iBAEhC,GAAI,CACA,IAAM,EAAS,MAAM,EAAO,IAAI,CAAC,OAAO,GAGxC,GAAI,CACA,IAAM,EAAoB,MAAM,EAAO,iBAAiB,CAAC,sBAGnD,EAAe,MAAM,EAAyB,EAAmB,2BACnE,CAAA,GACA,CAAA,GAAc,CAAC,EAAE,EAAE,EAAa,CAAC,CAAC,AAAD,EAIrC,IAAM,EAAQ,MAAM,EAAyB,EAAmB,sBAC5D,CAAA,GACA,CAAA,GAAc,CAAC,CAAC,EAAE,EAAA,CAAO,AAAP,CAG1B,CAAE,MAAO,EAAG,CAEZ,CAEJ,CAAE,MAAO,EAAG,CAEZ,CAOA,OAJI,EAAO,EAAE,EACT,CAAA,GAAc,CAAC,EAAE,EAAE,EAAO,EAAE,CAAC,KAAK,CAAC,IAA0B,CAAC,CAAC,AAAD,EAG3D,CACX,CAQA,eAAe,EAAyB,CAAO,CAAE,CAAkB,EAC/D,GAAI,CACA,IAAM,EAAiB,MAAM,EAAQ,iBAAiB,CAAC,GACjD,EAAQ,MAAM,EAAe,SAAS,GAC5C,OAAO,IAAI,cAAc,MAAM,CAAC,EACpC,CAAE,MAAO,EAAG,CAER,OAAO,IACX,CACJ,CAOO,eAAe,EAA0B,CAAS,CAAE,CAAQ,EAG/D,GAFA,MAAM,AAAA,IAEF,CAAC,UAAU,SAAS,CAAE,YACtB,EAAU,cAAc,CAAC,uCAI7B,GAAI,CACA,EAAU,cAAc,CAAC,2BACrB,EAAS,uBAAuB,EAChC,CAAA,EAAS,uBAAuB,CAAC,WAAW,CAAG,eADnD,EAKI,IACA,aAAa,GACb,EAAoB,MAExB,EAAgB,EAChB,EAAgB,EAEhB,EAA8B,MAAM,UAAU,SAAS,CAAC,aAAa,CAAC,CAClE,QAAS,CACL,CACI,SAAU,CAAC,EAA6B,AAC5C,EACH,AACL,GAEA,EAAU,cAAc,CAAC,2BACrB,EAAS,iBAAiB,EAC1B,CAAA,EAAS,iBAAiB,CAAC,WAAW,CAAG,CAAC,QAAQ,EAAE,EAA4B,IAAI,CAAA,CAAE,AAAF,EAGxF,EAA4B,gBAAgB,CAAC,yBAA0B,SA2QhD,EAAW,EAAX,EA1QG,EA0QQ,EA1QG,EA2QzC,EAAU,cAAc,CAAC,wBACrB,EAAS,uBAAuB,EAChC,CAAA,EAAS,uBAAuB,CAAC,WAAW,CAAG,cADnD,EAGI,EAAS,iBAAiB,EAC1B,CAAA,EAAS,iBAAiB,CAAC,WAAW,CAAG,EAD7C,EAGA,EAA8B,KAC9B,EAAU,eAAe,CAAC,GACtB,EAAU,cAAc,EACxB,EAAU,cAAc,GAIxB,IACA,aAAa,GACb,EAAoB,MAExB,EAAgB,EAChB,EAAgB,CA7RZ,GAEA,IAAM,EAAS,MAAM,EAA4B,IAAI,CAAC,OAAO,GACvD,EAAU,MAAM,EAAO,iBAAiB,CAAC,GACzC,EAAiB,MAAM,EAAQ,iBAAiB,CA/RlB,mBA2SpC,OAVA,MAAM,EAAe,kBAAkB,GACvC,EAAe,gBAAgB,CAAC,6BAA8B,AAAC,KAC3D,AAuKZ,SAAuC,CAAK,CAAE,CAAS,EACnD,IAAM,EAAQ,EAAM,MAAM,CAAC,KAAK,CAC1B,EAAQ,EAAM,QAAQ,CAAC,GACzB,EAAS,EAUb,GAJI,AAJ6B,EAAR,GAKrB,CAAA,GAAU,CAAA,EAJW,AAAQ,EAAR,EAOH,CAClB,IAAM,EAA6B,EAAM,SAAS,CAAC,EAAQ,CAAA,GACrD,EAAqB,EAAM,SAAS,CAAC,EAAS,EAAG,CAAA,GAEvD,GAAI,EAAgB,EAAG,CACnB,IAAM,EAAO,EAA6B,EACpC,EAAO,AAAC,CAAA,EAAqB,CAAA,EAAiB,KACpD,GAAI,EAAO,EAAG,CAEV,IAAM,EAAiB,KAAK,KAAK,CADjB,EAAQ,EAAQ,IAGhC,EAAU,eAAe,CAAC,GAGtB,GACA,aAAa,GAIjB,EAAoB,WAAW,KAC3B,EAAU,eAAe,CAAC,GAC1B,EAAoB,IACxB,EAveiB,IAwerB,CACJ,CACA,EAAgB,EAChB,EAAgB,CACpB,CACJ,EAhN0C,EAAO,EACzC,GAEA,EAAU,cAAc,CAAC,cACrB,EAAS,uBAAuB,EAChC,CAAA,EAAS,uBAAuB,CAAC,WAAW,CAAG,WADnD,EAIO,CAAA,CACX,CAAE,MAAO,EAAO,CAMZ,OALA,EAAU,cAAc,CAAC,CAAC,OAAO,EAAE,EAAM,OAAO,CAAA,CAAE,EAC9C,EAAS,uBAAuB,EAChC,CAAA,EAAS,uBAAuB,CAAC,WAAW,CAAG,mBADnD,EAGA,QAAQ,KAAK,CAAC,mCAAoC,GAC3C,CAAA,CACX,CACJ,CAMO,eAAe,EAAgB,CAAQ,EAC1C,GAAI,CAAC,UAAU,SAAS,CAAE,YACtB,QAAQ,KAAK,CAAC,uCAIlB,GAAI,CACI,EAAS,sBAAsB,EAC/B,CAAA,EAAS,sBAAsB,CAAC,KAAK,CAAC,OAAO,CAAG,MADpD,EAGI,EAAS,gBAAgB,GACzB,EAAS,gBAAgB,CAAC,WAAW,CAAG,kCACxC,EAAS,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAG,SAI9C,EAAiB,MAAM,UAAU,SAAS,CAAC,aAAa,CAAC,CACrD,QAAS,CACL,CACI,SAAU,CAAC,EAA2B,AAC1C,EACH,AACL,GAEI,EAAS,gBAAgB,EACzB,CAAA,EAAS,gBAAgB,CAAC,WAAW,CAAG,6BAD5C,EAIA,EAAe,gBAAgB,CAAC,yBAA0B,KACtD,GAAkB,EACtB,GAEA,IAAM,EAAS,MAAM,EAAe,IAAI,CAAC,OAAO,GAC1C,EAAU,MAAM,EAAO,iBAAiB,CAAC,GACzC,EAAiB,MAAM,EAAQ,iBAAiB,CAClD,GAcJ,OAVA,MAAM,EAAe,kBAAkB,GACvC,EAAe,gBAAgB,CAAC,6BAA8B,AAAC,QAmJpC,EAlJG,EAkJI,EAlJG,EAoJzC,IAAM,EAAO,IAAI,WAAW,AADd,EAAM,MAAM,CAAC,KAAK,CACE,MAAM,EAGpC,EAAqB,CAErB,CAAA,EAAK,MAAM,EAAI,GAEf,CAAA,EAAqB,CAAI,CAAC,EAAE,CAAI,CAAA,CAAI,CAAC,EAAE,EAAI,CAAA,CAAA,EAG3C,EAAS,eAAe,EACxB,CAAA,EAAS,eAAe,CAAC,WAAW,CAAG,CAD3C,CA7JI,GAEI,EAAS,gBAAgB,GACzB,EAAS,gBAAgB,CAAC,WAAW,CAAG,iBACxC,EAAS,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAG,QAGvC,CAAA,CACX,CAAE,MAAO,EAAO,CAoBZ,OAnBI,EAAS,gBAAgB,EACzB,CAAA,EAAS,gBAAgB,CAAC,WAAW,CAAG,CAAC,WAAW,EAAE,EAAM,OAAO,CAAA,CAAE,AAAF,EAEvE,QAAQ,KAAK,CAAC,yBAA0B,GACpC,IACA,EAAe,mBAAmB,CAAC,yBAA0B,KACzD,GAAkB,EACtB,GACA,EAAiB,MAGrB,WAAW,KACH,EAAS,gBAAgB,EACzB,CAAA,EAAS,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAG,MAD9C,EAGI,EAAS,sBAAsB,EAC/B,CAAA,EAAS,sBAAsB,CAAC,KAAK,CAAC,OAAO,CAAG,OADpD,CAGJ,EAAG,KACI,CAAA,CACX,CACJ,CAMO,SAAS,EAAmB,CAAQ,EACnC,GAAkB,EAAe,IAAI,CAAC,SAAS,EAC/C,EAAe,IAAI,CAAC,UAAU,GAElC,EAAiB,KACb,EAAS,eAAe,EACxB,CAAA,EAAS,eAAe,CAAC,WAAW,CAAG,IAD3C,EAGI,EAAS,gBAAgB,EACzB,CAAA,EAAS,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAG,MAD9C,EAGI,EAAS,sBAAsB,EAC/B,CAAA,EAAS,sBAAsB,CAAC,KAAK,CAAC,OAAO,CAAG,OADpD,CAGJ,CAiHA,SAAS,GAAyB,CAAS,CAAE,CAAQ,EACjD,EAAU,cAAc,CAAC,wBACrB,EAAS,iBAAiB,EAC1B,CAAA,EAAS,iBAAiB,CAAC,WAAW,CAAG,EAD7C,EAGI,IACA,EAAiB,mBAAmB,CAAC,yBAA0B,KAC3D,GAAyB,EAAW,EACxC,GACA,EAAmB,MAEvB,EAAU,cAAc,EAC5B,CAwCA,SAAS,GAAkB,CAAQ,EAC/B,EAAiB,KACb,EAAS,eAAe,EACxB,CAAA,EAAS,eAAe,CAAC,WAAW,CAAG,IAD3C,EAGI,EAAS,gBAAgB,GACzB,EAAS,gBAAgB,CAAC,WAAW,CAAG,mBACxC,EAAS,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAG,SAE9C,WAAW,KACH,EAAS,gBAAgB,EACzB,CAAA,EAAS,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAG,MAD9C,EAGI,EAAS,sBAAsB,EAC/B,CAAA,EAAS,sBAAsB,CAAC,KAAK,CAAC,OAAO,CAAG,OADpD,CAGJ,EAAG,IACP,CK/kBA,SAAS,GAAc,CAAS,EAC9B,OAAO,AAAoB,KAAA,IAApB,EAAU,KAAK,EAAkB,EAAU,KAAK,CAAG,CAC5D,CAgBA,SAAS,GAAiB,CAAS,EACjC,IAAM,EAAc,CAClB,KAAM,AAAC,GAAS,CAAC,MAAM,EAAE,IAAI,KAAK,GAAM,WAAW,GAAG,OAAO,CAAC,CAC9D,UAAW,AAAC,GAAO;A;AAEd,SAAA,EAAE,EAAG;AACC,eAAA,CAAC,CAAC,IAAI,GACjB,QAAS,AAAC,GAAQ,CAAC,SAAS,EAAE,EAAI,UAAU,CAAC,CAC7C,MAAO,AAAC,GAAO;A;A;AAGJ,eAAA,EAAE,EAAG;A;AAEP,aAAA,CAAC,CAAC,IAAI,EACjB,EAEM,EAAW,OAAO,IAAI,CAAC,GAC1B,GAAG,CAAC,AAAC,GACJ,AAAI,AAAmB,KAAA,IAAnB,CAAS,CAAC,EAAI,CACT,GAEF,CAAW,CAAC,EAAI,CAAC,CAAS,CAAC,EAAI,GAEvC,MAAM,CAAC,SACP,IAAI,CAAC,MAER,MAAO;A;AAEP,EAAA,EAAE;AACS,aAAA,CAAC,CAAC,IAAI,EACnB,CAOA,SAAS,GAAmB,CAAI,EAC9B,MAAO,CACL,KAAM,EAAK,SAAS,CACpB,GAAI,AAAe,KAAA,IAAf,EAAK,KAAK,EAAkB,CAAE,MAAO,EAAK,KAAK,AAAC,CAAC,CACrD,GAAI,AAAmB,KAAA,IAAnB,EAAK,SAAS,EAAkB,CAAE,UAAW,EAAK,SAAS,AAAC,CAAC,CACjE,GAAI,AAAiB,KAAA,IAAjB,EAAK,OAAO,EAAkB,CAAE,QAAS,EAAK,OAAO,AAAC,CAAC,AAC7D,CACF,CDnDO,SAAS,GAAa,CAAS,EAClC,GAAI,CAAC,GAAa,CAAC,MAAM,OAAO,CAAC,IAAc,AAAqB,IAArB,EAAU,MAAM,CAC3D,MAAM,AAAI,MAAM,mDAKpB,GADa,IAAI,KAAK,CADH,KAAK,SAAS,CAAC,EAAW,KAAM,GACjB,CAAE,CAAE,KAhBhC,iCAgBsD,GACzC,CAAC,WAAW,EAAE,AAAA,IAAuB,KAAK,CAAC,CAClE,CAOO,SAAS,GAAY,CAAS,EACjC,GAAI,CAAC,GAAa,CAAC,MAAM,OAAO,CAAC,IAAc,AAAqB,IAArB,EAAU,MAAM,CAC3D,MAAM,AAAI,MAAM,kDAGpB,IAAI,EAAa,sCACjB,EAAU,OAAO,CAAC,AAAC,IAEf,IAAM,EAAY,EAAI,SAAS,EAAI,GAC7B,EAAQ,EAAI,KAAK,EAAI,GACrB,EAAY,EAAI,SAAS,EAAI,GAC7B,EAAU,EAAI,OAAO,EAAI,GAC/B,GAAc,CAAA,EAAG,EAAU,CAAC,EAAE,EAAM,CAAC,EAAE,EAAU,CAAC,EAAE;AAAU,CAAC,AACnE,GAGA,GADa,IAAI,KAAK,CAAC,EAAW,CAAE,CAAE,KAvCjC,yBAuCsD,GACxC,CAAC,WAAW,EAAE,AAAA,IAAuB,IAAI,CAAC,CACjE,CAOO,SAAS,GAAY,CAAS,EACjC,GAAI,CAAC,GAAa,CAAC,MAAM,OAAO,CAAC,IAAc,AAAqB,IAArB,EAAU,MAAM,CAC3D,MAAM,AAAI,MAAM,4CAGpB,GAAI,CACA,IAAM,EAAa,ACkC3B,SAA2B,CAAS,EAElC,GAAI,CAAC,MAAM,OAAO,CAAC,IAAc,AAAqB,IAArB,EAAU,MAAM,CAC/C,MAAO,GAIT,IAAM,EAAkB,EAAU,MAAM,CACtC,AAAC,QAzFqB,SA0FpB,GACA,AAAqB,UAArB,OAAO,GA1FJ,AAAc,KAAA,KADG,EA4FH,EAAU,SAAS,GA3FN,CAAC,MAAM,IAAI,KAAK,GAAW,OAAO,MA8FpE,GAAI,AAA2B,IAA3B,EAAgB,MAAM,CACxB,MAAO,GAST,IAAM,EAAc,AA7CtB,SAA+B,CAAU,EACvC,IAAM,EAAS,IAAI,EAAW,CAG9B,KAAO,EAAO,MAAM,CAAG,GAAK,CAAC,GAAc,CAAM,CAAC,EAAE,GAClD,EAAO,KAAK,GAId,KAAO,EAAO,MAAM,CAAG,GAAK,CAAC,GAAc,CAAM,CAAC,EAAO,MAAM,CAAG,EAAE,GAClE,EAAO,GAAG,GAGZ,OAAO,CACT,EA0BwB,EACnB,GAAG,CAAC,IACJ,IAAI,CAAC,CAAC,EAAG,IAAM,EAAE,IAAI,CAAG,EAAE,IAAI,GAKjC,GAAI,AAAuB,IAAvB,EAAY,MAAM,CACpB,MAAO,GAIT,IAAM,EAAc,EAAY,GAAG,CAAC,IAAkB,IAAI,CAAC,MAErD,EAAe,IAAI,KADP,CAAW,CAAC,EAAE,CAAC,IAAI,EACI,WAAW,GAsBpD,MAnBe,CAAC;A;A;A;A;A;A;A;AAQR,UAAA,EAAE,EAAa;A;AAEH,sBAAA,EAAE,EAAa;A;AAE7B,QAAA,EAAE;A;A;A;A;AAKe,yBAAA,CAAC,AAG1B,ED1F6C,GAErC,GAAI,CAAC,EACD,MAAM,AAAI,MAAM,kCAGpB,IAAM,EAAO,IAAI,KAAK,CAAC,EAAW,CAAE,CAAE,KA3DrC,gCA2D0D,GAC3D,GAAa,EAAM,CAAC,WAAW,EAAE,AAAA,IAAuB,IAAI,CAAC,CACjE,CAAE,MAAO,EAAO,CAEZ,MADA,QAAQ,KAAK,CAAC,wBAAyB,GACjC,CACV,CACJ,CAOA,SAAS,GAAa,CAAI,CAAE,CAAQ,EAChC,GAAI,CACA,GAAI,CAAC,GAAQ,CAAE,CAAA,aAAgB,IAAA,EAC3B,MAAM,AAAI,MAAM,sCAGpB,GAAI,CAAC,GAAY,AAAoB,UAApB,OAAO,EACpB,MAAM,AAAI,MAAM,0CAGpB,IAAM,EAAM,IAAI,eAAe,CAAC,GAC1B,EAAI,SAAS,aAAa,CAAC,IACjC,CAAA,EAAE,IAAI,CAAG,EACT,EAAE,QAAQ,CAAG,EACb,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAE,KAAK,GACP,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,IAAI,eAAe,CAAC,EACxB,CAAE,MAAO,EAAO,CAEZ,MADA,QAAQ,KAAK,CAAC,8BAA+B,GACvC,CACV,CACJ,CAkBO,eAAe,GAAU,CAAI,EAChC,GAAM,CAAA,UAAE,CAAS,CAAE,CAAG,EAEtB,GAAI,CAAC,GAAa,CAAC,MAAM,OAAO,CAAC,IAAc,AAAqB,IAArB,EAAU,MAAM,CAC3D,MAAM,AAAI,MAAM,4CAGpB,IAAM,EAAS,EAAE,CASjB,IAAK,GAAM,CAAA,KAAE,CAAI,CAAA,GAAE,CAAE,CAAE,EARP,CACZ,CAAE,KAAM,eAAgB,GAAI,IAAM,GAAa,EAAW,EAC1D,CAAE,KAAM,cAAe,GAAI,IAAM,GAAY,EAAW,EACxD,CAAE,KAAM,MAAO,GAAI,IAAM,GAAY,EAAW,EACnD,CAImC,CAChC,GAAI,CACA,IACA,QAAQ,GAAG,CAAC,CAAC,SAAE,EAAE,EAAK,SAAS,CAAC,CACpC,CAAE,MAAO,EAAO,CACZ,EAAO,IAAI,CAAC,CAAA,EAAG,EAAK,EAAE,EAAE,EAAM,OAAO,CAAA,CAAE,CAC3C,CAEA,MAlCG,IAAI,QAAQ,AAAA,GAAW,WAAW,EA1GrB,KA6IpB,CAGA,GAAI,EAAO,MAAM,CAAG,EAAG,CACnB,IAAM,EAAe,CAAC;AAAsB,EAAE,EAAO,IAAI,CAAC,MAAA,CAAO,AAEjE,OADA,QAAQ,IAAI,CAAC,iBAAkB,GACzB,AAAI,MAAM,EACpB,CAEA,QAAQ,GAAG,CAAC,wCAChB,CD3IA,SAAS,GAAkB,CAAK,CAAE,CAAU,EACxC,IAAM,EAAU,CAAC,aAAa,EAAE,EAAW,SAAS,EAAE,EAAM,OAAO,CAAA,CAAE,CACrE,QAAQ,KAAK,CAAC,EAAS,GACvB,MAAM,EACV,CA2GA,SAAS,GAAkB,CAAK,CAAE,CAAW,EACzC,IAAM,EAAQ,SAAS,aAAa,CAAC,OAwBrC,OAvBA,EAAM,SAAS,CAAG,eAElB,EAAM,SAAS,CAAG;A;A;AAGyB,+CAAA,EAAE,EAAM;A;A;AAGL,kDAAA,EAAE,EAAY;A;A;AAG5D,IAAA,CAAC,CAID,AADiB,EAAM,aAAa,CAAC,uBAC5B,gBAAgB,CAAC,QAAS,IAAM,GAAW,IAEpD,EAAM,gBAAgB,CAAC,QAAS,AAAC,IACzB,EAAE,MAAM,GAAK,GACb,GAAW,EAEnB,GAEO,CACX,CAOA,SAAS,GAAkB,CAAK,CAAE,CAAO,EACrC,IAAM,EAAmB,EAAM,aAAa,CAAC,yBAE7C,EAAQ,OAAO,CAAC,AAAC,IACb,IAAM,EAAS,SAAS,aAAa,CAAC,UAatC,GAZA,EAAO,SAAS,CAAG,CAAC,oBAAoB,EAAE,EAAa,SAAS,EAAI,GAAA,CAAI,CACxE,EAAO,QAAQ,CAAG,EAAa,QAAQ,EAAI,CAAA,EAE3C,EAAO,SAAS,CAAG;AACT,kBAAA,EAAE,EAAa,IAAI,CAAC;AAC1B,YAAA,EAAE,EAAa,WAAW,CAAG,CAAC,+CAA+C,EAAE,EAAa,WAAW,CAAC,QAAQ,CAAC,CAAG;AACxH,QAAA,CAAC,CAED,EAAO,gBAAgB,CAAC,QAAS,EAAa,OAAO,EACrD,EAAiB,WAAW,CAAC,GAGzB,EAAa,SAAS,EAAI,EAAa,SAAS,CAAC,QAAQ,CAAC,cAAe,CACzE,IAAM,EAAY,SAAS,aAAa,CAAC,MACzC,CAAA,EAAU,SAAS,CAAG,yBACtB,EAAU,SAAS,CAAG,kCACtB,EAAiB,WAAW,CAAC,EACjC,CACJ,EACJ,CAMA,SAAS,GAAU,CAAK,EACpB,SAAS,IAAI,CAAC,WAAW,CAAC,GAE1B,sBAAsB,KAClB,EAAM,SAAS,CAAC,GAAG,CAAC,OACxB,EACJ,CAMA,SAAS,GAAW,CAAK,EACrB,EAAM,SAAS,CAAC,MAAM,CAAC,QACvB,WAAW,KACH,EAAM,UAAU,EAChB,SAAS,IAAI,CAAC,WAAW,CAAC,EAElC,EAvM6B,IAwMjC,CIvMA,SAAS,GAAoB,CAAa,CAAE,CAAa,CAAE,EAAmB,CAAA,CAAI,CAAE,EAAmB,IAAI,EACvG,IAAI,EAAY,EAGZ,GACA,EAAc,SAAS,CAAC,GAAG,CAAC,UAC5B,EAAc,KAAK,CAAC,OAAO,CAAG,UAE9B,EAAc,SAAS,CAAC,MAAM,CAAC,UAC/B,EAAc,KAAK,CAAC,OAAO,CAAG,QAGlC,IAAM,EAAU,KACZ,CAAA,EAAY,CAAC,CAAb,GAGI,EAAc,KAAK,CAAC,OAAO,CAAG,QAC9B,EAAc,SAAS,CAAC,GAAG,CAAC,YAE5B,EAAc,KAAK,CAAC,OAAO,CAAG,OAC9B,EAAc,SAAS,CAAC,MAAM,CAAC,WAG/B,GACA,GAER,EAKA,OAHA,EAAc,gBAAgB,CAAC,QAAS,GAGjC,IAAM,EAAc,mBAAmB,CAAC,QAAS,EAC5D,CAiKA,SAAS,KACL,IAAM,EAAY,SAAS,aAAa,CAAC,cAEzC,GAAI,CAAC,EAAW,OAOhB,IAAM,EAAc,SAAS,aAAa,CAAC,2BACvC,IAGA,AADsB,EAAY,gBAAgB,CAAC,2BACrC,OAAO,CAAC,AAAC,IAEnB,EAAU,UAAU,CAAC,YAAY,CAAC,EAAS,EAAU,WAAW,CACpE,GACA,EAAY,MAAM,IAKtB,EAAU,SAAS,CAAC,MAAM,CAAC,yBAC/B,CX5LA,IAAI,GAAY,EAAE,CACd,GAAiB,EACjB,GAAqB,EACrB,GAAmB,EACnB,GAAmB,KACnB,GAAqB,KAoDzB,MAAM,GAAY,CAChB,IAAI,WAAY,CAAE,OAAO,EAAW,EACpC,IAAI,gBAAiB,CAAE,OAAO,EAAgB,EAC9C,IAAI,oBAAqB,CAAE,OAAO,EAAoB,EACtD,IAAI,kBAAmB,CAAE,OAAO,EAAkB,EAClD,IAAI,kBAAmB,CAAE,OAAO,EAAkB,EAClD,oBA7BF,WAEE,GAAU,MAAM,CAAG,EAGnB,AAAA,IAGA,GAAiB,EACjB,GAAqB,EACrB,GAAmB,EACnB,GAAmB,KAGnB,AAAA,IAGA,AAAA,GACF,EAYE,SAAA,CACF,EAGM,GAAsB,CAC1B,mBAAoB,AAAC,IACnB,AAAA,EAAiB,GACjB,GAAiB,EAGjB,AErCG,SAAyB,CAAK,EACjC,IAAM,EAAM,KAAK,GAAG,GACpB,EAAc,IAAI,CAAC,CAAE,UAAW,EAAK,MAAO,CAAM,GAGlD,IAAM,EAAkB,EAnEA,KAwExB,GAJA,EAAgB,EAAc,MAAM,CAAC,AAAC,GAAY,EAAQ,SAAS,CAAG,GAGtE,EAAyB,IAAI,CAAC,CAAE,UAAW,EAAK,MAAO,CAAM,GACzD,EAAyB,MAAM,CAAG,GAAK,CAAwB,CAAC,EAAE,CAAC,SAAS,EAAK,EAAM,IAAY,CAEnG,IAAM,EAAmB,KAAK,KAAK,CAAC,EAAyB,MAAM,CAAC,CAAC,EAAK,IAAM,EAAM,EAAE,KAAK,CAAE,GAAK,EAAyB,MAAM,EAInI,IAHA,EAAkB,IAAI,CAAC,GAEvB,EAAyB,MAAM,CAAC,EAAG,EAAyB,MAAM,EAC3D,EAAkB,MAAM,CAAG,IAC9B,EAAkB,KAAK,GAG3B,IAAK,GAAM,CAAC,EAAW,EAAS,GAAI,OAAO,OAAO,CAAC,GAAkB,CACjE,IAAM,EAAW,KAAK,IAAI,CAAC,EAAY,KACvC,GAAI,EAAkB,MAAM,EAAI,EAAU,CAGtC,IAAM,EAAU,KAAK,KAAK,CAAC,AADf,AADO,EAAkB,KAAK,CAAC,CAAC,GACrB,MAAM,CAAC,CAAC,EAAO,IAAY,EAAQ,EAAQ,KAAK,CAAE,GACxC,EACjC,CAAA,CAAa,CAAC,EAAU,CAAC,OAAO,CAAG,EAG/B,EAAU,CAAa,CAAC,EAAU,CAAC,IAAI,EACvC,CAAA,CAAa,CAAC,EAAU,CAAC,IAAI,CAAG,CADpC,CAGJ,MACI,CAAa,CAAC,EAAU,CAAC,OAAO,CAAG,CAE3C,CACA,GACJ,CACJ,EFDoB,EAClB,EACA,eAAgB,KACd,AAAA,IACA,AAAA,IACI,KACF,cAAc,IACd,GAAqB,MAEvB,GAAiB,EACjB,IACF,EACA,eAAgB,AAAC,IACX,AAAA,EAAS,UAAU,EACrB,CAAA,AAAA,EAAS,UAAU,CAAC,WAAW,CAAG,CADpC,CAGF,CACF,EAEM,GAAqB,CACzB,kBAAmB,AAAC,IACd,AAAA,EAAS,cAAc,EACzB,CAAA,AAAA,EAAS,cAAc,CAAC,WAAW,CAAG,CADxC,EAGA,GAAqB,CACvB,EACA,eAAgB,AAAC,IACX,AAAA,EAAS,YAAY,EACvB,CAAA,AAAA,EAAS,YAAY,CAAC,WAAW,CAAG,CADtC,CAGF,EACA,eAAgB,KACd,IACF,CACF,EAEM,GAAmB,CACvB,gBAAiB,AAAC,IACZ,AAAA,EAAS,mBAAmB,EAC9B,CAAA,AAAA,EAAS,mBAAmB,CAAC,WAAW,CAAG,CAD7C,EAGA,GAAmB,CACrB,EACA,eAAgB,AAAC,IACX,AAAA,EAAS,iBAAiB,EAC5B,CAAA,AAAA,EAAS,iBAAiB,CAAC,WAAW,CAAG,CAD3C,CAGF,EACA,eAAgB,KACd,IACF,CACF,EAKA,SAAS,SGVqC,EAAA,EHWd,CAC5B,WI0PO,GAAoB,EAAiB,IAAI,CAAC,SAAS,CJzP1D,UIyQO,GAAqB,EAAkB,IAAI,CAAC,SAAS,CJxQ5D,aIgRO,GAA+B,EAA4B,IAAI,CAAC,SAAS,AJ/QlF,EGbM,EAAS,uBAAuB,EAChC,CAAA,EAAS,uBAAuB,CAAC,KAAK,CAAC,OAAO,CAAG,EAAiB,UAAU,CAAG,OAAS,OAD5F,EAKI,EAAS,eAAe,EACxB,CAAA,EAAS,eAAe,CAAC,KAAK,CAAC,OAAO,CAAG,EAAiB,SAAS,CAAG,OAAS,OADnF,EAKI,EAAS,yBAAyB,EAClC,CAAA,EAAS,yBAAyB,CAAC,KAAK,CAAC,OAAO,CAAG,EAAiB,YAAY,CAAG,OAAS,OADhG,CHIJ,CAyKA,eAAe,KG1RX,EAAS,iBAAiB,CAAG,SAAS,cAAc,CAAC,eACrD,EAAS,cAAc,CAAG,SAAS,cAAc,CAAC,YAClD,EAAS,mBAAmB,CAAG,SAAS,cAAc,CAAC,iBAGvD,EAAS,iBAAiB,CAAG,SAAS,cAAc,CAAC,eACrD,EAAS,YAAY,CAAG,SAAS,cAAc,CAAC,gBAChD,EAAS,iBAAiB,CAAG,SAAS,cAAc,CAAC,qBAGrD,EAAS,UAAU,CAAG,SAAS,cAAc,CAAC,UAC9C,EAAS,YAAY,CAAG,SAAS,cAAc,CAAC,YAChD,EAAS,iBAAiB,CAAG,SAAS,cAAc,CAAC,iBACrD,EAAS,kBAAkB,CAAG,SAAS,cAAc,CAAC,sBACtD,EAAS,uBAAuB,CAAG,SAAS,cAAc,CAAC,2BAG3D,EAAS,uBAAuB,CAAG,SAAS,cAAc,CAAC,iBAC3D,EAAS,eAAe,CAAG,SAAS,cAAc,CAAC,mBACnD,EAAS,yBAAyB,CAAG,SAAS,cAAc,CAAC,6BAG7D,EAAS,oBAAoB,CAAG,SAAS,cAAc,CAAC,wBAGxD,EAAS,YAAY,CAAG,SAAS,cAAc,CAAC,mBAChD,EAAS,YAAY,CAAG,SAAS,cAAc,CAAC,gBAChD,EAAS,mBAAmB,CAAG,SAAS,cAAc,CAAC,uBACvD,EAAS,iBAAiB,CAAG,SAAS,cAAc,CAAC,qBACrD,EAAS,qBAAqB,CAAG,SAAS,cAAc,CAAC,yBACzD,EAAS,mBAAmB,CAAG,SAAS,cAAc,CAAC,uBACvD,EAAS,gBAAgB,CAAG,SAAS,cAAc,CAAC,oBACpD,EAAS,aAAa,CAAG,SAAS,cAAc,CAAC,iBAGjD,EAAS,SAAS,CAAG,SAAS,aAAa,CAAC,eAC5C,EAAS,aAAa,CAAG,SAAS,aAAa,CAAC,YAChD,EAAS,WAAW,CAAG,SAAS,aAAa,CAAC,iBAC9C,EAAS,OAAO,CAAG,SAAS,aAAa,CAAC,aAC1C,EAAS,cAAc,CAAG,SAAS,cAAc,CAAC,kBAGlD,EAAS,eAAe,CAAG,SAAS,cAAc,CAAC,aACnD,EAAS,gBAAgB,CAAG,SAAS,cAAc,CAAC,aACpD,EAAS,sBAAsB,CAAG,SAAS,cAAc,CAAC,mBAGtD,EAAS,kBAAkB,EAAE,CAAA,EAAS,kBAAkB,CAAC,WAAW,CAAG,cAA3E,EACI,EAAS,uBAAuB,EAAE,CAAA,EAAS,uBAAuB,CAAC,WAAW,CAAG,cAArF,ED5DA,EAAuB,SAAS,cAAc,CAAC,kBAC/C,EAAoB,SAAS,cAAc,CAAC,eAC5C,EAAuB,SAAS,cAAc,CAAC,kBAC/C,EAAoB,SAAS,cAAc,CAAC,eAC5C,EAAuB,SAAS,cAAc,CAAC,kBAC/C,EAAoB,SAAS,cAAc,CAAC,eAC5C,EAAuB,SAAS,cAAc,CAAC,kBAC/C,EAAoB,SAAS,cAAc,CAAC,eAC5C,EAAuB,SAAS,cAAc,CAAC,kBAC/C,EAAoB,SAAS,cAAc,CAAC,eAC5C,EAAsB,SAAS,cAAc,CAAC,iBAC9C,EAAmB,SAAS,cAAc,CAAC,cAC3C,EAAsB,SAAS,cAAc,CAAC,iBAC9C,EAAmB,SAAS,cAAc,CAAC,cAC3C,EAAsB,SAAS,cAAc,CAAC,iBAC9C,EAAmB,SAAS,cAAc,CAAC,cAC3C,EAAsB,SAAS,cAAc,CAAC,iBAC9C,EAAmB,SAAS,cAAc,CAAC,cAC3C,EAAsB,SAAS,cAAc,CAAC,iBAC9C,EAAmB,SAAS,cAAc,CAAC,cSsKvC,AXiHa,EWjHJ,oBAAoB,EAC7B,CAAA,AXgHa,EWhHJ,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAG,OADlD,EAnDA,IAAM,EAAY,SAAS,aAAa,CAAC,cACnC,EAAuB,SAAS,cAAc,CAAC,wBAC/C,EAAsB,GAAwB,AAAuC,SAAvC,EAAqB,KAAK,CAAC,OAAO,CAElF,IACI,EACA,EAAU,SAAS,CAAC,GAAG,CAAC,aAExB,EAAU,SAAS,CAAC,MAAM,CAAC,cAKnC,KX0JF,AW/SK,SAA4B,CAAQ,EACvC,GAAI,CAAC,EAAS,YAAY,EAAI,CAAC,EAAS,YAAY,CAAE,OAClD,QAAQ,KAAK,CAAC,qCAAsC,CAChD,aAAc,CAAC,CAAC,EAAS,YAAY,CACrC,aAAc,CAAC,CAAC,EAAS,YAAY,AACzC,GAKJ,EAAS,YAAY,CAAC,gBAAgB,CAAC,QAAS,WAC3B,EAAS,YAAY,CAAC,SAAS,CAAC,QAAQ,CAAC,UAEtD,EAAS,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,UAEvC,EAAS,YAAY,CAAC,SAAS,CAAC,GAAG,CAAC,SAE5C,GAGA,SAAS,gBAAgB,CAAC,QAAS,SAAU,CAAK,EAC1C,AAAC,EAAM,MAAM,CAAC,OAAO,CAAC,oBACtB,EAAS,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,SAE/C,EACJ,EXsRqB,GACnB,AWjRK,SAAkC,CAAQ,EAC7C,GAAI,CAAC,EAAS,mBAAmB,EAAI,CAAC,EAAS,oBAAoB,CAAE,OACjE,QAAQ,KAAK,CAAC,4CAA6C,CACvD,oBAAqB,CAAC,CAAC,EAAS,mBAAmB,CACnD,qBAAsB,CAAC,CAAC,EAAS,oBAAoB,AACzD,GAIJ,GACI,EAAS,mBAAmB,CAC5B,EAAS,oBAAoB,CAC7B,CAAA,EACA,GAER,EXkQ2B,GW1PnB,AX2Pa,EW3PJ,iBAAiB,EAAI,AX2PjB,EW3P0B,SAAS,CAChD,GAAoB,AX0PP,EW1PgB,iBAAiB,CAAE,AX0PnC,EW1P4C,SAAS,CAAE,CAAA,GAEpE,QAAQ,KAAK,CAAC,0CAId,AXoPa,EWpPJ,qBAAqB,EAAI,AXoPrB,EWpP8B,aAAa,CACxD,GAAoB,AXmPP,EWnPgB,qBAAqB,CAAE,AXmPvC,EWnPgD,aAAa,CAAE,CAAA,GAE5E,QAAQ,KAAK,CAAC,+CAId,AX6Oa,EW7OJ,mBAAmB,EAAI,AX6OnB,EW7O4B,WAAW,CACpD,GAAoB,AX4OP,EW5OgB,mBAAmB,CAAE,AX4OrC,EW5O8C,WAAW,CAAE,CAAA,GAExE,QAAQ,KAAK,CAAC,4CX2OpB,AWhOK,SAA4B,CAAQ,CAAE,CAAqB,EAC9D,GAAI,CAAC,EAAS,aAAa,EAAI,CAAC,EAAS,cAAc,CAAE,OACrD,QAAQ,KAAK,CAAC,sCAIlB,IAAI,EAAiB,CAAA,EAErB,EAAS,aAAa,CAAC,gBAAgB,CAAC,QAAS,WAC7C,CAAA,EAAiB,CAAC,CAAlB,GAGI,EAAS,cAAc,CAAC,KAAK,CAAC,OAAO,CAAG,QACxC,EAAS,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,YAMrC,EAAS,cAAc,CAAC,KAAK,CAAC,OAAO,CAAG,OACxC,EAAS,aAAa,CAAC,SAAS,CAAC,MAAM,CAAC,UAExC,IAEI,EAAS,eAAe,EAAE,CAAA,EAAS,eAAe,CAAC,WAAW,CAAG,IAArE,EACI,EAAS,gBAAgB,EAAE,CAAA,EAAS,gBAAgB,CAAC,KAAK,CAAC,OAAO,CAAG,MAAzE,GACI,EAAS,sBAAsB,EAAE,CAAA,EAAS,sBAAsB,CAAC,KAAK,CAAC,OAAO,CAAG,OAArF,CAER,EACJ,EXmMqB,EAAU,IAAM,AAAA,EAAmB,IW3LhD,AX4LS,EW5LA,gBAAgB,CACzB,AX2LS,EW3LA,gBAAgB,CAAC,gBAAgB,CAAC,QAAS,YAChD,AC3KZ,WACI,IAAM,EAAQ,SAAS,aAAa,CAAC,MACrC,CAAA,EAAM,SAAS,CAAG,iBAClB,EAAM,KAAK,CAAC,OAAO,CAAG;A;A;A;A;A;A;A;A;A;A;AAWtB,IAAA,CAAC,CAED,IAAM,EAAe,SAAS,aAAa,CAAC,MAC5C,CAAA,EAAa,SAAS,CAAG,QACzB,EAAa,KAAK,CAAC,OAAO,CAAG;A;A;A;A;A;A;A;A;AAS7B,IAAA,CAAC,CAGD,IAAM,EAAW,SAAS,aAAa,CAAC,SACxC,CAAA,EAAS,KAAK,CAAG,IACjB,EAAS,MAAM,CAAG,IAClB,EAAS,KAAK,CAAC,OAAO,CAAG;A;A;A;A;A;A;AAOzB,IAAA,CAAC,CAED,EAAa,SAAS,CAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,CAAC,CAID,AADoB,EAAa,aAAa,CAAC,iBACnC,WAAW,CAAC,GAGxB,AA0CJ,SAAwB,CAAM,EAC1B,IAAM,EAAM,EAAO,UAAU,CAAC,MACxB,EAAO,EAAO,KAAK,AAGzB,CAAA,EAAI,SAAS,CAAG,UAChB,EAAI,QAAQ,CAAC,EAAG,EAAG,EAAM,GAMzB,IAAM,EAAM,IAAI,KAEhB,CAAA,EAAI,MAAM,CAAG,WACT,EAAI,SAAS,CAAC,EAAK,EAAG,EAAG,EAAM,EACnC,EAEA,EAAI,OAAO,CAAG,eAWM,EATD,EASM,EATD,CAUxB,CAAA,EAAI,SAAS,CAAG,UAChB,EAAI,IAAI,CAAG,aACX,EAAI,SAAS,CAAG,SAGhB,IAAM,EAAW,EAAO,GACxB,IAAK,IAAI,EAAI,EAAG,EAAI,GAAI,IACpB,IAAK,IAAI,EAAI,EAAG,EAAI,GAAI,IAChB,CAAA,AAAC,CAAA,EAAI,CAAA,EAAK,GAAM,GAAK,AAAM,IAAN,GAAW,AAAM,KAAN,GAAY,AAAM,IAAN,GAAW,AAAM,KAAN,CAAM,GAC7D,EAAI,QAAQ,CAAC,EAAI,EAAU,EAAI,EAAU,EAAU,EAM/D,CAAA,EAAI,SAAS,CAAG,UAChB,EAAI,QAAQ,CAAC,AAAO,GAAP,EAAY,AAAO,GAAP,EAAY,AAAO,GAAP,EAAY,AAAO,GAAP,GACjD,EAAI,SAAS,CAAG,UAChB,EAAI,QAAQ,CAAC,UAAW,EAAO,EAAG,EAAO,EAAI,IAC7C,EAAI,QAAQ,CAAC,cAAe,EAAO,EAAG,EAAO,EAAI,GA5BjD,EAEA,EAAI,GAAG,CAAG,wtKACd,EAlEmB,GAEf,EAAM,WAAW,CAAC,GAClB,SAAS,IAAI,CAAC,WAAW,CAAC,GAG1B,IAAM,EAAc,EAAa,aAAa,CAAC,mBACzC,EAAa,KACf,SAAS,IAAI,CAAC,WAAW,CAAC,EAC9B,EAEA,EAAY,gBAAgB,CAAC,QAAS,GACtC,EAAM,gBAAgB,CAAC,QAAS,AAAC,IACzB,EAAE,MAAM,GAAK,GACb,GAER,GAGA,IAAM,EAAe,AAAC,IACJ,WAAV,EAAE,GAAG,GACL,IACA,SAAS,mBAAmB,CAAC,UAAW,GAEhD,EACA,SAAS,gBAAgB,CAAC,UAAW,GAGrC,EAAY,gBAAgB,CAAC,aAAc,KACvC,EAAY,KAAK,CAAC,SAAS,CAAG,mBAC9B,EAAY,KAAK,CAAC,SAAS,CAAG,oCAClC,GAEA,EAAY,gBAAgB,CAAC,aAAc,KACvC,EAAY,KAAK,CAAC,SAAS,CAAG,gBAC9B,EAAY,KAAK,CAAC,SAAS,CAAG,MAClC,EACJ,ID2CgB,AXwLC,EWxLQ,YAAY,EACrB,AXuLC,EWvLQ,YAAY,CAAC,SAAS,CAAC,MAAM,CAAC,SAE/C,GAEA,QAAQ,KAAK,CAAC,iCXMhB,AAAA,EAAS,uBAAuB,EAClC,AAAA,EAAS,uBAAuB,CAAC,gBAAgB,CAAC,QAAS,UAEzD,GAAU,MAAM,CAAG,EACnB,GAAiB,EACjB,AAAA,IAEI,IACF,cAAc,IAGE,MAAM,AAAA,EAAkB,GAAqB,KAIzD,AAAC,IACH,CAAA,GAAmB,KAAK,GAAG,EAD7B,EAKA,GAAqB,YAAY,KAC/B,GAAU,IAAI,CAAC,CACb,UAAW,KAAK,GAAG,GACnB,MAAO,GACP,UAAW,GACX,QAAS,EACX,GAGI,GAAU,MAAM,CAnKA,KAmK6B,GAC/C,AAAA,EAAgB,GAEpB,EAvKwB,KA0KxB,KAEJ,GAIE,AAAA,EAAS,eAAe,EAC1B,AAAA,EAAS,eAAe,CAAC,gBAAgB,CAAC,QAAS,UAE7C,AADc,MAAM,AAAA,EAAwB,GAAoB,IAElE,IAEJ,GAIE,AAAA,EAAS,yBAAyB,EACpC,AAAA,EAAS,yBAAyB,CAAC,gBAAgB,CAAC,QAAS,UAEvD,AADc,MAAM,AAAA,EAA0B,GAAkB,IAElE,IAEJ,GAIE,AAAA,EAAS,OAAO,EAClB,AAAA,EAAS,OAAO,CAAC,gBAAgB,CAAC,QAAS,UIyLpC,GAAkB,EAAe,IAAI,CAAC,SAAS,CJrLlD,AAAA,EAAmB,GAFnB,MAAM,AAAA,EAAgB,EAI1B,GOjCA,IAAM,EAAgB,SAAS,cAAc,CAAC,iBAC1C,CAAA,GACA,EAAc,gBAAgB,CAAC,QAAS,KAhM5C,IAAM,EAAQ,GAAkB,uBAAc,+CAExC,EAAU,CACZ,CACI,KAAM,gCACN,YAAa,sCACb,UAAW,qBACX,QAAS,UACL,GAAI,CACA,MAAM,AAAA,GAAU,CACZ,UAAW,APgUR,GOhUkB,SAAS,AAClC,GACA,GAAW,GACX,MAAM,4CACV,CAAE,MAAO,EAAO,CACZ,GAAkB,EAAO,YAC7B,CACJ,CACJ,EACA,CACI,KAAM,2BACN,YAAa,oCACb,QAAS,KACL,GAAI,CACA,AAAA,GAAa,APkTN,GOlTgB,SAAS,EAChC,GAAW,EACf,CAAE,MAAO,EAAO,CACZ,GAAkB,EAAO,OAC7B,CACJ,CACJ,EACA,CACI,KAAM,0BACN,YAAa,gCACb,QAAS,KACL,GAAI,CACA,AAAA,GAAY,APsSL,GOtSe,SAAS,EAC/B,GAAW,EACf,CAAE,MAAO,EAAO,CACZ,GAAkB,EAAO,MAC7B,CACJ,CACJ,EACA,CACI,KAAM,0BACN,YAAa,6BACb,QAAS,KACL,GAAI,CACA,AAAA,GAAY,AP0RL,GO1Re,SAAS,EAC/B,GAAW,EACf,CAAE,MAAO,EAAO,CACZ,GAAkB,EAAO,MAC7B,CACJ,CACJ,EACH,CAED,GAAkB,EAAO,GACzB,GAAU,EAwIN,GAIJ,IAAM,EAAgB,SAAS,cAAc,CAAC,sBAC1C,CAAA,GACA,EAAc,gBAAgB,CAAC,QAAS,KAlI5C,IAAM,EAAQ,GAAkB,0BAAiB,oCAE3C,EAAU,CACZ,CACI,KAAM,mCACN,YAAa,4CACb,UAAW,SACX,QAAS,KACa,QACd,oFAGA,APwPO,GOxPG,mBAAmB,GAC7B,MAAM,sCACN,GAAW,GAEnB,CACJ,EACH,CAED,GAAkB,EAAO,GACzB,GAAU,EA+GN,GPmIN,KAGA,IAAM,EAAc,AC9UtB,WACI,GAAI,CACA,IAAM,EAAY,aAAa,OAAO,CAAC,GACvC,GAAI,CAAC,EACD,OAAO,KAGX,IAAM,EAAc,KAAK,KAAK,CAAC,GAK/B,GAAI,AAJQ,KAAK,GAAG,GACK,EAAY,SAAS,CApC3B,MAyCf,OADA,aAAa,UAAU,CAAC,GACjB,KAGX,OAAO,CACX,CAAE,MAAO,EAAO,CAGZ,OAFA,QAAQ,IAAI,CAAC,+BAAgC,GAC7C,aAAa,UAAU,CAAC,GACjB,IACX,CACJ,IDwTM,GAEoB,MAxGjB,IAAI,QAAQ,AAAC,IAElB,IAAM,EAAW,SAAS,aAAa,CAAC,MACxC,CAAA,EAAS,SAAS,CAAG,iBAGrB,IAAM,EAAQ,SAAS,aAAa,CAAC,MACrC,CAAA,EAAM,SAAS,CAAG,QAGlB,IAAM,EAAa,KAAK,KAAK,CAAE,AAAA,CAAA,KAAK,GAAG,GAAK,AA8FM,EA9FM,SAAQ,AAAR,EAAc,KAChE,EAAY,AA6FgC,EA7FpB,SAAS,EAAE,QAAU,CAEnD,CAAA,EAAM,SAAS,CAAG;A;A;AAGoB,0CAAA,EAAE,EAAW,kBAAkB,EAAE,EAAU;A;A;A;A;A;A;A;A;AASjF,IAAA,CAAC,CAED,EAAS,WAAW,CAAC,GACrB,SAAS,IAAI,CAAC,WAAW,CAAC,GAG1B,EAAM,aAAa,CAAC,eAAe,gBAAgB,CAAC,QAAS,KAC3D,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,AAAA,IACA,EAAQ,CAAA,EACV,GAEA,EAAM,aAAa,CAAC,mBAAmB,gBAAgB,CAAC,QAAS,KAC/D,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAQ,CAAA,EACV,GAGA,EAAS,gBAAgB,CAAC,QAAS,AAAC,IAC9B,EAAE,MAAM,GAAK,IACf,SAAS,IAAI,CAAC,WAAW,CAAC,GAC1B,EAAQ,CAAA,GAEZ,EACF,GAyDI,AAnDN,SAA4B,CAAW,EACrC,GAAI,KG7L+B,CH+L7B,CAAA,EAAY,SAAS,GACvB,GAAU,MAAM,CAAG,EACnB,GAAU,IAAI,IAAI,EAAY,SAAS,GAIrC,AAA+B,KAAA,IAA/B,EAAY,cAAc,EAAgB,CAAA,GAAiB,EAAY,cAAc,AAAd,EACvE,AAAmC,KAAA,IAAnC,EAAY,kBAAkB,EAAgB,CAAA,GAAqB,EAAY,kBAAkB,AAAlB,EAC/E,AAAiC,KAAA,IAAjC,EAAY,gBAAgB,EAAgB,CAAA,GAAmB,EAAY,gBAAgB,AAAhB,EAC3E,AAAiC,KAAA,IAAjC,EAAY,gBAAgB,EAAgB,CAAA,GAAmB,EAAY,gBAAgB,AAAhB,EGvM3E,AAAiB,KAAA,IAAjB,CAD6B,EH1Ed,CACnB,MAAO,GACP,UAAW,GACX,QAAS,EACX,GGuEa,KAAK,EACZ,EAAiB,EAAO,KAAK,EAG7B,AAAqB,KAAA,IAArB,EAAO,SAAS,EAAkB,EAAS,cAAc,EACzD,CAAA,EAAS,cAAc,CAAC,WAAW,CAAG,EAAO,SAAS,EAAI,IAD9D,EAII,AAAmB,KAAA,IAAnB,EAAO,OAAO,EAAkB,EAAS,mBAAmB,EAC5D,CAAA,EAAS,mBAAmB,CAAC,WAAW,CAAG,EAAO,OAAO,EAAI,IADjE,EH5EF,AAAA,IAGI,GAAU,MAAM,CAAG,GACrB,AUKG,SAAyC,CAAc,EAzD5D,GAAI,CAAC,SAAS,cAAc,CAAC,uBAAwB,CACnD,IAAM,EAAQ,SAAS,aAAa,CAAC,QACrC,CAAA,EAAM,EAAE,CAAG,sBACX,EAAM,WAAW,CAAG;A;A;A;A;AAKhB,QAAA,CAAC,CACL,SAAS,IAAI,CAAC,WAAW,CAAC,EAC5B,CAmDA,IAAM,EAAe,AA1CvB,SAAmC,CAAO,CAAE,CAAe,EACzD,IAAM,EAAe,SAAS,aAAa,CAAC,OAiB5C,OAhBA,EAAa,KAAK,CAAC,OAAO,CAAG;A;A;A;AAIX,oBAAA,EAAE,EAAgB;A;A;A;A;A;A;A;A;A;AAUlC,IAAA,CAAC,CACH,EAAa,WAAW,CAAG,EACpB,CACT,EAsBkB,CAAC,kBAAkB,EAAE,EAAe,uBAAuB,CAAC,CAtEnE,WAyET,SAAS,IAAI,CAAC,WAAW,CAAC,GAG1B,WAAW,KArBX,AAsBqB,EAtBR,KAAK,CAAC,SAAS,CAAG,gCAC/B,WAAW,KACL,AAoBe,EApBF,UAAU,EACzB,AAmBiB,EAnBJ,UAAU,CAAC,WAAW,CAmBlB,EAjBrB,EA9D4B,IAgF5B,EAjF+B,IAkFjC,EVjBoC,GAAU,MAAM,CA6QlD,CAAE,MAAO,EAAO,CAEd,OADA,QAAQ,IAAI,CAAC,kCAAmC,GACzC,CAAA,CACT,CACF,EA6ByB,GAEnB,GAAmB,KAAK,GAAG,GAO/B,OAAO,gBAAgB,CAAC,eAAgB,WAClC,GAAU,MAAM,CAAG,GACrB,AAAA,EAAgB,GAEpB,GAGA,YAAY,KACN,GAAU,MAAM,CAAG,GACrB,AAAA,EAAgB,GAEpB,EAAG,IACL,CAGA,SAAS,gBAAgB,CAAC,mBAAoB","sources":["<anon>","src/script.js","src/session-data.js","src/power-averaging.js","src/ui-management.js","src/bluetooth-connections.js","src/heart-rate.js","src/wake-lock.js","src/export-modals.js","src/data-export.js","src/create-tcx.js","src/notifications.js","src/ui-event-handlers.js","src/app-info-modal.js"],"sourcesContent":["/**\n * Power Saver Main Application\n * Coordinates all modules and manages the application state\n */ // Import all required modules\n/**\n * Session Data Persistence Module\n * Manages localStorage operations for session data persistence\n */ // Constants for session management\nconst $cc35ee5c64337d79$var$SESSION_STORAGE_KEY = 'powerMeterSession';\nconst $cc35ee5c64337d79$var$SESSION_TIMEOUT_MS = 86400000; // 24 hours in milliseconds\n/**\n * Save current session data to localStorage\n * @param {Object} dataStore - Object containing all session data\n */ function $cc35ee5c64337d79$export$3b97cfd23e0d13d8(dataStore) {\n    try {\n        const sessionData = {\n            timestamp: Date.now(),\n            powerData: dataStore.powerData,\n            lastPowerValue: dataStore.lastPowerValue,\n            lastHeartRateValue: dataStore.lastHeartRateValue,\n            lastCadenceValue: dataStore.lastCadenceValue,\n            sessionStartTime: dataStore.sessionStartTime\n        };\n        localStorage.setItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n    } catch (error) {\n        console.warn('Failed to save session data:', error);\n    }\n}\n/**\n * Load session data from localStorage if available and recent\n * @returns {Object|null} Session data object if available and valid, null otherwise\n */ function $cc35ee5c64337d79$export$5ae208508f6870b() {\n    try {\n        const savedData = localStorage.getItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY);\n        if (!savedData) return null;\n        const sessionData = JSON.parse(savedData);\n        const now = Date.now();\n        const sessionAge = now - sessionData.timestamp;\n        // Check if session has expired (older than 24 hours)\n        if (sessionAge > $cc35ee5c64337d79$var$SESSION_TIMEOUT_MS) {\n            localStorage.removeItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY);\n            return null;\n        }\n        return sessionData;\n    } catch (error) {\n        console.warn('Failed to load session data:', error);\n        localStorage.removeItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY);\n        return null;\n    }\n}\n/**\n * Clear session data from localStorage\n */ function $cc35ee5c64337d79$export$37b6cafab9b29f47() {\n    localStorage.removeItem($cc35ee5c64337d79$var$SESSION_STORAGE_KEY);\n}\n\n\n/**\n * Power Averaging Module\n * Handles power data collection, averaging calculations, and display updates\n */ // Constants for time periods\nconst $d8d8e1ee9f4f63bb$var$TIME_PERIODS_MS = {\n    '10s': 10000,\n    '20s': 20000,\n    '30s': 30000,\n    '40s': 40000,\n    '50s': 50000,\n    '1m': 60000,\n    '2m': 120000,\n    '3m': 180000,\n    '4m': 240000,\n    '5m': 300000\n};\nconst $d8d8e1ee9f4f63bb$var$RETENTION_BUFFER_MS = 360000; // Keep 6 minutes of data (5 min max period + buffer)\n// Power averaging data structures\nlet $d8d8e1ee9f4f63bb$var$powerReadings = []; // Array to store timestamped power readings\nconst $d8d8e1ee9f4f63bb$var$currentTenSecondReadings = [];\nconst $d8d8e1ee9f4f63bb$var$tenSecondAverages = [];\nlet $d8d8e1ee9f4f63bb$var$powerAverages = {\n    '10s': {\n        current: 0,\n        best: 0\n    },\n    '20s': {\n        current: 0,\n        best: 0\n    },\n    '30s': {\n        current: 0,\n        best: 0\n    },\n    '40s': {\n        current: 0,\n        best: 0\n    },\n    '50s': {\n        current: 0,\n        best: 0\n    },\n    '1m': {\n        current: 0,\n        best: 0\n    },\n    '2m': {\n        current: 0,\n        best: 0\n    },\n    '3m': {\n        current: 0,\n        best: 0\n    },\n    '4m': {\n        current: 0,\n        best: 0\n    },\n    '5m': {\n        current: 0,\n        best: 0\n    }\n};\n// DOM elements for power averages display\nlet $d8d8e1ee9f4f63bb$var$avg10sCurrentElement, $d8d8e1ee9f4f63bb$var$avg10sBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg20sCurrentElement, $d8d8e1ee9f4f63bb$var$avg20sBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg30sCurrentElement, $d8d8e1ee9f4f63bb$var$avg30sBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg40sCurrentElement, $d8d8e1ee9f4f63bb$var$avg40sBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg50sCurrentElement, $d8d8e1ee9f4f63bb$var$avg50sBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg1mCurrentElement, $d8d8e1ee9f4f63bb$var$avg1mBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg2mCurrentElement, $d8d8e1ee9f4f63bb$var$avg2mBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg3mCurrentElement, $d8d8e1ee9f4f63bb$var$avg3mBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg4mCurrentElement, $d8d8e1ee9f4f63bb$var$avg4mBestElement;\nlet $d8d8e1ee9f4f63bb$var$avg5mCurrentElement, $d8d8e1ee9f4f63bb$var$avg5mBestElement;\nfunction $d8d8e1ee9f4f63bb$export$38b6955d4a0211f4() {\n    // Get DOM elements\n    $d8d8e1ee9f4f63bb$var$avg10sCurrentElement = document.getElementById('avg10s-current');\n    $d8d8e1ee9f4f63bb$var$avg10sBestElement = document.getElementById('avg10s-best');\n    $d8d8e1ee9f4f63bb$var$avg20sCurrentElement = document.getElementById('avg20s-current');\n    $d8d8e1ee9f4f63bb$var$avg20sBestElement = document.getElementById('avg20s-best');\n    $d8d8e1ee9f4f63bb$var$avg30sCurrentElement = document.getElementById('avg30s-current');\n    $d8d8e1ee9f4f63bb$var$avg30sBestElement = document.getElementById('avg30s-best');\n    $d8d8e1ee9f4f63bb$var$avg40sCurrentElement = document.getElementById('avg40s-current');\n    $d8d8e1ee9f4f63bb$var$avg40sBestElement = document.getElementById('avg40s-best');\n    $d8d8e1ee9f4f63bb$var$avg50sCurrentElement = document.getElementById('avg50s-current');\n    $d8d8e1ee9f4f63bb$var$avg50sBestElement = document.getElementById('avg50s-best');\n    $d8d8e1ee9f4f63bb$var$avg1mCurrentElement = document.getElementById('avg1m-current');\n    $d8d8e1ee9f4f63bb$var$avg1mBestElement = document.getElementById('avg1m-best');\n    $d8d8e1ee9f4f63bb$var$avg2mCurrentElement = document.getElementById('avg2m-current');\n    $d8d8e1ee9f4f63bb$var$avg2mBestElement = document.getElementById('avg2m-best');\n    $d8d8e1ee9f4f63bb$var$avg3mCurrentElement = document.getElementById('avg3m-current');\n    $d8d8e1ee9f4f63bb$var$avg3mBestElement = document.getElementById('avg3m-best');\n    $d8d8e1ee9f4f63bb$var$avg4mCurrentElement = document.getElementById('avg4m-current');\n    $d8d8e1ee9f4f63bb$var$avg4mBestElement = document.getElementById('avg4m-best');\n    $d8d8e1ee9f4f63bb$var$avg5mCurrentElement = document.getElementById('avg5m-current');\n    $d8d8e1ee9f4f63bb$var$avg5mBestElement = document.getElementById('avg5m-best');\n}\nfunction $d8d8e1ee9f4f63bb$export$3f67e616c0b42d09(power) {\n    const now = Date.now();\n    $d8d8e1ee9f4f63bb$var$powerReadings.push({\n        timestamp: now,\n        power: power\n    });\n    // Keep only the last 5 minutes of readings (plus buffer to ensure we have enough data)\n    const retentionCutoff = now - $d8d8e1ee9f4f63bb$var$RETENTION_BUFFER_MS;\n    $d8d8e1ee9f4f63bb$var$powerReadings = $d8d8e1ee9f4f63bb$var$powerReadings.filter((reading)=>reading.timestamp > retentionCutoff);\n    // Maintain current ten second readings for 10s average calculation\n    $d8d8e1ee9f4f63bb$var$currentTenSecondReadings.push({\n        timestamp: now,\n        power: power\n    });\n    if ($d8d8e1ee9f4f63bb$var$currentTenSecondReadings.length > 0 && $d8d8e1ee9f4f63bb$var$currentTenSecondReadings[0].timestamp <= now - 10000) {\n        // current 10s windows is filled\n        const currPowerAverage = Math.round($d8d8e1ee9f4f63bb$var$currentTenSecondReadings.reduce((sum, r)=>sum + r.power, 0) / $d8d8e1ee9f4f63bb$var$currentTenSecondReadings.length);\n        $d8d8e1ee9f4f63bb$var$tenSecondAverages.push(currPowerAverage);\n        // clear currentTenSecondReadings completely\n        $d8d8e1ee9f4f63bb$var$currentTenSecondReadings.splice(0, $d8d8e1ee9f4f63bb$var$currentTenSecondReadings.length);\n        while($d8d8e1ee9f4f63bb$var$tenSecondAverages.length > 30)$d8d8e1ee9f4f63bb$var$tenSecondAverages.shift();\n        for (const [periodKey, periodMs] of Object.entries($d8d8e1ee9f4f63bb$var$TIME_PERIODS_MS)){\n            const nWindows = Math.ceil(periodMs / 10000);\n            if ($d8d8e1ee9f4f63bb$var$tenSecondAverages.length >= nWindows) {\n                const avgWindows = $d8d8e1ee9f4f63bb$var$tenSecondAverages.slice(-nWindows);\n                const sum = avgWindows.reduce((total, reading)=>total + reading.power, 0);\n                const average = Math.round(sum / nWindows);\n                $d8d8e1ee9f4f63bb$var$powerAverages[periodKey].current = average;\n                // Update best if current is better\n                if (average > $d8d8e1ee9f4f63bb$var$powerAverages[periodKey].best) $d8d8e1ee9f4f63bb$var$powerAverages[periodKey].best = average;\n            } else $d8d8e1ee9f4f63bb$var$powerAverages[periodKey].current = 0;\n        }\n        $d8d8e1ee9f4f63bb$export$890cc05f11700e2c();\n    }\n}\nfunction $d8d8e1ee9f4f63bb$export$890cc05f11700e2c() {\n    if (!$d8d8e1ee9f4f63bb$var$avg10sCurrentElement) return; // Elements not initialized\n    $d8d8e1ee9f4f63bb$var$avg10sCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['10s'].current || '--';\n    $d8d8e1ee9f4f63bb$var$avg10sBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['10s'].best || '--';\n    $d8d8e1ee9f4f63bb$var$avg20sCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['20s'].current || '--';\n    $d8d8e1ee9f4f63bb$var$avg20sBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['20s'].best || '--';\n    $d8d8e1ee9f4f63bb$var$avg30sCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['30s'].current || '--';\n    $d8d8e1ee9f4f63bb$var$avg30sBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['30s'].best || '--';\n    $d8d8e1ee9f4f63bb$var$avg40sCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['40s'].current || '--';\n    $d8d8e1ee9f4f63bb$var$avg40sBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['40s'].best || '--';\n    $d8d8e1ee9f4f63bb$var$avg50sCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['50s'].current || '--';\n    $d8d8e1ee9f4f63bb$var$avg50sBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['50s'].best || '--';\n    $d8d8e1ee9f4f63bb$var$avg1mCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['1m'].current || '--';\n    $d8d8e1ee9f4f63bb$var$avg1mBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['1m'].best || '--';\n    $d8d8e1ee9f4f63bb$var$avg2mCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['2m'].current || '--';\n    $d8d8e1ee9f4f63bb$var$avg2mBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['2m'].best || '--';\n    $d8d8e1ee9f4f63bb$var$avg3mCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['3m'].current || '--';\n    $d8d8e1ee9f4f63bb$var$avg3mBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['3m'].best || '--';\n    $d8d8e1ee9f4f63bb$var$avg4mCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['4m'].current || '--';\n    $d8d8e1ee9f4f63bb$var$avg4mBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['4m'].best || '--';\n    $d8d8e1ee9f4f63bb$var$avg5mCurrentElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['5m'].current || '--';\n    $d8d8e1ee9f4f63bb$var$avg5mBestElement.textContent = $d8d8e1ee9f4f63bb$var$powerAverages['5m'].best || '--';\n}\nfunction $d8d8e1ee9f4f63bb$export$153010588d52d05c() {\n    $d8d8e1ee9f4f63bb$var$powerReadings = [];\n    for (const period of Object.keys($d8d8e1ee9f4f63bb$var$powerAverages)){\n        $d8d8e1ee9f4f63bb$var$powerAverages[period].current = 0;\n        $d8d8e1ee9f4f63bb$var$powerAverages[period].best = 0;\n    }\n    $d8d8e1ee9f4f63bb$export$890cc05f11700e2c();\n}\n\n\n/**\n * UI Management Module\n * Handles DOM element references, event listeners, and UI state management\n */ // DOM element references\nconst $26bf0f38c1315f82$export$7a5d735b2ab6389d = {\n    // Main metric displays\n    powerValueElement: null,\n    hrValueElement: null,\n    cadenceValueElement: null,\n    // Device info displays\n    deviceNameElement: null,\n    hrDeviceName: null,\n    cadenceDeviceName: null,\n    // Status displays\n    statusText: null,\n    hrStatusText: null,\n    cadenceStatusText: null,\n    hrConnectionStatus: null,\n    cadenceConnectionStatus: null,\n    // Buttons\n    powerMeterConnectButton: null,\n    hrConnectButton: null,\n    speedCadenceConnectButton: null,\n    exportButtons: {\n        json: null,\n        csv: null,\n        tcx: null,\n        image: null,\n        clearSession: null\n    },\n    // Toggle elements\n    powerAveragesSection: null,\n    // Hamburger menu elements\n    hamburgerBtn: null,\n    menuDropdown: null,\n    powerAveragesToggle: null,\n    powerMetricToggle: null,\n    heartRateMetricToggle: null,\n    cadenceMetricToggle: null,\n    showInfoMenuItem: null,\n    spyModeToggle: null,\n    // Metric card elements\n    powerCard: null,\n    heartRateCard: null,\n    cadenceCard: null,\n    spyCard: null,\n    spyModeSection: null,\n    // Spy mode elements\n    spyValueElement: null,\n    spyStatusElement: null,\n    spyInstructionsElement: null\n};\nfunction $26bf0f38c1315f82$export$a57455d21a15702b() {\n    // Main metric displays\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement = document.getElementById('power-value');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrValueElement = document.getElementById('hr-value');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceValueElement = document.getElementById('cadence-value');\n    // Device info displays\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.deviceNameElement = document.getElementById('device-name');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrDeviceName = document.getElementById('hrDeviceName');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceDeviceName = document.getElementById('cadenceDeviceName');\n    // Status displays\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.statusText = document.getElementById('status');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrStatusText = document.getElementById('hrStatus');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceStatusText = document.getElementById('cadenceStatus');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectionStatus = document.getElementById('hrConnectionStatus');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceConnectionStatus = document.getElementById('cadenceConnectionStatus');\n    // Buttons\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerMeterConnectButton = document.getElementById('connectButton');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectButton = document.getElementById('hrConnectButton');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\n    // Toggle elements\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerAveragesSection = document.getElementById('powerAveragesSection');\n    // Hamburger menu elements\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.hamburgerBtn = document.getElementById('hamburgerButton');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.menuDropdown = document.getElementById('menuDropdown');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerAveragesToggle = document.getElementById('powerAveragesToggle');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerMetricToggle = document.getElementById('powerMetricToggle');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.heartRateMetricToggle = document.getElementById('heartRateMetricToggle');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceMetricToggle = document.getElementById('cadenceMetricToggle');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.showInfoMenuItem = document.getElementById('showInfoMenuItem');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.spyModeToggle = document.getElementById('spyModeToggle');\n    // Metric card elements\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerCard = document.querySelector('.power-card');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.heartRateCard = document.querySelector('.hr-card');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceCard = document.querySelector('.cadence-card');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.spyCard = document.querySelector('.spy-card');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.spyModeSection = document.getElementById('spyModeSection');\n    // Spy mode elements\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.spyValueElement = document.getElementById('spy-value');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.spyStatusElement = document.getElementById('spyStatus');\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.spyInstructionsElement = document.getElementById('spyInstructions');\n    // Initialize connection status to disconnected state\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectionStatus) $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectionStatus.textContent = 'Disconnected';\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceConnectionStatus) $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceConnectionStatus.textContent = 'Disconnected';\n}\nfunction $26bf0f38c1315f82$export$38408f60e368349d(value) {\n    if (!$26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement) return;\n    const displayValue = value || '--';\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement.textContent = displayValue;\n    $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerValueElement.setAttribute('data-value', displayValue);\n}\nfunction $26bf0f38c1315f82$export$3c5e864d031b110c(values) {\n    if (values.power !== undefined) $26bf0f38c1315f82$export$38408f60e368349d(values.power);\n    if (values.heartRate !== undefined && $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrValueElement) $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrValueElement.textContent = values.heartRate || '--';\n    if (values.cadence !== undefined && $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceValueElement) $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceValueElement.textContent = values.cadence || '--';\n}\nfunction $26bf0f38c1315f82$export$d9870def68db0ffb() {\n    $26bf0f38c1315f82$export$38408f60e368349d('--');\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.hrValueElement) $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrValueElement.textContent = '--';\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceValueElement) $26bf0f38c1315f82$export$7a5d735b2ab6389d.cadenceValueElement.textContent = '--';\n}\nfunction $26bf0f38c1315f82$export$4d13f4433b58a96(connectionStates) {\n    // Hide/show power meter connect button\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.powerMeterConnectButton) $26bf0f38c1315f82$export$7a5d735b2ab6389d.powerMeterConnectButton.style.display = connectionStates.powerMeter ? 'none' : 'block';\n    // Hide/show heart rate connect button\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectButton) $26bf0f38c1315f82$export$7a5d735b2ab6389d.hrConnectButton.style.display = connectionStates.heartRate ? 'none' : 'block';\n    // Hide/show speed/cadence connect button\n    if ($26bf0f38c1315f82$export$7a5d735b2ab6389d.speedCadenceConnectButton) $26bf0f38c1315f82$export$7a5d735b2ab6389d.speedCadenceConnectButton.style.display = connectionStates.speedCadence ? 'none' : 'block';\n}\nfunction $26bf0f38c1315f82$export$b5051178064abb72() {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n}\n\n\n/**\n * Bluetooth Power Meter Connection Module\n * Handles Bluetooth connections for power meters, heart rate monitors, and cadence sensors\n */ // Bluetooth Heart Rate Format Constants\nconst $1e429c7e804734cb$var$HR_VALUE_FORMAT_FLAG = 0x01; // Bit 0: Heart Rate Value Format (0 = UINT8, 1 = UINT16)\nconst $1e429c7e804734cb$var$HR_FLAGS_OFFSET = 0;\nconst $1e429c7e804734cb$var$HR_VALUE_OFFSET = 1;\n/**\n * Parse heart rate measurement from Bluetooth characteristic value\n * \n * The heart rate measurement is a DataView object following the Bluetooth\n * Heart Rate Measurement characteristic format (org.bluetooth.characteristic.heart_rate_measurement).\n * \n * Format:\n * - Byte 0: Flags (bit 0 indicates value format)\n * - Byte 1+: Heart rate value (UINT8 or UINT16 based on flags)\n * \n * @param {DataView} value - The Bluetooth characteristic value\n * @returns {number} Heart rate in beats per minute (BPM)\n */ function $1e429c7e804734cb$export$c0b45cad129009bc(value) {\n    const flags = value.getUint8($1e429c7e804734cb$var$HR_FLAGS_OFFSET);\n    const isUint16Format = (flags & $1e429c7e804734cb$var$HR_VALUE_FORMAT_FLAG) !== 0;\n    if (isUint16Format) return value.getUint16($1e429c7e804734cb$var$HR_VALUE_OFFSET, /* littleEndian= */ true);\n    return value.getUint8($1e429c7e804734cb$var$HR_VALUE_OFFSET);\n}\n\n\n/**\n * Screen Wake Lock Management Module\n * Handles requesting and releasing screen wake locks to prevent device sleep during sessions\n */ let $ee8dba17fe5eb4b4$var$wakeLock = null;\nasync function $ee8dba17fe5eb4b4$export$1d0d101be0e1eace() {\n    if ('wakeLock' in navigator) try {\n        $ee8dba17fe5eb4b4$var$wakeLock = await navigator.wakeLock.request('screen');\n        $ee8dba17fe5eb4b4$var$wakeLock.addEventListener('release', ()=>{\n            // Wake lock was released\n            console.log('Wake lock was released');\n        });\n    } catch (err) {\n        console.error(`${err.name}, ${err.message}`);\n    }\n}\nasync function $ee8dba17fe5eb4b4$export$59fac9bdf8c1da6a() {\n    if ($ee8dba17fe5eb4b4$var$wakeLock !== null) {\n        await $ee8dba17fe5eb4b4$var$wakeLock.release();\n        $ee8dba17fe5eb4b4$var$wakeLock = null;\n    }\n}\nfunction $ee8dba17fe5eb4b4$export$9db35d3a32ab0a16() {\n    return $ee8dba17fe5eb4b4$var$wakeLock !== null;\n}\n\n\n// Bluetooth service UUIDs (using standard Bluetooth GATT service names)\nconst $305aaf8b9a43c26d$var$CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst $305aaf8b9a43c26d$var$CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst $305aaf8b9a43c26d$var$CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID = 'cycling_power_feature';\nconst $305aaf8b9a43c26d$var$CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst $305aaf8b9a43c26d$var$CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\n// Constants for device identification\nconst $305aaf8b9a43c26d$var$DEVICE_ID_SUFFIX_LENGTH = 6; // Characters to show from device ID\n// Constants for cadence calculation\nconst $305aaf8b9a43c26d$var$CADENCE_RESET_TIMEOUT_MS = 3000; // Reset cadence after 3 seconds of no data\n// Device connection state\nlet $305aaf8b9a43c26d$var$powerMeterDevice = null;\nlet $305aaf8b9a43c26d$var$hrBluetoothDevice = null;\nlet $305aaf8b9a43c26d$var$speedCadenceBluetoothDevice = null;\nlet $305aaf8b9a43c26d$var$spyMeterDevice = null;\n// Store event listener references for proper cleanup\nlet $305aaf8b9a43c26d$var$powerMeterDisconnectHandler = null;\nlet $305aaf8b9a43c26d$var$hrDisconnectHandler = null;\nlet $305aaf8b9a43c26d$var$speedCadenceDisconnectHandler = null;\nlet $305aaf8b9a43c26d$var$spyMeterDisconnectHandler = null;\n// Cadence calculation variables\nlet $305aaf8b9a43c26d$var$lastCrankRevs = 0;\nlet $305aaf8b9a43c26d$var$lastCrankTime = 0;\nlet $305aaf8b9a43c26d$var$cadenceResetTimer = null;\nasync function $305aaf8b9a43c26d$export$7cd63989f2e13954(callbacks, elements) {\n    await (0, $ee8dba17fe5eb4b4$export$1d0d101be0e1eace)();\n    if (!navigator.bluetooth) {\n        callbacks.onStatusUpdate('Web Bluetooth API is not available.');\n        return;\n    }\n    try {\n        callbacks.onStatusUpdate('Scanning for power meters...');\n        // Scan specifically for devices advertising the Cycling Power service\n        $305aaf8b9a43c26d$var$powerMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        $305aaf8b9a43c26d$var$CYCLING_POWER_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        callbacks.onStatusUpdate('Connecting to device...');\n        if (elements.deviceNameElement) elements.deviceNameElement.textContent = `Device: ${$305aaf8b9a43c26d$var$powerMeterDevice.name || 'Unknown Device'}`;\n        $305aaf8b9a43c26d$var$powerMeterDevice.addEventListener('gattserverdisconnected', ()=>{\n            $305aaf8b9a43c26d$var$onPowerMeterDisconnected(callbacks, elements);\n        });\n        const server = await $305aaf8b9a43c26d$var$powerMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService($305aaf8b9a43c26d$var$CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic($305aaf8b9a43c26d$var$CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);\n        // Check for and subscribe to advanced power features if available\n        try {\n            const featureCharacteristic = await service.getCharacteristic($305aaf8b9a43c26d$var$CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID);\n            // eslint-disable-next-line no-unused-vars\n            const features = await featureCharacteristic.readValue();\n        // This value can be used to determine what the power meter supports,\n        // but for now we just parse what's in the measurement characteristic.\n        } catch  {\n        // Cycling Power Feature characteristic not found\n        }\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', (event)=>{\n            $305aaf8b9a43c26d$var$handlePowerMeasurement(event, callbacks);\n        });\n        callbacks.onStatusUpdate('Connected and receiving data!');\n        return true;\n    } catch (error) {\n        callbacks.onStatusUpdate(`Error: ${error.message}`);\n        console.error('Connection failed:', error);\n        if ($305aaf8b9a43c26d$var$powerMeterDevice) $305aaf8b9a43c26d$var$powerMeterDevice.removeEventListener('gattserverdisconnected', ()=>{\n            $305aaf8b9a43c26d$var$onPowerMeterDisconnected(callbacks, elements);\n        });\n        return false;\n    }\n}\nasync function $305aaf8b9a43c26d$export$830e9b592dbab083(callbacks, elements) {\n    await (0, $ee8dba17fe5eb4b4$export$1d0d101be0e1eace)();\n    if (!navigator.bluetooth) {\n        callbacks.onStatusUpdate('Web Bluetooth API is not available.');\n        return;\n    }\n    try {\n        callbacks.onStatusUpdate('Scanning for devices...');\n        if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Connecting...';\n        // Show device selection\n        $305aaf8b9a43c26d$var$hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        'heart_rate'\n                    ]\n                }\n            ],\n            optionalServices: [\n                'device_information',\n                'battery_service'\n            ] // Get additional info if available\n        });\n        await $305aaf8b9a43c26d$var$connectToHRDevice($305aaf8b9a43c26d$var$hrBluetoothDevice, callbacks, elements);\n        return true;\n    } catch (error) {\n        callbacks.onStatusUpdate(`Error: ${error.message}`);\n        if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Connection Failed';\n        console.error('Connection failed:', error);\n        return false;\n    }\n}\n/**\n * Connect to HR device with enhanced device information\n * @param {BluetoothDevice} device - The Bluetooth device to connect to\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */ async function $305aaf8b9a43c26d$var$connectToHRDevice(device, callbacks, elements) {\n    callbacks.onStatusUpdate('Connecting to device...');\n    // Get enhanced device information\n    const deviceInfo = await $305aaf8b9a43c26d$var$getEnhancedDeviceInfo(device);\n    if (elements.hrDeviceName) elements.hrDeviceName.textContent = `Device: ${deviceInfo}`;\n    // Add disconnect listener\n    $305aaf8b9a43c26d$var$hrDisconnectHandler = ()=>{\n        $305aaf8b9a43c26d$var$onHeartRateDisconnected(callbacks, elements);\n    };\n    device.addEventListener('gattserverdisconnected', $305aaf8b9a43c26d$var$hrDisconnectHandler);\n    const hrServer = await device.gatt.connect();\n    const hrService = await hrServer.getPrimaryService('heart_rate');\n    const hrCharacteristic = await hrService.getCharacteristic('heart_rate_measurement');\n    // Start notifications to receive heart rate data\n    await hrCharacteristic.startNotifications();\n    hrCharacteristic.addEventListener('characteristicvaluechanged', (event)=>{\n        $305aaf8b9a43c26d$var$handleHeartRateChanged(event, callbacks);\n    });\n    callbacks.onStatusUpdate('Connected!');\n    if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Connected';\n}\n/**\n * Get enhanced device information for better identification\n * @param {BluetoothDevice} device - The Bluetooth device\n * @returns {Promise<string>} Enhanced device information string\n */ async function $305aaf8b9a43c26d$var$getEnhancedDeviceInfo(device) {\n    let deviceInfo = device.name || 'Unknown Device';\n    try {\n        const server = await device.gatt.connect();\n        // Try to get device information service for more details\n        try {\n            const deviceInfoService = await server.getPrimaryService('device_information');\n            // Try to get manufacturer name\n            const manufacturer = await $305aaf8b9a43c26d$var$readDeviceCharacteristic(deviceInfoService, 'manufacturer_name_string');\n            if (manufacturer) deviceInfo += ` (${manufacturer})`;\n            // Try to get model number\n            const model = await $305aaf8b9a43c26d$var$readDeviceCharacteristic(deviceInfoService, 'model_number_string');\n            if (model) deviceInfo += ` ${model}`;\n        } catch (e) {\n        // Device information service not available\n        }\n    } catch (e) {\n    // Connection failed or server not available, use basic info\n    }\n    // Add device ID as fallback identifier to distinguish identical names\n    if (device.id) deviceInfo += ` [${device.id.slice(-$305aaf8b9a43c26d$var$DEVICE_ID_SUFFIX_LENGTH)}]`;\n    return deviceInfo;\n}\n/**\n * Read a string characteristic from a Bluetooth service\n * @param {BluetoothRemoteGATTService} service - The Bluetooth GATT service\n * @param {string} characteristicName - Name of the characteristic to read\n * @returns {Promise<string|null>} Decoded string value or null if not available\n */ async function $305aaf8b9a43c26d$var$readDeviceCharacteristic(service, characteristicName) {\n    try {\n        const characteristic = await service.getCharacteristic(characteristicName);\n        const value = await characteristic.readValue();\n        return new TextDecoder().decode(value);\n    } catch (e) {\n        // Characteristic not available\n        return null;\n    }\n}\nasync function $305aaf8b9a43c26d$export$15696ad475844a91(callbacks, elements) {\n    await (0, $ee8dba17fe5eb4b4$export$1d0d101be0e1eace)();\n    if (!navigator.bluetooth) {\n        callbacks.onStatusUpdate('Web Bluetooth API is not available.');\n        return;\n    }\n    try {\n        callbacks.onStatusUpdate('Scanning for sensors...');\n        if (elements.cadenceConnectionStatus) elements.cadenceConnectionStatus.textContent = 'Connecting...';\n        // Reset cadence variables for clean start\n        if ($305aaf8b9a43c26d$var$cadenceResetTimer) {\n            clearTimeout($305aaf8b9a43c26d$var$cadenceResetTimer);\n            $305aaf8b9a43c26d$var$cadenceResetTimer = null;\n        }\n        $305aaf8b9a43c26d$var$lastCrankRevs = 0;\n        $305aaf8b9a43c26d$var$lastCrankTime = 0;\n        $305aaf8b9a43c26d$var$speedCadenceBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        $305aaf8b9a43c26d$var$CYCLING_CADENCE_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        callbacks.onStatusUpdate('Connecting to device...');\n        if (elements.cadenceDeviceName) elements.cadenceDeviceName.textContent = `Device: ${$305aaf8b9a43c26d$var$speedCadenceBluetoothDevice.name}`;\n        $305aaf8b9a43c26d$var$speedCadenceBluetoothDevice.addEventListener('gattserverdisconnected', ()=>{\n            $305aaf8b9a43c26d$var$onCadenceDisconnected(callbacks, elements);\n        });\n        const server = await $305aaf8b9a43c26d$var$speedCadenceBluetoothDevice.gatt.connect();\n        const service = await server.getPrimaryService($305aaf8b9a43c26d$var$CYCLING_CADENCE_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic($305aaf8b9a43c26d$var$CSC_MEASUREMENT_CHARACTERISTIC_UUID);\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', (event)=>{\n            $305aaf8b9a43c26d$var$handleSpeedCadenceMeasurement(event, callbacks);\n        });\n        callbacks.onStatusUpdate('Connected!');\n        if (elements.cadenceConnectionStatus) elements.cadenceConnectionStatus.textContent = 'Connected';\n        return true;\n    } catch (error) {\n        callbacks.onStatusUpdate(`Error: ${error.message}`);\n        if (elements.cadenceConnectionStatus) elements.cadenceConnectionStatus.textContent = 'Connection Failed';\n        console.error('Speed/Cadence connection failed:', error);\n        return false;\n    }\n}\nasync function $305aaf8b9a43c26d$export$bee1a28fa3cc4e9a(elements) {\n    if (!navigator.bluetooth) {\n        console.error('Web Bluetooth API is not available.');\n        return;\n    }\n    try {\n        if (elements.spyInstructionsElement) elements.spyInstructionsElement.style.display = 'none';\n        if (elements.spyStatusElement) {\n            elements.spyStatusElement.textContent = 'Scanning for spy power meter...';\n            elements.spyStatusElement.style.display = 'block';\n        }\n        // Scan for devices advertising the Cycling Power service\n        $305aaf8b9a43c26d$var$spyMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [\n                        $305aaf8b9a43c26d$var$CYCLING_POWER_SERVICE_UUID\n                    ]\n                }\n            ]\n        });\n        if (elements.spyStatusElement) elements.spyStatusElement.textContent = 'Connecting to spy device...';\n        $305aaf8b9a43c26d$var$spyMeterDevice.addEventListener('gattserverdisconnected', ()=>{\n            $305aaf8b9a43c26d$var$onSpyDisconnected(elements);\n        });\n        const server = await $305aaf8b9a43c26d$var$spyMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService($305aaf8b9a43c26d$var$CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic($305aaf8b9a43c26d$var$CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID);\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', (event)=>{\n            $305aaf8b9a43c26d$var$handleSpyPowerMeasurement(event, elements);\n        });\n        if (elements.spyStatusElement) {\n            elements.spyStatusElement.textContent = 'Spy connected!';\n            elements.spyStatusElement.style.display = 'none';\n        }\n        return true;\n    } catch (error) {\n        if (elements.spyStatusElement) elements.spyStatusElement.textContent = `Spy Error: ${error.message}`;\n        console.error('Spy connection failed:', error);\n        if ($305aaf8b9a43c26d$var$spyMeterDevice) {\n            $305aaf8b9a43c26d$var$spyMeterDevice.removeEventListener('gattserverdisconnected', ()=>{\n                $305aaf8b9a43c26d$var$onSpyDisconnected(elements);\n            });\n            $305aaf8b9a43c26d$var$spyMeterDevice = null;\n        }\n        // Show instructions again if connection failed\n        setTimeout(()=>{\n            if (elements.spyStatusElement) elements.spyStatusElement.style.display = 'none';\n            if (elements.spyInstructionsElement) elements.spyInstructionsElement.style.display = 'block';\n        }, 3000);\n        return false;\n    }\n}\nfunction $305aaf8b9a43c26d$export$f8a9e6c57769fd82(elements) {\n    if ($305aaf8b9a43c26d$var$spyMeterDevice && $305aaf8b9a43c26d$var$spyMeterDevice.gatt.connected) $305aaf8b9a43c26d$var$spyMeterDevice.gatt.disconnect();\n    $305aaf8b9a43c26d$var$spyMeterDevice = null;\n    if (elements.spyValueElement) elements.spyValueElement.textContent = '--';\n    if (elements.spyStatusElement) elements.spyStatusElement.style.display = 'none';\n    if (elements.spyInstructionsElement) elements.spyInstructionsElement.style.display = 'block';\n}\nfunction $305aaf8b9a43c26d$export$3aa2dffa9bc119b1() {\n    return $305aaf8b9a43c26d$var$powerMeterDevice && $305aaf8b9a43c26d$var$powerMeterDevice.gatt.connected;\n}\nfunction $305aaf8b9a43c26d$export$298d6450d7b1b0fe() {\n    return $305aaf8b9a43c26d$var$spyMeterDevice && $305aaf8b9a43c26d$var$spyMeterDevice.gatt.connected;\n}\nfunction $305aaf8b9a43c26d$export$e8a0920d368e1227() {\n    return $305aaf8b9a43c26d$var$hrBluetoothDevice && $305aaf8b9a43c26d$var$hrBluetoothDevice.gatt.connected;\n}\nfunction $305aaf8b9a43c26d$export$3508b7cf9f8826e8() {\n    return $305aaf8b9a43c26d$var$speedCadenceBluetoothDevice && $305aaf8b9a43c26d$var$speedCadenceBluetoothDevice.gatt.connected;\n}\n// Event handlers\nfunction $305aaf8b9a43c26d$var$handlePowerMeasurement(event, callbacks) {\n    const value = event.target.value;\n    // The data is a DataView object with a flags field and the power value.\n    // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n    const offset = 2;\n    const power = value.getInt16(offset, true);\n    callbacks.onPowerMeasurement(power);\n}\nfunction $305aaf8b9a43c26d$var$handleHeartRateChanged(event, callbacks) {\n    const value = event.target.value;\n    const heartRate = (0, $1e429c7e804734cb$export$c0b45cad129009bc)(value);\n    callbacks.onHeartRateChange(heartRate);\n}\nfunction $305aaf8b9a43c26d$var$handleSpeedCadenceMeasurement(event, callbacks) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n    const wheelRevsPresent = flags & 0x01;\n    const crankRevsPresent = flags & 0x02;\n    // Skip wheel revolution data since we don't need speed/distance\n    if (wheelRevsPresent) offset += 6; // Skip wheel data\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n        if ($305aaf8b9a43c26d$var$lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - $305aaf8b9a43c26d$var$lastCrankRevs;\n            const time = (lastCrankEventTime - $305aaf8b9a43c26d$var$lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = revs / time * 60; // RPM\n                const roundedCadence = Math.round(cadence);\n                callbacks.onCadenceChange(roundedCadence);\n                // Clear any existing reset timer\n                if ($305aaf8b9a43c26d$var$cadenceResetTimer) clearTimeout($305aaf8b9a43c26d$var$cadenceResetTimer);\n                // Set timer to reset cadence to 0 if no new data comes in\n                $305aaf8b9a43c26d$var$cadenceResetTimer = setTimeout(()=>{\n                    callbacks.onCadenceChange(0);\n                    $305aaf8b9a43c26d$var$cadenceResetTimer = null;\n                }, $305aaf8b9a43c26d$var$CADENCE_RESET_TIMEOUT_MS);\n            }\n        }\n        $305aaf8b9a43c26d$var$lastCrankRevs = cumulativeCrankRevolutions;\n        $305aaf8b9a43c26d$var$lastCrankTime = lastCrankEventTime;\n    }\n}\nfunction $305aaf8b9a43c26d$var$handleSpyPowerMeasurement(event, elements) {\n    const value = event.target.value;\n    const data = new Uint8Array(value.buffer);\n    // Parse cycling power measurement data (same format as main power meter)\n    let instantaneousPower = 0;\n    if (data.length >= 4) // Read instantaneous power (16-bit unsigned integer, little endian)\n    instantaneousPower = data[2] + (data[3] << 8);\n    if (elements.spyValueElement) elements.spyValueElement.textContent = instantaneousPower;\n}\n// Disconnection handlers\nfunction $305aaf8b9a43c26d$var$onPowerMeterDisconnected(callbacks, elements) {\n    callbacks.onStatusUpdate('Device disconnected.');\n    if (elements.deviceNameElement) elements.deviceNameElement.textContent = '';\n    if ($305aaf8b9a43c26d$var$powerMeterDevice) {\n        $305aaf8b9a43c26d$var$powerMeterDevice.removeEventListener('gattserverdisconnected', ()=>{\n            $305aaf8b9a43c26d$var$onPowerMeterDisconnected(callbacks, elements);\n        });\n        $305aaf8b9a43c26d$var$powerMeterDevice = null;\n    }\n    callbacks.onDisconnected();\n}\nfunction $305aaf8b9a43c26d$var$onHeartRateDisconnected(callbacks, elements) {\n    callbacks.onStatusUpdate('Device disconnected.');\n    if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Disconnected';\n    if (elements.hrDeviceName) elements.hrDeviceName.textContent = '';\n    $305aaf8b9a43c26d$var$hrBluetoothDevice = null;\n    callbacks.onHeartRateChange(0);\n    if (callbacks.onDisconnected) callbacks.onDisconnected();\n}\nfunction $305aaf8b9a43c26d$var$onCadenceDisconnected(callbacks, elements) {\n    callbacks.onStatusUpdate('Device disconnected.');\n    if (elements.cadenceConnectionStatus) elements.cadenceConnectionStatus.textContent = 'Disconnected';\n    if (elements.cadenceDeviceName) elements.cadenceDeviceName.textContent = '';\n    $305aaf8b9a43c26d$var$speedCadenceBluetoothDevice = null;\n    callbacks.onCadenceChange(0);\n    if (callbacks.onDisconnected) callbacks.onDisconnected();\n    // Clear cadence reset timer and reset variables\n    if ($305aaf8b9a43c26d$var$cadenceResetTimer) {\n        clearTimeout($305aaf8b9a43c26d$var$cadenceResetTimer);\n        $305aaf8b9a43c26d$var$cadenceResetTimer = null;\n    }\n    $305aaf8b9a43c26d$var$lastCrankRevs = 0;\n    $305aaf8b9a43c26d$var$lastCrankTime = 0;\n}\nfunction $305aaf8b9a43c26d$var$onSpyDisconnected(elements) {\n    $305aaf8b9a43c26d$var$spyMeterDevice = null;\n    if (elements.spyValueElement) elements.spyValueElement.textContent = '--';\n    if (elements.spyStatusElement) {\n        elements.spyStatusElement.textContent = 'Spy disconnected';\n        elements.spyStatusElement.style.display = 'block';\n    }\n    setTimeout(()=>{\n        if (elements.spyStatusElement) elements.spyStatusElement.style.display = 'none';\n        if (elements.spyInstructionsElement) elements.spyInstructionsElement.style.display = 'block';\n    }, 3000);\n}\nfunction $305aaf8b9a43c26d$export$47445d94160b987c() {\n    if ($305aaf8b9a43c26d$var$powerMeterDevice && $305aaf8b9a43c26d$var$powerMeterDisconnectHandler) {\n        $305aaf8b9a43c26d$var$powerMeterDevice.removeEventListener('gattserverdisconnected', $305aaf8b9a43c26d$var$powerMeterDisconnectHandler);\n        $305aaf8b9a43c26d$var$powerMeterDisconnectHandler = null;\n    }\n    if ($305aaf8b9a43c26d$var$hrBluetoothDevice && $305aaf8b9a43c26d$var$hrDisconnectHandler) {\n        $305aaf8b9a43c26d$var$hrBluetoothDevice.removeEventListener('gattserverdisconnected', $305aaf8b9a43c26d$var$hrDisconnectHandler);\n        $305aaf8b9a43c26d$var$hrDisconnectHandler = null;\n    }\n    if ($305aaf8b9a43c26d$var$speedCadenceBluetoothDevice && $305aaf8b9a43c26d$var$speedCadenceDisconnectHandler) {\n        $305aaf8b9a43c26d$var$speedCadenceBluetoothDevice.removeEventListener('gattserverdisconnected', $305aaf8b9a43c26d$var$speedCadenceDisconnectHandler);\n        $305aaf8b9a43c26d$var$speedCadenceDisconnectHandler = null;\n    }\n    if ($305aaf8b9a43c26d$var$spyMeterDevice && $305aaf8b9a43c26d$var$spyMeterDisconnectHandler) {\n        $305aaf8b9a43c26d$var$spyMeterDevice.removeEventListener('gattserverdisconnected', $305aaf8b9a43c26d$var$spyMeterDisconnectHandler);\n        $305aaf8b9a43c26d$var$spyMeterDisconnectHandler = null;\n    }\n}\n\n\n/**\n * Export Modals Module\n * Handles modal-based export functionality with user-friendly dialogs\n */ // Import required functions from data-export module\n/**\n * Data Export Module\n * Handles all data export functionality including JSON, CSV, and TCX exports\n */ /**\n * TCX (Training Center XML) Generation Module\n * Generates Garmin Training Center Database XML files for cycling activities\n */ /**\n * Check if a data point has valid power data\n * @param {Object} dataPoint - Data point to check\n * @returns {boolean} True if power is present and greater than 0\n */ function $bdf94e4d5edca10a$var$hasValidPower(dataPoint) {\n    return dataPoint.power !== undefined && dataPoint.power > 0;\n}\n/**\n * Check if a timestamp is valid\n * @param {number} timestamp - Timestamp to validate\n * @returns {boolean} True if timestamp is valid\n */ function $bdf94e4d5edca10a$var$isValidTimestamp(timestamp) {\n    return timestamp !== undefined && !isNaN(new Date(timestamp).getTime());\n}\n/**\n * Creates a trackpoint XML element for a single data point\n * @param {Object} dataPoint - Data point with time, power, heartRate, cadence\n * @returns {string} XML trackpoint string\n */ function $bdf94e4d5edca10a$var$createTrackpoint(dataPoint) {\n    const xmlBuilders = {\n        time: (time)=>`<Time>${new Date(time).toISOString()}</Time>`,\n        heartRate: (hr)=>`\n<HeartRateBpm>\n  <Value>${hr}</Value>\n</HeartRateBpm>`.trim(),\n        cadence: (cad)=>`<Cadence>${cad}</Cadence>`,\n        power: (pw)=>`\n<Extensions>\n  <ns2:TPX>\n    <ns2:Watts>${pw}</ns2:Watts>\n  </ns2:TPX>\n</Extensions>`.trim()\n    };\n    const contents = Object.keys(xmlBuilders).map((key)=>{\n        if (dataPoint[key] === undefined) return '';\n        return xmlBuilders[key](dataPoint[key]);\n    }).filter(Boolean) // Remove empty strings\n    .join('\\n');\n    return `\n<Trackpoint>\n  ${contents}\n</Trackpoint>`.trim();\n}\n/**\n * Normalize a data point to the format expected by TCX\n * @param {Object} item - Raw data point\n * @returns {Object} Normalized data point with time, power, heartRate, and cadence properties\n */ function $bdf94e4d5edca10a$var$normalizeDataPoint(item) {\n    return {\n        time: item.timestamp,\n        ...item.power !== undefined && {\n            power: item.power\n        },\n        ...item.heartRate !== undefined && {\n            heartRate: item.heartRate\n        },\n        ...item.cadence !== undefined && {\n            cadence: item.cadence\n        }\n    };\n}\n/**\n * Remove leading and trailing data points without valid power data\n * @param {Array<Object>} dataPoints - Array of data points\n * @returns {Array<Object>} Trimmed array\n */ function $bdf94e4d5edca10a$var$trimEmptyPowerEntries(dataPoints) {\n    const result = [\n        ...dataPoints\n    ];\n    // Remove leading entries without power\n    while(result.length > 0 && !$bdf94e4d5edca10a$var$hasValidPower(result[0]))result.shift();\n    // Remove trailing entries without power\n    while(result.length > 0 && !$bdf94e4d5edca10a$var$hasValidPower(result[result.length - 1]))result.pop();\n    return result;\n}\n/**\n * Generates TCX XML string from power data for cycling activities\n * @param {Array<Object>} powerData - Array of power measurement objects\n * @returns {string} Complete TCX XML string, or empty string if no valid data\n */ function $bdf94e4d5edca10a$export$84088f6ac1d2df1d(powerData) {\n    // Validate input data\n    if (!Array.isArray(powerData) || powerData.length === 0) return '';\n    // Filter valid data points (must be objects with valid timestamps)\n    const validDataPoints = powerData.filter((dataPoint)=>dataPoint && typeof dataPoint === 'object' && $bdf94e4d5edca10a$var$isValidTimestamp(dataPoint.timestamp));\n    if (validDataPoints.length === 0) return '';\n    // Normalize and sort data by time\n    const processedData = validDataPoints.map($bdf94e4d5edca10a$var$normalizeDataPoint).sort((a, b)=>a.time - b.time);\n    // Remove entries without power at the beginning and end\n    const trimmedData = $bdf94e4d5edca10a$var$trimEmptyPowerEntries(processedData);\n    if (trimmedData.length === 0) return '';\n    // Generate trackpoints XML\n    const trackpoints = trimmedData.map($bdf94e4d5edca10a$var$createTrackpoint).join('\\n');\n    const startTime = trimmedData[0].time;\n    const startTimeISO = new Date(startTime).toISOString();\n    // Build complete TCX document\n    const tcxXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<TrainingCenterDatabase\n  xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\"\n  xmlns:ns2=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\">\n  <Activities>\n    <Activity Sport=\"Biking\">\n      <Id>${startTimeISO}</Id>\n      <Name>E Bike Indoor Cycling Trainer</Name>\n      <Lap StartTime=\"${startTimeISO}\">\n        <Track>\n        ${trackpoints}\n        </Track>\n      </Lap>\n    </Activity>\n  </Activities>\n</TrainingCenterDatabase>`;\n    return tcxXml;\n}\n\n\n\n// Constants for export operations\nconst $8ca4b0f2a2d350fa$var$EXPORT_DELAY_MS = 100; // Delay between downloads to prevent browser blocking\nconst $8ca4b0f2a2d350fa$var$MIME_TYPES = {\n    JSON: 'application/json;charset=utf-8;',\n    CSV: 'text/csv;charset=utf-8;',\n    XML: 'application/xml;charset=utf-8;'\n};\nfunction $8ca4b0f2a2d350fa$export$20b155984c11fcae(powerData) {\n    if (!powerData || !Array.isArray(powerData) || powerData.length === 0) throw new Error('No valid power data available to export as JSON');\n    const jsonString = JSON.stringify(powerData, null, 2);\n    const blob = new Blob([\n        jsonString\n    ], {\n        type: $8ca4b0f2a2d350fa$var$MIME_TYPES.JSON\n    });\n    $8ca4b0f2a2d350fa$var$downloadFile(blob, `power_data_${(0, $26bf0f38c1315f82$export$b5051178064abb72)()}.json`);\n}\nfunction $8ca4b0f2a2d350fa$export$dfe05421fb7443f9(powerData) {\n    if (!powerData || !Array.isArray(powerData) || powerData.length === 0) throw new Error('No valid power data available to export as CSV');\n    let csvContent = 'timestamp,power,heartRate,cadence\\n';\n    powerData.forEach((row)=>{\n        // Safely handle missing properties with default empty strings\n        const timestamp = row.timestamp ?? '';\n        const power = row.power ?? '';\n        const heartRate = row.heartRate ?? '';\n        const cadence = row.cadence ?? '';\n        csvContent += `${timestamp},${power},${heartRate},${cadence}\\n`;\n    });\n    const blob = new Blob([\n        csvContent\n    ], {\n        type: $8ca4b0f2a2d350fa$var$MIME_TYPES.CSV\n    });\n    $8ca4b0f2a2d350fa$var$downloadFile(blob, `power_data_${(0, $26bf0f38c1315f82$export$b5051178064abb72)()}.csv`);\n}\nfunction $8ca4b0f2a2d350fa$export$55f444e58fd8eb49(powerData) {\n    if (!powerData || !Array.isArray(powerData) || powerData.length === 0) throw new Error('No power data available to export as TCX');\n    try {\n        const tcxContent = (0, $bdf94e4d5edca10a$export$84088f6ac1d2df1d)(powerData);\n        if (!tcxContent) throw new Error('Failed to generate TCX content');\n        const blob = new Blob([\n            tcxContent\n        ], {\n            type: $8ca4b0f2a2d350fa$var$MIME_TYPES.XML\n        });\n        $8ca4b0f2a2d350fa$var$downloadFile(blob, `power_data_${(0, $26bf0f38c1315f82$export$b5051178064abb72)()}.tcx`);\n    } catch (error) {\n        console.error('Error generating TCX:', error);\n        throw error;\n    }\n}\n/**\n * Helper function to trigger file download\n * @param {Blob} blob - The blob to download\n * @param {string} filename - The filename for the download\n */ function $8ca4b0f2a2d350fa$var$downloadFile(blob, filename) {\n    try {\n        if (!blob || !(blob instanceof Blob)) throw new Error('Invalid blob provided for download');\n        if (!filename || typeof filename !== 'string') throw new Error('Invalid filename provided for download');\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    } catch (error) {\n        console.error('Error during file download:', error);\n        throw error;\n    }\n}\n/**\n * Helper function to delay execution (used to prevent browser blocking on multiple downloads)\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise<void>}\n */ function $8ca4b0f2a2d350fa$var$delay(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\nasync function $8ca4b0f2a2d350fa$export$64da5a70f1570a50(data) {\n    const { powerData: powerData } = data;\n    if (!powerData || !Array.isArray(powerData) || powerData.length === 0) throw new Error('No valid power data available for export');\n    const errors = [];\n    const exports = [\n        {\n            name: 'Summary JSON',\n            fn: ()=>$8ca4b0f2a2d350fa$export$20b155984c11fcae(powerData)\n        },\n        {\n            name: 'Summary CSV',\n            fn: ()=>$8ca4b0f2a2d350fa$export$dfe05421fb7443f9(powerData)\n        },\n        {\n            name: 'TCX',\n            fn: ()=>$8ca4b0f2a2d350fa$export$55f444e58fd8eb49(powerData)\n        }\n    ];\n    // Execute exports with delays between them\n    for (const { name: name, fn: fn } of exports){\n        try {\n            fn();\n            console.log(`\\u{2713} ${name} exported`);\n        } catch (error) {\n            errors.push(`${name}: ${error.message}`);\n        }\n        await $8ca4b0f2a2d350fa$var$delay($8ca4b0f2a2d350fa$var$EXPORT_DELAY_MS);\n    }\n    // Report any errors\n    if (errors.length > 0) {\n        const errorMessage = `Some exports failed:\\n${errors.join('\\n')}`;\n        console.warn('Export errors:', errors);\n        throw new Error(errorMessage);\n    }\n    console.log(\"\\u2705 All exports completed successfully!\");\n}\n\n\n// Constants for modal animations\nconst $1fea2fc27e5705f2$var$MODAL_ANIMATION_DELAY_MS = 300;\n/**\n * Handle export error with user-friendly message\n * @param {Error} error - The error that occurred\n * @param {string} exportType - Type of export that failed\n */ function $1fea2fc27e5705f2$var$handleExportError(error, exportType) {\n    const message = `Error during ${exportType} export: ${error.message}`;\n    console.error(message, error);\n    alert(message);\n}\nfunction $1fea2fc27e5705f2$export$a32390f93c1373db(dataStore) {\n    const modal = $1fea2fc27e5705f2$var$createExportModal(\"\\uD83D\\uDCC4 Exports\", 'Export your session data in various formats');\n    const buttons = [\n        {\n            text: \"\\uD83D\\uDCE5 Export All Files\",\n            description: 'Download all export formats at once',\n            className: 'export-all primary',\n            onClick: async ()=>{\n                try {\n                    await (0, $8ca4b0f2a2d350fa$export$64da5a70f1570a50)({\n                        powerData: dataStore.powerData\n                    });\n                    $1fea2fc27e5705f2$var$closeModal(modal);\n                    alert('All export files downloaded successfully!');\n                } catch (error) {\n                    $1fea2fc27e5705f2$var$handleExportError(error, 'all files');\n                }\n            }\n        },\n        {\n            text: \"\\uD83D\\uDCCA Export JSON\",\n            description: 'JavaScript Object Notation format',\n            onClick: ()=>{\n                try {\n                    (0, $8ca4b0f2a2d350fa$export$20b155984c11fcae)(dataStore.powerData);\n                    $1fea2fc27e5705f2$var$closeModal(modal);\n                } catch (error) {\n                    $1fea2fc27e5705f2$var$handleExportError(error, 'JSON');\n                }\n            }\n        },\n        {\n            text: \"\\uD83D\\uDCCA Export CSV\",\n            description: 'Comma-Separated Values format',\n            onClick: ()=>{\n                try {\n                    (0, $8ca4b0f2a2d350fa$export$dfe05421fb7443f9)(dataStore.powerData);\n                    $1fea2fc27e5705f2$var$closeModal(modal);\n                } catch (error) {\n                    $1fea2fc27e5705f2$var$handleExportError(error, 'CSV');\n                }\n            }\n        },\n        {\n            text: \"\\uD83C\\uDFC3 Export TCX\",\n            description: 'Training Center XML format',\n            onClick: ()=>{\n                try {\n                    (0, $8ca4b0f2a2d350fa$export$55f444e58fd8eb49)(dataStore.powerData);\n                    $1fea2fc27e5705f2$var$closeModal(modal);\n                } catch (error) {\n                    $1fea2fc27e5705f2$var$handleExportError(error, 'TCX');\n                }\n            }\n        }\n    ];\n    $1fea2fc27e5705f2$var$addButtonsToModal(modal, buttons);\n    $1fea2fc27e5705f2$var$showModal(modal);\n}\nfunction $1fea2fc27e5705f2$export$a2134b5aa2aa2315(dataStore) {\n    const modal = $1fea2fc27e5705f2$var$createExportModal(\"\\uD83D\\uDEE0\\uFE0F Utilities\", 'Session management and utilities');\n    const buttons = [\n        {\n            text: \"\\uD83D\\uDDD1\\uFE0F Clear Session Data\",\n            description: 'Clear all session data (cannot be undone)',\n            className: 'danger',\n            onClick: ()=>{\n                const confirmed = confirm('Are you sure you want to clear all session data? This action cannot be undone.');\n                if (confirmed) {\n                    dataStore.resetAllSessionData();\n                    alert('Session data cleared successfully!');\n                    $1fea2fc27e5705f2$var$closeModal(modal);\n                }\n            }\n        }\n    ];\n    $1fea2fc27e5705f2$var$addButtonsToModal(modal, buttons);\n    $1fea2fc27e5705f2$var$showModal(modal);\n}\n/**\n * Create export modal with header\n * @param {string} title - Modal title\n * @param {string} description - Modal description\n * @returns {HTMLElement} Modal element\n */ function $1fea2fc27e5705f2$var$createExportModal(title, description) {\n    const modal = document.createElement('div');\n    modal.className = 'export-modal';\n    modal.innerHTML = `\n        <div class=\"export-modal-content\">\n            <div class=\"export-modal-header\">\n                <h3 class=\"export-modal-title\">${title}</h3>\n                <button class=\"export-modal-close\" aria-label=\"Close modal\">&times;</button>\n            </div>\n            <div class=\"export-modal-description\">${description}</div>\n            <div class=\"export-modal-buttons\"></div>\n        </div>\n    `;\n    // Add close functionality\n    const closeBtn = modal.querySelector('.export-modal-close');\n    closeBtn.addEventListener('click', ()=>$1fea2fc27e5705f2$var$closeModal(modal));\n    modal.addEventListener('click', (e)=>{\n        if (e.target === modal) $1fea2fc27e5705f2$var$closeModal(modal);\n    });\n    return modal;\n}\n/**\n * Add buttons to modal\n * @param {HTMLElement} modal - Modal element\n * @param {Array} buttons - Array of button configurations\n */ function $1fea2fc27e5705f2$var$addButtonsToModal(modal, buttons) {\n    const buttonsContainer = modal.querySelector('.export-modal-buttons');\n    buttons.forEach((buttonConfig)=>{\n        const button = document.createElement('button');\n        button.className = `export-modal-button ${buttonConfig.className || ''}`;\n        button.disabled = buttonConfig.disabled || false;\n        button.innerHTML = `\n            <span>${buttonConfig.text}</span>\n            ${buttonConfig.description ? `<small style=\"opacity: 0.7; font-size: 0.8em;\">${buttonConfig.description}</small>` : ''}\n        `;\n        button.addEventListener('click', buttonConfig.onClick);\n        buttonsContainer.appendChild(button);\n        // Add separator after \"Export All\" button\n        if (buttonConfig.className && buttonConfig.className.includes('export-all')) {\n            const separator = document.createElement('div');\n            separator.className = 'export-modal-separator';\n            separator.innerHTML = '<span>Individual Exports</span>';\n            buttonsContainer.appendChild(separator);\n        }\n    });\n}\n/**\n * Show modal with animation\n * @param {HTMLElement} modal - Modal element\n */ function $1fea2fc27e5705f2$var$showModal(modal) {\n    document.body.appendChild(modal);\n    // Trigger animation\n    requestAnimationFrame(()=>{\n        modal.classList.add('show');\n    });\n}\n/**\n * Close modal with animation\n * @param {HTMLElement} modal - Modal element\n */ function $1fea2fc27e5705f2$var$closeModal(modal) {\n    modal.classList.remove('show');\n    setTimeout(()=>{\n        if (modal.parentNode) document.body.removeChild(modal);\n    }, $1fea2fc27e5705f2$var$MODAL_ANIMATION_DELAY_MS);\n}\nfunction $1fea2fc27e5705f2$export$313373f1d10aa459(dataStore) {\n    // Basic exports\n    const basicMenuItem = document.getElementById('exportMenuItem');\n    if (basicMenuItem) basicMenuItem.addEventListener('click', ()=>{\n        $1fea2fc27e5705f2$export$a32390f93c1373db(dataStore);\n    });\n    // Utilities\n    const utilsMenuItem = document.getElementById('exportUtilsMenuItem');\n    if (utilsMenuItem) utilsMenuItem.addEventListener('click', ()=>{\n        $1fea2fc27e5705f2$export$a2134b5aa2aa2315(dataStore);\n    });\n}\n\n\n/**\n * Notification System Module\n * Handles displaying temporary notifications to the user\n */ // Constants for notification system\nconst $e75b18aae82f997e$var$NOTIFICATION_DURATION_MS = 5000;\nconst $e75b18aae82f997e$var$ANIMATION_DURATION_MS = 300;\nconst $e75b18aae82f997e$var$NOTIFICATION_COLORS = {\n    success: '#4CAF50',\n    error: '#f44336',\n    warning: '#ff9800',\n    info: '#2196F3'\n};\n/**\n * Ensure animation styles are added to the document\n */ function $e75b18aae82f997e$var$ensureAnimationStyles() {\n    if (!document.getElementById('notification-styles')) {\n        const style = document.createElement('style');\n        style.id = 'notification-styles';\n        style.textContent = `\n            @keyframes slideIn {\n                from { transform: translateX(100%); opacity: 0; }\n                to { transform: translateX(0); opacity: 1; }\n            }\n        `;\n        document.head.appendChild(style);\n    }\n}\n/**\n * Create a notification element with the specified styling\n * @param {string} message - The notification message\n * @param {string} backgroundColor - The background color for the notification\n * @returns {HTMLElement} The notification element\n */ function $e75b18aae82f997e$var$createNotificationElement(message, backgroundColor) {\n    const notification = document.createElement('div');\n    notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: ${backgroundColor};\n        color: white;\n        padding: 1rem 1.5rem;\n        border-radius: 8px;\n        z-index: 1000;\n        font-size: 0.9rem;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        animation: slideIn 0.3s ease-out;\n        max-width: 300px;\n        word-wrap: break-word;\n    `;\n    notification.textContent = message;\n    return notification;\n}\n/**\n * Remove a notification with animation\n * @param {HTMLElement} notification - The notification element to remove\n */ function $e75b18aae82f997e$var$removeNotification(notification) {\n    notification.style.animation = 'slideIn 0.3s ease-out reverse';\n    setTimeout(()=>{\n        if (notification.parentNode) notification.parentNode.removeChild(notification);\n    }, $e75b18aae82f997e$var$ANIMATION_DURATION_MS);\n}\nfunction $e75b18aae82f997e$export$2e6e6fe5543dc30c(dataPointCount) {\n    $e75b18aae82f997e$var$ensureAnimationStyles();\n    const message = `Session restored! ${dataPointCount} data points recovered.`;\n    const notification = $e75b18aae82f997e$var$createNotificationElement(message, $e75b18aae82f997e$var$NOTIFICATION_COLORS.success);\n    document.body.appendChild(notification);\n    // Remove notification after duration\n    setTimeout(()=>{\n        $e75b18aae82f997e$var$removeNotification(notification);\n    }, $e75b18aae82f997e$var$NOTIFICATION_DURATION_MS);\n}\nfunction $e75b18aae82f997e$export$f7dc72e91f29c7d7(message, type = 'info', duration = $e75b18aae82f997e$var$NOTIFICATION_DURATION_MS) {\n    $e75b18aae82f997e$var$ensureAnimationStyles();\n    const backgroundColor = $e75b18aae82f997e$var$NOTIFICATION_COLORS[type] || $e75b18aae82f997e$var$NOTIFICATION_COLORS.info;\n    const notification = $e75b18aae82f997e$var$createNotificationElement(message, backgroundColor);\n    document.body.appendChild(notification);\n    // Remove notification after specified duration\n    setTimeout(()=>{\n        $e75b18aae82f997e$var$removeNotification(notification);\n    }, duration);\n}\n\n\n/**\n * UI Event Handlers Module\n * Handles all UI event listeners for toggles, menus, and interactions\n */ /**\n * Show application information and usage instructions\n */ function $c8a6253a3b39b109$export$f844e123cf67dae8() {\n    const modal = document.createElement('div');\n    modal.className = 'modal-backdrop';\n    modal.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n    `;\n    const modalContent = document.createElement('div');\n    modalContent.className = 'modal';\n    modalContent.style.cssText = `\n        background: #1a1a2e;\n        border-radius: 12px;\n        padding: 2rem;\n        max-width: 600px;\n        max-height: 80vh;\n        overflow-y: auto;\n        margin: 20px;\n        border: 1px solid rgba(255, 255, 255, 0.2);\n    `;\n    // Create QR code canvas\n    const qrCanvas = document.createElement('canvas');\n    qrCanvas.width = 200;\n    qrCanvas.height = 200;\n    qrCanvas.style.cssText = `\n        background: white;\n        border-radius: 8px;\n        margin: 1rem auto;\n        max-width: 100%;\n        height: auto;\n        display: block;\n    `;\n    modalContent.innerHTML = `\n        <div style=\"text-align: center; margin-bottom: 1.5rem;\">\n            <h2 style=\"color: #3498db; margin: 0 0 0.5rem 0; font-size: 1.8rem;\">\\u{1F6B4} Web Bluetooth Power Meter</h2>\n            <p style=\"color: #cccccc; margin: 0; font-size: 1rem;\">Real-time cycling data analysis</p>\n        </div>\n\n        <div style=\"color: #ffffff; line-height: 1.6;\">\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">\\u{1F4F1} Share This App</h3>\n            <div style=\"text-align: center; margin-bottom: 1rem;\">\n                <div id=\"qr-container\" style=\"margin: 1rem 0;\"></div>\n                <p style=\"color: #ffffff; margin: 0.5rem 0; font-weight: 600;\">Scan to access on any device</p>\n                <a href=\"https://colscoding.github.io/power-saver/\" target=\"_blank\" style=\"\n                    color: #9b59b6; \n                    text-decoration: none; \n                    font-size: 0.9rem;\n                    word-break: break-all;\n                    line-height: 1.4;\n                \">https://colscoding.github.io/power-saver/</a>\n            </div>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">\\u{1F4F1} What is this app?</h3>\n            <p style=\"margin-bottom: 1rem;\">\n                This is a web-based power meter application that connects to Bluetooth devices:\n            </p>\n            <ul style=\"margin: 0 0 1rem 1rem; padding-left: 1rem;\">\n                <li>cycling power meter</li>\n                <li>cadence sensor</li>\n                <li>heart rate sensor</li>\n            </ul>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 2rem;\">\n            <button id=\"closeInfoModal\" style=\"\n                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);\n                color: white;\n                border: none;\n                padding: 12px 24px;\n                border-radius: 8px;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.3s ease;\n            \">Got it!</button>\n        </div>\n    `;\n    // Insert QR code canvas\n    const qrContainer = modalContent.querySelector('#qr-container');\n    qrContainer.appendChild(qrCanvas);\n    // Generate QR code\n    $c8a6253a3b39b109$var$generateQRCode(qrCanvas);\n    modal.appendChild(modalContent);\n    document.body.appendChild(modal);\n    // Close modal event listeners\n    const closeButton = modalContent.querySelector('#closeInfoModal');\n    const closeModal = ()=>{\n        document.body.removeChild(modal);\n    };\n    closeButton.addEventListener('click', closeModal);\n    modal.addEventListener('click', (e)=>{\n        if (e.target === modal) closeModal();\n    });\n    // Close on Escape key\n    const handleEscape = (e)=>{\n        if (e.key === 'Escape') {\n            closeModal();\n            document.removeEventListener('keydown', handleEscape);\n        }\n    };\n    document.addEventListener('keydown', handleEscape);\n    // Add hover effect to button\n    closeButton.addEventListener('mouseenter', ()=>{\n        closeButton.style.transform = 'translateY(-2px)';\n        closeButton.style.boxShadow = '0 8px 24px rgba(52, 152, 219, 0.4)';\n    });\n    closeButton.addEventListener('mouseleave', ()=>{\n        closeButton.style.transform = 'translateY(0)';\n        closeButton.style.boxShadow = 'none';\n    });\n}\n/**\n * Generate QR code on canvas using inline base64 data\n */ function $c8a6253a3b39b109$var$generateQRCode(canvas) {\n    const ctx = canvas.getContext('2d');\n    const size = canvas.width;\n    // Clear canvas with white background\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, size, size);\n    // Base64 encoded QR code data\n    const qrBase64 = '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';\n    // Load base64 encoded QR code\n    const img = new Image();\n    img.onload = function() {\n        ctx.drawImage(img, 0, 0, size, size);\n    };\n    img.onerror = function() {\n        // Fallback: draw a simple pattern if base64 data fails to load\n        $c8a6253a3b39b109$var$drawFallbackQR(ctx, size);\n    };\n    img.src = 'data:image/png;base64,' + qrBase64;\n}\n/**\n * Fallback QR code representation when local image is unavailable\n */ function $c8a6253a3b39b109$var$drawFallbackQR(ctx, size) {\n    ctx.fillStyle = '#000000';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n    // Draw a simple grid pattern\n    const cellSize = size / 25;\n    for(let i = 0; i < 25; i++){\n        for(let j = 0; j < 25; j++)if ((i + j) % 3 === 0 || i === 0 || i === 24 || j === 0 || j === 24) ctx.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);\n    }\n    // Add text in center\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(size * 0.2, size * 0.4, size * 0.6, size * 0.2);\n    ctx.fillStyle = '#000000';\n    ctx.fillText('QR Code', size / 2, size / 2 - 10);\n    ctx.fillText('Unavailable', size / 2, size / 2 + 10);\n}\n\n\n/**\n * Create a toggle handler for showing/hiding UI sections\n * @param {HTMLElement} toggleElement - The toggle button element\n * @param {HTMLElement} targetElement - The element to show/hide\n * @param {boolean} initiallyVisible - Whether the section should start visible\n * @param {Function} onChangeCallback - Optional callback to run when visibility changes\n * @returns {Function} Cleanup function to remove the event listener\n */ function $d455cb11b3bc64fd$var$createToggleHandler(toggleElement, targetElement, initiallyVisible = true, onChangeCallback = null) {\n    let isVisible = initiallyVisible;\n    // Set initial state\n    if (initiallyVisible) {\n        toggleElement.classList.add('active');\n        targetElement.style.display = 'block';\n    } else {\n        toggleElement.classList.remove('active');\n        targetElement.style.display = 'none';\n    }\n    const handler = ()=>{\n        isVisible = !isVisible;\n        if (isVisible) {\n            targetElement.style.display = 'block';\n            toggleElement.classList.add('active');\n        } else {\n            targetElement.style.display = 'none';\n            toggleElement.classList.remove('active');\n        }\n        if (onChangeCallback) onChangeCallback();\n    };\n    toggleElement.addEventListener('click', handler);\n    // Return cleanup function\n    return ()=>toggleElement.removeEventListener('click', handler);\n}\nfunction $d455cb11b3bc64fd$export$81e17204574dbb93(elements) {\n    if (!elements.hamburgerBtn || !elements.menuDropdown) {\n        console.error('Hamburger menu elements not found:', {\n            hamburgerBtn: !!elements.hamburgerBtn,\n            menuDropdown: !!elements.menuDropdown\n        });\n        return;\n    }\n    // Hamburger menu functionality\n    elements.hamburgerBtn.addEventListener('click', function() {\n        const isActive = elements.menuDropdown.classList.contains('active');\n        if (isActive) elements.menuDropdown.classList.remove('active');\n        else elements.menuDropdown.classList.add('active');\n    });\n    // Close menu when clicking outside\n    document.addEventListener('click', function(event) {\n        if (!event.target.closest('.hamburger-menu')) elements.menuDropdown.classList.remove('active');\n    });\n}\nfunction $d455cb11b3bc64fd$export$a2f2b6b746488fd5(elements) {\n    if (!elements.powerAveragesToggle || !elements.powerAveragesSection) {\n        console.error('Power averages toggle elements not found:', {\n            powerAveragesToggle: !!elements.powerAveragesToggle,\n            powerAveragesSection: !!elements.powerAveragesSection\n        });\n        return;\n    }\n    $d455cb11b3bc64fd$var$createToggleHandler(elements.powerAveragesToggle, elements.powerAveragesSection, true, $d455cb11b3bc64fd$var$manageCollapsedSectionsLayout);\n}\nfunction $d455cb11b3bc64fd$export$7af716748e1b2a68(elements) {\n    // Power metric toggle\n    if (elements.powerMetricToggle && elements.powerCard) $d455cb11b3bc64fd$var$createToggleHandler(elements.powerMetricToggle, elements.powerCard, true);\n    else console.error('Power metric toggle elements not found');\n    // Heart rate metric toggle\n    if (elements.heartRateMetricToggle && elements.heartRateCard) $d455cb11b3bc64fd$var$createToggleHandler(elements.heartRateMetricToggle, elements.heartRateCard, true);\n    else console.error('Heart rate metric toggle elements not found');\n    // Cadence metric toggle\n    if (elements.cadenceMetricToggle && elements.cadenceCard) $d455cb11b3bc64fd$var$createToggleHandler(elements.cadenceMetricToggle, elements.cadenceCard, true);\n    else console.error('Cadence metric toggle elements not found');\n}\nfunction $d455cb11b3bc64fd$export$847dba17d53ca76f(elements, disconnectSpyCallback) {\n    if (!elements.spyModeToggle || !elements.spyModeSection) {\n        console.error('Spy mode toggle elements not found');\n        return;\n    }\n    let spyModeVisible = false; // Start hidden by default\n    elements.spyModeToggle.addEventListener('click', function() {\n        spyModeVisible = !spyModeVisible;\n        if (spyModeVisible) {\n            elements.spyModeSection.style.display = 'block';\n            elements.spyModeToggle.classList.add('active');\n            // Make sure instructions are visible when first enabling spy mode\n            if (elements.spyInstructionsElement) elements.spyInstructionsElement.style.display = 'block';\n        } else {\n            elements.spyModeSection.style.display = 'none';\n            elements.spyModeToggle.classList.remove('active');\n            // Disconnect spy device if connected\n            disconnectSpyCallback();\n            // Reset spy display elements\n            if (elements.spyValueElement) elements.spyValueElement.textContent = '--';\n            if (elements.spyStatusElement) elements.spyStatusElement.style.display = 'none';\n            if (elements.spyInstructionsElement) elements.spyInstructionsElement.style.display = 'block';\n        }\n    });\n}\nfunction $d455cb11b3bc64fd$export$66f401d4d3f34334(elements) {\n    // Info functionality\n    if (elements.showInfoMenuItem) elements.showInfoMenuItem.addEventListener('click', function() {\n        (0, $c8a6253a3b39b109$export$f844e123cf67dae8)();\n        // Close the menu after showing info\n        if (elements.menuDropdown) elements.menuDropdown.classList.remove('active');\n    });\n    else console.error('Show info menu item not found');\n}\n/**\n * Function to update dashboard layout based on visible sections\n */ function $d455cb11b3bc64fd$var$updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const powerAveragesSection = document.getElementById('powerAveragesSection');\n    const powerAveragesHidden = powerAveragesSection && powerAveragesSection.style.display === 'none';\n    if (dashboard) {\n        if (powerAveragesHidden) dashboard.classList.add('maximized');\n        else dashboard.classList.remove('maximized');\n    }\n    // Manage horizontal layout for collapsed sections (excluding bottom controls)\n    $d455cb11b3bc64fd$var$manageCollapsedSectionsLayout();\n}\n/**\n * Function to manage horizontal layout of collapsed sections\n */ function $d455cb11b3bc64fd$var$manageCollapsedSectionsLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    if (!dashboard) return;\n    // Only manage power averages section for collapsed layout -\n    // connect and export sections are now bottom controls and stay at bottom\n    // Note: collapsedSections logic simplified since only power averages section is managed now\n    // Remove any existing collapsed sections row\n    const existingRow = document.querySelector('.collapsed-sections-row');\n    if (existingRow) {\n        // Move sections back to their original positions\n        const sectionsInRow = existingRow.querySelectorAll('.power-averages-section');\n        sectionsInRow.forEach((section)=>{\n            // Insert sections back after the dashboard\n            dashboard.parentNode.insertBefore(section, dashboard.nextSibling);\n        });\n        existingRow.remove();\n    }\n    // Power averages section doesn't need horizontal grouping since it's the only\n    // section that can be managed this way now\n    dashboard.classList.remove('has-collapsed-sections');\n}\nfunction $d455cb11b3bc64fd$export$8edd2f9a38e90f85(elements) {\n    // Initialize power averages section as visible by default\n    if (elements.powerAveragesSection) elements.powerAveragesSection.style.display = 'block';\n    $d455cb11b3bc64fd$var$updateDashboardLayout();\n}\n\n\n// Application state variables\nlet $b63be9b0371e788c$var$powerData = [];\nlet $b63be9b0371e788c$var$lastPowerValue = 0;\nlet $b63be9b0371e788c$var$lastHeartRateValue = 0;\nlet $b63be9b0371e788c$var$lastCadenceValue = 0;\nlet $b63be9b0371e788c$var$sessionStartTime = null;\nlet $b63be9b0371e788c$var$dataLoggerInterval = null;\n// Constants for data logging\nconst $b63be9b0371e788c$var$DATA_LOGGER_INTERVAL_MS = 100; // Log data every 100ms\nconst $b63be9b0371e788c$var$SESSION_SAVE_INTERVAL = 100; // Save session every 100 readings (10 seconds)\n/**\n * Update displays after restoring session data\n */ function $b63be9b0371e788c$var$updateDisplaysFromRestoredData() {\n    // Update current metric values\n    (0, $26bf0f38c1315f82$export$3c5e864d031b110c)({\n        power: $b63be9b0371e788c$var$lastPowerValue,\n        heartRate: $b63be9b0371e788c$var$lastHeartRateValue,\n        cadence: $b63be9b0371e788c$var$lastCadenceValue\n    });\n    // Update power averages display\n    (0, $d8d8e1ee9f4f63bb$export$890cc05f11700e2c)();\n    // Show session restoration notification\n    if ($b63be9b0371e788c$var$powerData.length > 0) (0, $e75b18aae82f997e$export$2e6e6fe5543dc30c)($b63be9b0371e788c$var$powerData.length);\n}\n/**\n * Reset all session data\n */ function $b63be9b0371e788c$var$resetAllSessionData() {\n    // Clear all data arrays\n    $b63be9b0371e788c$var$powerData.length = 0;\n    // Reset power averages\n    (0, $d8d8e1ee9f4f63bb$export$153010588d52d05c)();\n    // Reset last values\n    $b63be9b0371e788c$var$lastPowerValue = 0;\n    $b63be9b0371e788c$var$lastHeartRateValue = 0;\n    $b63be9b0371e788c$var$lastCadenceValue = 0;\n    $b63be9b0371e788c$var$sessionStartTime = null;\n    // Update displays\n    (0, $26bf0f38c1315f82$export$d9870def68db0ffb)();\n    // Clear localStorage\n    (0, $cc35ee5c64337d79$export$37b6cafab9b29f47)();\n}\n/**\n * Data store object to pass to modules that need access to application data\n */ const $b63be9b0371e788c$var$dataStore = {\n    get powerData () {\n        return $b63be9b0371e788c$var$powerData;\n    },\n    get lastPowerValue () {\n        return $b63be9b0371e788c$var$lastPowerValue;\n    },\n    get lastHeartRateValue () {\n        return $b63be9b0371e788c$var$lastHeartRateValue;\n    },\n    get lastCadenceValue () {\n        return $b63be9b0371e788c$var$lastCadenceValue;\n    },\n    get sessionStartTime () {\n        return $b63be9b0371e788c$var$sessionStartTime;\n    },\n    resetAllSessionData: $b63be9b0371e788c$var$resetAllSessionData,\n    elements: $26bf0f38c1315f82$export$7a5d735b2ab6389d\n};\n// Bluetooth connection callbacks\nconst $b63be9b0371e788c$var$powerMeterCallbacks = {\n    onPowerMeasurement: (power)=>{\n        (0, $26bf0f38c1315f82$export$38408f60e368349d)(power);\n        $b63be9b0371e788c$var$lastPowerValue = power;\n        // Add power reading to averaging calculations\n        (0, $d8d8e1ee9f4f63bb$export$3f67e616c0b42d09)(power);\n    },\n    onDisconnected: ()=>{\n        (0, $26bf0f38c1315f82$export$d9870def68db0ffb)();\n        (0, $d8d8e1ee9f4f63bb$export$153010588d52d05c)();\n        if ($b63be9b0371e788c$var$dataLoggerInterval) {\n            clearInterval($b63be9b0371e788c$var$dataLoggerInterval);\n            $b63be9b0371e788c$var$dataLoggerInterval = null;\n        }\n        $b63be9b0371e788c$var$lastPowerValue = 0;\n        $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    },\n    onStatusUpdate: (message)=>{\n        if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).statusText) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).statusText.textContent = message;\n    }\n};\nconst $b63be9b0371e788c$var$heartRateCallbacks = {\n    onHeartRateChange: (heartRate)=>{\n        if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrValueElement) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrValueElement.textContent = heartRate;\n        $b63be9b0371e788c$var$lastHeartRateValue = heartRate;\n    },\n    onStatusUpdate: (message)=>{\n        if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrStatusText) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrStatusText.textContent = message;\n    },\n    onDisconnected: ()=>{\n        $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    }\n};\nconst $b63be9b0371e788c$var$cadenceCallbacks = {\n    onCadenceChange: (cadence)=>{\n        if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).cadenceValueElement) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).cadenceValueElement.textContent = cadence;\n        $b63be9b0371e788c$var$lastCadenceValue = cadence;\n    },\n    onStatusUpdate: (message)=>{\n        if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).cadenceStatusText) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).cadenceStatusText.textContent = message;\n    },\n    onDisconnected: ()=>{\n        $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    }\n};\n/**\n * Update all connect button visibility based on current connection states\n */ function $b63be9b0371e788c$var$updateAllConnectButtonVisibility() {\n    (0, $26bf0f38c1315f82$export$4d13f4433b58a96)({\n        powerMeter: (0, $305aaf8b9a43c26d$export$3aa2dffa9bc119b1)(),\n        heartRate: (0, $305aaf8b9a43c26d$export$e8a0920d368e1227)(),\n        speedCadence: (0, $305aaf8b9a43c26d$export$3508b7cf9f8826e8)()\n    });\n}\n/**\n * Setup connection button event listeners\n */ function $b63be9b0371e788c$var$setupConnectionEventListeners() {\n    // Power meter connection\n    if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).powerMeterConnectButton) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).powerMeterConnectButton.addEventListener('click', async ()=>{\n        // Reset data from previous session\n        $b63be9b0371e788c$var$powerData.length = 0;\n        $b63be9b0371e788c$var$lastPowerValue = 0;\n        (0, $d8d8e1ee9f4f63bb$export$153010588d52d05c)();\n        if ($b63be9b0371e788c$var$dataLoggerInterval) clearInterval($b63be9b0371e788c$var$dataLoggerInterval);\n        const connected = await (0, $305aaf8b9a43c26d$export$7cd63989f2e13954)($b63be9b0371e788c$var$powerMeterCallbacks, (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n        if (connected) {\n            // Start session if this is the first connection\n            if (!$b63be9b0371e788c$var$sessionStartTime) $b63be9b0371e788c$var$sessionStartTime = Date.now();\n            // Start data logging\n            $b63be9b0371e788c$var$dataLoggerInterval = setInterval(()=>{\n                $b63be9b0371e788c$var$powerData.push({\n                    timestamp: Date.now(),\n                    power: $b63be9b0371e788c$var$lastPowerValue,\n                    heartRate: $b63be9b0371e788c$var$lastHeartRateValue,\n                    cadence: $b63be9b0371e788c$var$lastCadenceValue\n                });\n                // Save session data periodically (every 100 readings = 10 seconds)\n                if ($b63be9b0371e788c$var$powerData.length % $b63be9b0371e788c$var$SESSION_SAVE_INTERVAL === 0) (0, $cc35ee5c64337d79$export$3b97cfd23e0d13d8)($b63be9b0371e788c$var$dataStore);\n            }, $b63be9b0371e788c$var$DATA_LOGGER_INTERVAL_MS);\n            // Update button visibility\n            $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n        }\n    });\n    // Heart rate monitor connection\n    if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrConnectButton) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).hrConnectButton.addEventListener('click', async ()=>{\n        const connected = await (0, $305aaf8b9a43c26d$export$830e9b592dbab083)($b63be9b0371e788c$var$heartRateCallbacks, (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n        if (connected) $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    });\n    // Speed/cadence sensor connection\n    if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).speedCadenceConnectButton) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).speedCadenceConnectButton.addEventListener('click', async ()=>{\n        const connected = await (0, $305aaf8b9a43c26d$export$15696ad475844a91)($b63be9b0371e788c$var$cadenceCallbacks, (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n        if (connected) $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    });\n    // Spy mode connection\n    if ((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).spyCard) (0, $26bf0f38c1315f82$export$7a5d735b2ab6389d).spyCard.addEventListener('click', async ()=>{\n        if (!(0, $305aaf8b9a43c26d$export$298d6450d7b1b0fe)()) await (0, $305aaf8b9a43c26d$export$bee1a28fa3cc4e9a)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n        else (0, $305aaf8b9a43c26d$export$f8a9e6c57769fd82)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n    });\n}\n/**\n * Session restoration functionality\n */ /**\n * Show restoration dialog to let user choose\n */ function $b63be9b0371e788c$var$showRestorationDialog(sessionData) {\n    return new Promise((resolve)=>{\n        // Create modal backdrop\n        const backdrop = document.createElement('div');\n        backdrop.className = 'modal-backdrop';\n        // Create modal dialog\n        const modal = document.createElement('div');\n        modal.className = 'modal';\n        // Get session info\n        const sessionAge = Math.round((Date.now() - sessionData.timestamp) / 60000); // minutes\n        const dataCount = sessionData.powerData?.length || 0;\n        modal.innerHTML = `\n      <h3>Previous Session Found</h3>\n      <p>\n        A previous session was found from ${sessionAge} minutes ago with ${dataCount} data points.\n      </p>\n      <p>\n        Would you like to restore this session or start fresh?\n      </p>\n      <div class=\"modal-buttons\">\n        <button id=\"startFresh\" class=\"modal-button secondary\">Start Fresh</button>\n        <button id=\"restoreSession\" class=\"modal-button primary\">Restore Session</button>\n      </div>\n    `;\n        backdrop.appendChild(modal);\n        document.body.appendChild(backdrop);\n        // Handle button clicks\n        modal.querySelector('#startFresh').addEventListener('click', ()=>{\n            document.body.removeChild(backdrop);\n            (0, $cc35ee5c64337d79$export$37b6cafab9b29f47)();\n            resolve(false);\n        });\n        modal.querySelector('#restoreSession').addEventListener('click', ()=>{\n            document.body.removeChild(backdrop);\n            resolve(true);\n        });\n        // Handle backdrop click\n        backdrop.addEventListener('click', (e)=>{\n            if (e.target === backdrop) {\n                document.body.removeChild(backdrop);\n                resolve(false);\n            }\n        });\n    });\n}\n/**\n * Apply session data to restore the session\n */ function $b63be9b0371e788c$var$restoreSessionData(sessionData) {\n    try {\n        // Restore data arrays\n        if (sessionData.powerData) {\n            $b63be9b0371e788c$var$powerData.length = 0;\n            $b63be9b0371e788c$var$powerData.push(...sessionData.powerData);\n        }\n        // Restore last values\n        if (sessionData.lastPowerValue !== undefined) $b63be9b0371e788c$var$lastPowerValue = sessionData.lastPowerValue;\n        if (sessionData.lastHeartRateValue !== undefined) $b63be9b0371e788c$var$lastHeartRateValue = sessionData.lastHeartRateValue;\n        if (sessionData.lastCadenceValue !== undefined) $b63be9b0371e788c$var$lastCadenceValue = sessionData.lastCadenceValue;\n        if (sessionData.sessionStartTime !== undefined) $b63be9b0371e788c$var$sessionStartTime = sessionData.sessionStartTime;\n        // Update displays with restored data\n        $b63be9b0371e788c$var$updateDisplaysFromRestoredData();\n        return true;\n    } catch (error) {\n        console.warn('Failed to restore session data:', error);\n        return false;\n    }\n}\n/**\n * Initialize the application\n */ async function $b63be9b0371e788c$var$initializeApp() {\n    // Initialize all modules and DOM elements\n    (0, $26bf0f38c1315f82$export$a57455d21a15702b)();\n    (0, $d8d8e1ee9f4f63bb$export$38b6955d4a0211f4)();\n    (0, $d455cb11b3bc64fd$export$8edd2f9a38e90f85)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n    // Setup all event listeners\n    (0, $d455cb11b3bc64fd$export$81e17204574dbb93)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n    (0, $d455cb11b3bc64fd$export$a2f2b6b746488fd5)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n    (0, $d455cb11b3bc64fd$export$7af716748e1b2a68)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n    (0, $d455cb11b3bc64fd$export$847dba17d53ca76f)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d), ()=>(0, $305aaf8b9a43c26d$export$f8a9e6c57769fd82)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d)));\n    (0, $d455cb11b3bc64fd$export$66f401d4d3f34334)((0, $26bf0f38c1315f82$export$7a5d735b2ab6389d));\n    $b63be9b0371e788c$var$setupConnectionEventListeners();\n    (0, $1fea2fc27e5705f2$export$313373f1d10aa459)($b63be9b0371e788c$var$dataStore);\n    // Initialize connect button visibility based on current connection states\n    $b63be9b0371e788c$var$updateAllConnectButtonVisibility();\n    // Try to load previous session data\n    const sessionData = (0, $cc35ee5c64337d79$export$5ae208508f6870b)();\n    if (sessionData) {\n        // Show restoration dialog\n        const shouldRestore = await $b63be9b0371e788c$var$showRestorationDialog(sessionData);\n        if (shouldRestore) $b63be9b0371e788c$var$restoreSessionData(sessionData);\n        else $b63be9b0371e788c$var$sessionStartTime = Date.now();\n    } else $b63be9b0371e788c$var$sessionStartTime = Date.now();\n    // Save session data when page is about to be closed/refreshed\n    window.addEventListener('beforeunload', function() {\n        if ($b63be9b0371e788c$var$powerData.length > 0) (0, $cc35ee5c64337d79$export$3b97cfd23e0d13d8)($b63be9b0371e788c$var$dataStore);\n    });\n    // Save session data periodically (every 30 seconds as backup)\n    setInterval(()=>{\n        if ($b63be9b0371e788c$var$powerData.length > 0) (0, $cc35ee5c64337d79$export$3b97cfd23e0d13d8)($b63be9b0371e788c$var$dataStore);\n    }, 30000);\n}\n// Initialize the application when DOM is ready\ndocument.addEventListener('DOMContentLoaded', $b63be9b0371e788c$var$initializeApp);\n\n\n//# sourceMappingURL=power-saver.d29494b2.js.map\n","/**\n * Power Saver Main Application\n * Coordinates all modules and manages the application state\n */\n\n// Import all required modules\nimport { loadSessionData, saveSessionData, clearSessionData } from \"./session-data.js\";\nimport {\n  initializePowerAveraging,\n  addPowerReading,\n  resetPowerAverages,\n  updatePowerAveragesDisplay\n} from \"./power-averaging.js\";\nimport {\n  elements,\n  initializeElements,\n  updatePowerValue,\n  updateMetricDisplays,\n  resetMetricDisplays,\n  updateConnectButtonVisibility\n} from \"./ui-management.js\";\nimport {\n  connectPowerMeter,\n  connectHeartRateMonitor,\n  connectSpeedCadenceSensor,\n  connectSpyMeter,\n  disconnectSpyMeter,\n  isSpyMeterConnected,\n  isPowerMeterConnected,\n  isHeartRateConnected,\n  isSpeedCadenceConnected\n} from \"./bluetooth-connections.js\";\nimport { setupExportMenuListeners } from \"./export-modals.js\";\nimport { showSessionRestoredNotification } from \"./notifications.js\";\nimport {\n  setupHamburgerMenu,\n  setupPowerAveragesToggle,\n  setupMetricToggles,\n  setupSpyModeToggle,\n  setupMenuItems,\n  initializeSections\n} from \"./ui-event-handlers.js\";\n\n// Application state variables\nlet powerData = [];\nlet lastPowerValue = 0;\nlet lastHeartRateValue = 0;\nlet lastCadenceValue = 0;\nlet sessionStartTime = null;\nlet dataLoggerInterval = null;\n\n// Constants for data logging\nconst DATA_LOGGER_INTERVAL_MS = 100; // Log data every 100ms\nconst SESSION_SAVE_INTERVAL = 100; // Save session every 100 readings (10 seconds)\n\n/**\n * Update displays after restoring session data\n */\nfunction updateDisplaysFromRestoredData() {\n  // Update current metric values\n  updateMetricDisplays({\n    power: lastPowerValue,\n    heartRate: lastHeartRateValue,\n    cadence: lastCadenceValue\n  });\n\n  // Update power averages display\n  updatePowerAveragesDisplay();\n\n  // Show session restoration notification\n  if (powerData.length > 0) {\n    showSessionRestoredNotification(powerData.length);\n  }\n}\n\n/**\n * Reset all session data\n */\nfunction resetAllSessionData() {\n  // Clear all data arrays\n  powerData.length = 0;\n\n  // Reset power averages\n  resetPowerAverages();\n\n  // Reset last values\n  lastPowerValue = 0;\n  lastHeartRateValue = 0;\n  lastCadenceValue = 0;\n  sessionStartTime = null;\n\n  // Update displays\n  resetMetricDisplays();\n\n  // Clear localStorage\n  clearSessionData();\n}\n\n/**\n * Data store object to pass to modules that need access to application data\n */\nconst dataStore = {\n  get powerData() { return powerData; },\n  get lastPowerValue() { return lastPowerValue; },\n  get lastHeartRateValue() { return lastHeartRateValue; },\n  get lastCadenceValue() { return lastCadenceValue; },\n  get sessionStartTime() { return sessionStartTime; },\n  resetAllSessionData,\n  elements\n};\n\n// Bluetooth connection callbacks\nconst powerMeterCallbacks = {\n  onPowerMeasurement: (power) => {\n    updatePowerValue(power);\n    lastPowerValue = power;\n\n    // Add power reading to averaging calculations\n    addPowerReading(power);\n  },\n  onDisconnected: () => {\n    resetMetricDisplays();\n    resetPowerAverages();\n    if (dataLoggerInterval) {\n      clearInterval(dataLoggerInterval);\n      dataLoggerInterval = null;\n    }\n    lastPowerValue = 0;\n    updateAllConnectButtonVisibility();\n  },\n  onStatusUpdate: (message) => {\n    if (elements.statusText) {\n      elements.statusText.textContent = message;\n    }\n  }\n};\n\nconst heartRateCallbacks = {\n  onHeartRateChange: (heartRate) => {\n    if (elements.hrValueElement) {\n      elements.hrValueElement.textContent = heartRate;\n    }\n    lastHeartRateValue = heartRate;\n  },\n  onStatusUpdate: (message) => {\n    if (elements.hrStatusText) {\n      elements.hrStatusText.textContent = message;\n    }\n  },\n  onDisconnected: () => {\n    updateAllConnectButtonVisibility();\n  }\n};\n\nconst cadenceCallbacks = {\n  onCadenceChange: (cadence) => {\n    if (elements.cadenceValueElement) {\n      elements.cadenceValueElement.textContent = cadence;\n    }\n    lastCadenceValue = cadence;\n  },\n  onStatusUpdate: (message) => {\n    if (elements.cadenceStatusText) {\n      elements.cadenceStatusText.textContent = message;\n    }\n  },\n  onDisconnected: () => {\n    updateAllConnectButtonVisibility();\n  }\n};\n\n/**\n * Update all connect button visibility based on current connection states\n */\nfunction updateAllConnectButtonVisibility() {\n  updateConnectButtonVisibility({\n    powerMeter: isPowerMeterConnected(),\n    heartRate: isHeartRateConnected(),\n    speedCadence: isSpeedCadenceConnected()\n  });\n}\n\n/**\n * Setup connection button event listeners\n */\nfunction setupConnectionEventListeners() {\n  // Power meter connection\n  if (elements.powerMeterConnectButton) {\n    elements.powerMeterConnectButton.addEventListener('click', async () => {\n      // Reset data from previous session\n      powerData.length = 0;\n      lastPowerValue = 0;\n      resetPowerAverages();\n\n      if (dataLoggerInterval) {\n        clearInterval(dataLoggerInterval);\n      }\n\n      const connected = await connectPowerMeter(powerMeterCallbacks, elements);\n\n      if (connected) {\n        // Start session if this is the first connection\n        if (!sessionStartTime) {\n          sessionStartTime = Date.now();\n        }\n\n        // Start data logging\n        dataLoggerInterval = setInterval(() => {\n          powerData.push({\n            timestamp: Date.now(),\n            power: lastPowerValue,\n            heartRate: lastHeartRateValue,\n            cadence: lastCadenceValue,\n          });\n\n          // Save session data periodically (every 100 readings = 10 seconds)\n          if (powerData.length % SESSION_SAVE_INTERVAL === 0) {\n            saveSessionData(dataStore);\n          }\n        }, DATA_LOGGER_INTERVAL_MS);\n\n        // Update button visibility\n        updateAllConnectButtonVisibility();\n      }\n    });\n  }\n\n  // Heart rate monitor connection\n  if (elements.hrConnectButton) {\n    elements.hrConnectButton.addEventListener('click', async () => {\n      const connected = await connectHeartRateMonitor(heartRateCallbacks, elements);\n      if (connected) {\n        updateAllConnectButtonVisibility();\n      }\n    });\n  }\n\n  // Speed/cadence sensor connection\n  if (elements.speedCadenceConnectButton) {\n    elements.speedCadenceConnectButton.addEventListener('click', async () => {\n      const connected = await connectSpeedCadenceSensor(cadenceCallbacks, elements);\n      if (connected) {\n        updateAllConnectButtonVisibility();\n      }\n    });\n  }\n\n  // Spy mode connection\n  if (elements.spyCard) {\n    elements.spyCard.addEventListener('click', async () => {\n      if (!isSpyMeterConnected()) {\n        await connectSpyMeter(elements);\n      } else {\n        disconnectSpyMeter(elements);\n      }\n    });\n  }\n}\n\n/**\n * Session restoration functionality\n */\n\n/**\n * Show restoration dialog to let user choose\n */\nfunction showRestorationDialog(sessionData) {\n  return new Promise((resolve) => {\n    // Create modal backdrop\n    const backdrop = document.createElement('div');\n    backdrop.className = 'modal-backdrop';\n\n    // Create modal dialog\n    const modal = document.createElement('div');\n    modal.className = 'modal';\n\n    // Get session info\n    const sessionAge = Math.round((Date.now() - sessionData.timestamp) / (1000 * 60)); // minutes\n    const dataCount = sessionData.powerData?.length || 0;\n\n    modal.innerHTML = `\n      <h3>Previous Session Found</h3>\n      <p>\n        A previous session was found from ${sessionAge} minutes ago with ${dataCount} data points.\n      </p>\n      <p>\n        Would you like to restore this session or start fresh?\n      </p>\n      <div class=\"modal-buttons\">\n        <button id=\"startFresh\" class=\"modal-button secondary\">Start Fresh</button>\n        <button id=\"restoreSession\" class=\"modal-button primary\">Restore Session</button>\n      </div>\n    `;\n\n    backdrop.appendChild(modal);\n    document.body.appendChild(backdrop);\n\n    // Handle button clicks\n    modal.querySelector('#startFresh').addEventListener('click', () => {\n      document.body.removeChild(backdrop);\n      clearSessionData();\n      resolve(false);\n    });\n\n    modal.querySelector('#restoreSession').addEventListener('click', () => {\n      document.body.removeChild(backdrop);\n      resolve(true);\n    });\n\n    // Handle backdrop click\n    backdrop.addEventListener('click', (e) => {\n      if (e.target === backdrop) {\n        document.body.removeChild(backdrop);\n        resolve(false);\n      }\n    });\n  });\n}\n\n/**\n * Apply session data to restore the session\n */\nfunction restoreSessionData(sessionData) {\n  try {\n    // Restore data arrays\n    if (sessionData.powerData) {\n      powerData.length = 0;\n      powerData.push(...sessionData.powerData);\n    }\n\n    // Restore last values\n    if (sessionData.lastPowerValue !== undefined) lastPowerValue = sessionData.lastPowerValue;\n    if (sessionData.lastHeartRateValue !== undefined) lastHeartRateValue = sessionData.lastHeartRateValue;\n    if (sessionData.lastCadenceValue !== undefined) lastCadenceValue = sessionData.lastCadenceValue;\n    if (sessionData.sessionStartTime !== undefined) sessionStartTime = sessionData.sessionStartTime;\n\n    // Update displays with restored data\n    updateDisplaysFromRestoredData();\n\n    return true;\n  } catch (error) {\n    console.warn('Failed to restore session data:', error);\n    return false;\n  }\n}\n\n/**\n * Initialize the application\n */\nasync function initializeApp() {\n  // Initialize all modules and DOM elements\n  initializeElements();\n  initializePowerAveraging();\n  initializeSections(elements);\n\n  // Setup all event listeners\n  setupHamburgerMenu(elements);\n  setupPowerAveragesToggle(elements);\n  setupMetricToggles(elements);\n  setupSpyModeToggle(elements, () => disconnectSpyMeter(elements));\n  setupMenuItems(elements);\n  setupConnectionEventListeners();\n  setupExportMenuListeners(dataStore);\n\n  // Initialize connect button visibility based on current connection states\n  updateAllConnectButtonVisibility();\n\n  // Try to load previous session data\n  const sessionData = loadSessionData();\n  if (sessionData) {\n    // Show restoration dialog\n    const shouldRestore = await showRestorationDialog(sessionData);\n    if (shouldRestore) {\n      restoreSessionData(sessionData);\n    } else {\n      sessionStartTime = Date.now();\n    }\n  } else {\n    sessionStartTime = Date.now();\n  }\n\n  // Save session data when page is about to be closed/refreshed\n  window.addEventListener('beforeunload', function () {\n    if (powerData.length > 0) {\n      saveSessionData(dataStore);\n    }\n  });\n\n  // Save session data periodically (every 30 seconds as backup)\n  setInterval(() => {\n    if (powerData.length > 0) {\n      saveSessionData(dataStore);\n    }\n  }, 30000);\n}\n\n// Initialize the application when DOM is ready\ndocument.addEventListener('DOMContentLoaded', initializeApp);","/**\n * Session Data Persistence Module\n * Manages localStorage operations for session data persistence\n */\n\n// Constants for session management\nconst SESSION_STORAGE_KEY = 'powerMeterSession';\nconst SESSION_TIMEOUT_MS = 24 * 60 * 60 * 1000; // 24 hours in milliseconds\n\n/**\n * Save current session data to localStorage\n * @param {Object} dataStore - Object containing all session data\n */\nfunction saveSessionData(dataStore) {\n    try {\n        const sessionData = {\n            timestamp: Date.now(),\n            powerData: dataStore.powerData,\n            lastPowerValue: dataStore.lastPowerValue,\n            lastHeartRateValue: dataStore.lastHeartRateValue,\n            lastCadenceValue: dataStore.lastCadenceValue,\n            sessionStartTime: dataStore.sessionStartTime,\n        };\n\n        localStorage.setItem(SESSION_STORAGE_KEY, JSON.stringify(sessionData));\n    } catch (error) {\n        console.warn('Failed to save session data:', error);\n    }\n}\n\n/**\n * Load session data from localStorage if available and recent\n * @returns {Object|null} Session data object if available and valid, null otherwise\n */\nfunction loadSessionData() {\n    try {\n        const savedData = localStorage.getItem(SESSION_STORAGE_KEY);\n        if (!savedData) {\n            return null;\n        }\n\n        const sessionData = JSON.parse(savedData);\n        const now = Date.now();\n        const sessionAge = now - sessionData.timestamp;\n\n        // Check if session has expired (older than 24 hours)\n        if (sessionAge > SESSION_TIMEOUT_MS) {\n            localStorage.removeItem(SESSION_STORAGE_KEY);\n            return null;\n        }\n\n        return sessionData;\n    } catch (error) {\n        console.warn('Failed to load session data:', error);\n        localStorage.removeItem(SESSION_STORAGE_KEY);\n        return null;\n    }\n}\n\n\n/**\n * Clear session data from localStorage\n */\nfunction clearSessionData() {\n    localStorage.removeItem(SESSION_STORAGE_KEY);\n}\n\nexport { loadSessionData, saveSessionData, clearSessionData };","/**\n * Power Averaging Module\n * Handles power data collection, averaging calculations, and display updates\n */\n\n// Constants for time periods\nconst TIME_PERIODS_MS = {\n    '10s': 10 * 1000,\n    '20s': 20 * 1000,\n    '30s': 30 * 1000,\n    '40s': 40 * 1000,\n    '50s': 50 * 1000,\n    '1m': 60 * 1000,\n    '2m': 120 * 1000,\n    '3m': 180 * 1000,\n    '4m': 240 * 1000,\n    '5m': 300 * 1000,\n};\n\nconst RETENTION_BUFFER_MS = 6 * 60 * 1000; // Keep 6 minutes of data (5 min max period + buffer)\n\n// Power averaging data structures\nlet powerReadings = []; // Array to store timestamped power readings\nconst currentTenSecondReadings = [];\nconst tenSecondAverages = [];\nlet powerAverages = {\n    '10s': { current: 0, best: 0 },\n    '20s': { current: 0, best: 0 },\n    '30s': { current: 0, best: 0 },\n    '40s': { current: 0, best: 0 },\n    '50s': { current: 0, best: 0 },\n    '1m': { current: 0, best: 0 },\n    '2m': { current: 0, best: 0 },\n    '3m': { current: 0, best: 0 },\n    '4m': { current: 0, best: 0 },\n    '5m': { current: 0, best: 0 },\n};\n\n// DOM elements for power averages display\nlet avg10sCurrentElement, avg10sBestElement;\nlet avg20sCurrentElement, avg20sBestElement;\nlet avg30sCurrentElement, avg30sBestElement;\nlet avg40sCurrentElement, avg40sBestElement;\nlet avg50sCurrentElement, avg50sBestElement;\nlet avg1mCurrentElement, avg1mBestElement;\nlet avg2mCurrentElement, avg2mBestElement;\nlet avg3mCurrentElement, avg3mBestElement;\nlet avg4mCurrentElement, avg4mBestElement;\nlet avg5mCurrentElement, avg5mBestElement;\n\n/**\n * Initialize power averaging system with DOM elements\n */\nexport function initializePowerAveraging() {\n    // Get DOM elements\n    avg10sCurrentElement = document.getElementById('avg10s-current');\n    avg10sBestElement = document.getElementById('avg10s-best');\n    avg20sCurrentElement = document.getElementById('avg20s-current');\n    avg20sBestElement = document.getElementById('avg20s-best');\n    avg30sCurrentElement = document.getElementById('avg30s-current');\n    avg30sBestElement = document.getElementById('avg30s-best');\n    avg40sCurrentElement = document.getElementById('avg40s-current');\n    avg40sBestElement = document.getElementById('avg40s-best');\n    avg50sCurrentElement = document.getElementById('avg50s-current');\n    avg50sBestElement = document.getElementById('avg50s-best');\n    avg1mCurrentElement = document.getElementById('avg1m-current');\n    avg1mBestElement = document.getElementById('avg1m-best');\n    avg2mCurrentElement = document.getElementById('avg2m-current');\n    avg2mBestElement = document.getElementById('avg2m-best');\n    avg3mCurrentElement = document.getElementById('avg3m-current');\n    avg3mBestElement = document.getElementById('avg3m-best');\n    avg4mCurrentElement = document.getElementById('avg4m-current');\n    avg4mBestElement = document.getElementById('avg4m-best');\n    avg5mCurrentElement = document.getElementById('avg5m-current');\n    avg5mBestElement = document.getElementById('avg5m-best');\n}\n\n/**\n * Add a new power reading to the averaging calculations\n * @param {number} power - The instantaneous power value\n */\nexport function addPowerReading(power) {\n    const now = Date.now();\n    powerReadings.push({ timestamp: now, power: power });\n\n    // Keep only the last 5 minutes of readings (plus buffer to ensure we have enough data)\n    const retentionCutoff = now - RETENTION_BUFFER_MS;\n    powerReadings = powerReadings.filter((reading) => reading.timestamp > retentionCutoff);\n\n    // Maintain current ten second readings for 10s average calculation\n    currentTenSecondReadings.push({ timestamp: now, power: power });\n    if (currentTenSecondReadings.length > 0 && currentTenSecondReadings[0].timestamp <= (now - 10 * 1000)) {\n        // current 10s windows is filled\n        const currPowerAverage = Math.round(currentTenSecondReadings.reduce((sum, r) => sum + r.power, 0) / currentTenSecondReadings.length);\n        tenSecondAverages.push(currPowerAverage);\n        // clear currentTenSecondReadings completely\n        currentTenSecondReadings.splice(0, currentTenSecondReadings.length);\n        while (tenSecondAverages.length > 30) { // keep last 5 minutes of 10s averages\n            tenSecondAverages.shift();\n        }\n\n        for (const [periodKey, periodMs] of Object.entries(TIME_PERIODS_MS)) {\n            const nWindows = Math.ceil(periodMs / (10 * 1000));\n            if (tenSecondAverages.length >= nWindows) {\n                const avgWindows = tenSecondAverages.slice(-nWindows);\n                const sum = avgWindows.reduce((total, reading) => total + reading.power, 0);\n                const average = Math.round(sum / nWindows);\n                powerAverages[periodKey].current = average;\n\n                // Update best if current is better\n                if (average > powerAverages[periodKey].best) {\n                    powerAverages[periodKey].best = average;\n                }\n            } else {\n                powerAverages[periodKey].current = 0;\n            }\n        }\n        updatePowerAveragesDisplay();\n    }\n}\n\n/**\n * Update the power averages display in the UI\n */\nexport function updatePowerAveragesDisplay() {\n    if (!avg10sCurrentElement) return; // Elements not initialized\n\n    avg10sCurrentElement.textContent = powerAverages['10s'].current || '--';\n    avg10sBestElement.textContent = powerAverages['10s'].best || '--';\n    avg20sCurrentElement.textContent = powerAverages['20s'].current || '--';\n    avg20sBestElement.textContent = powerAverages['20s'].best || '--';\n    avg30sCurrentElement.textContent = powerAverages['30s'].current || '--';\n    avg30sBestElement.textContent = powerAverages['30s'].best || '--';\n    avg40sCurrentElement.textContent = powerAverages['40s'].current || '--';\n    avg40sBestElement.textContent = powerAverages['40s'].best || '--';\n    avg50sCurrentElement.textContent = powerAverages['50s'].current || '--';\n    avg50sBestElement.textContent = powerAverages['50s'].best || '--';\n    avg1mCurrentElement.textContent = powerAverages['1m'].current || '--';\n    avg1mBestElement.textContent = powerAverages['1m'].best || '--';\n    avg2mCurrentElement.textContent = powerAverages['2m'].current || '--';\n    avg2mBestElement.textContent = powerAverages['2m'].best || '--';\n    avg3mCurrentElement.textContent = powerAverages['3m'].current || '--';\n    avg3mBestElement.textContent = powerAverages['3m'].best || '--';\n    avg4mCurrentElement.textContent = powerAverages['4m'].current || '--';\n    avg4mBestElement.textContent = powerAverages['4m'].best || '--';\n    avg5mCurrentElement.textContent = powerAverages['5m'].current || '--';\n    avg5mBestElement.textContent = powerAverages['5m'].best || '--';\n}\n\n/**\n * Reset all power averages to zero\n */\nexport function resetPowerAverages() {\n    powerReadings = [];\n    for (const period of Object.keys(powerAverages)) {\n        powerAverages[period].current = 0;\n        powerAverages[period].best = 0;\n    }\n    updatePowerAveragesDisplay();\n}\n","/**\n * UI Management Module\n * Handles DOM element references, event listeners, and UI state management\n */\n\n// DOM element references\nexport const elements = {\n    // Main metric displays\n    powerValueElement: null,\n    hrValueElement: null,\n    cadenceValueElement: null,\n\n    // Device info displays\n    deviceNameElement: null,\n    hrDeviceName: null,\n    cadenceDeviceName: null,\n\n    // Status displays\n    statusText: null,\n    hrStatusText: null,\n    cadenceStatusText: null,\n    hrConnectionStatus: null,\n    cadenceConnectionStatus: null,\n\n    // Buttons\n    powerMeterConnectButton: null,\n    hrConnectButton: null,\n    speedCadenceConnectButton: null,\n    exportButtons: {\n        json: null,\n        csv: null,\n        tcx: null,\n        image: null,\n        clearSession: null\n    },\n\n    // Toggle elements\n    powerAveragesSection: null,\n\n    // Hamburger menu elements\n    hamburgerBtn: null,\n    menuDropdown: null,\n    powerAveragesToggle: null,\n    powerMetricToggle: null,\n    heartRateMetricToggle: null,\n    cadenceMetricToggle: null,\n    showInfoMenuItem: null,\n    spyModeToggle: null,\n\n    // Metric card elements\n    powerCard: null,\n    heartRateCard: null,\n    cadenceCard: null,\n    spyCard: null,\n    spyModeSection: null,\n\n    // Spy mode elements\n    spyValueElement: null,\n    spyStatusElement: null,\n    spyInstructionsElement: null\n};\n\n/**\n * Initialize all DOM element references\n */\nexport function initializeElements() {\n    // Main metric displays\n    elements.powerValueElement = document.getElementById('power-value');\n    elements.hrValueElement = document.getElementById('hr-value');\n    elements.cadenceValueElement = document.getElementById('cadence-value');\n\n    // Device info displays\n    elements.deviceNameElement = document.getElementById('device-name');\n    elements.hrDeviceName = document.getElementById('hrDeviceName');\n    elements.cadenceDeviceName = document.getElementById('cadenceDeviceName');\n\n    // Status displays\n    elements.statusText = document.getElementById('status');\n    elements.hrStatusText = document.getElementById('hrStatus');\n    elements.cadenceStatusText = document.getElementById('cadenceStatus');\n    elements.hrConnectionStatus = document.getElementById('hrConnectionStatus');\n    elements.cadenceConnectionStatus = document.getElementById('cadenceConnectionStatus');\n\n    // Buttons\n    elements.powerMeterConnectButton = document.getElementById('connectButton');\n    elements.hrConnectButton = document.getElementById('hrConnectButton');\n    elements.speedCadenceConnectButton = document.getElementById('speedCadenceConnectButton');\n\n    // Toggle elements\n    elements.powerAveragesSection = document.getElementById('powerAveragesSection');\n\n    // Hamburger menu elements\n    elements.hamburgerBtn = document.getElementById('hamburgerButton');\n    elements.menuDropdown = document.getElementById('menuDropdown');\n    elements.powerAveragesToggle = document.getElementById('powerAveragesToggle');\n    elements.powerMetricToggle = document.getElementById('powerMetricToggle');\n    elements.heartRateMetricToggle = document.getElementById('heartRateMetricToggle');\n    elements.cadenceMetricToggle = document.getElementById('cadenceMetricToggle');\n    elements.showInfoMenuItem = document.getElementById('showInfoMenuItem');\n    elements.spyModeToggle = document.getElementById('spyModeToggle');\n\n    // Metric card elements\n    elements.powerCard = document.querySelector('.power-card');\n    elements.heartRateCard = document.querySelector('.hr-card');\n    elements.cadenceCard = document.querySelector('.cadence-card');\n    elements.spyCard = document.querySelector('.spy-card');\n    elements.spyModeSection = document.getElementById('spyModeSection');\n\n    // Spy mode elements\n    elements.spyValueElement = document.getElementById('spy-value');\n    elements.spyStatusElement = document.getElementById('spyStatus');\n    elements.spyInstructionsElement = document.getElementById('spyInstructions');\n\n    // Initialize connection status to disconnected state\n    if (elements.hrConnectionStatus) elements.hrConnectionStatus.textContent = 'Disconnected';\n    if (elements.cadenceConnectionStatus) elements.cadenceConnectionStatus.textContent = 'Disconnected';\n}\n\n/**\n * Helper function to update power value with enhanced styling\n * @param {number|string} value - The power value to display\n */\nexport function updatePowerValue(value) {\n    if (!elements.powerValueElement) return;\n\n    const displayValue = value || '--';\n    elements.powerValueElement.textContent = displayValue;\n    elements.powerValueElement.setAttribute('data-value', displayValue);\n}\n\n/**\n * Update metric displays with current values\n * @param {Object} values - Object containing power, heartRate, and cadence values\n */\nexport function updateMetricDisplays(values) {\n    if (values.power !== undefined) {\n        updatePowerValue(values.power);\n    }\n\n    if (values.heartRate !== undefined && elements.hrValueElement) {\n        elements.hrValueElement.textContent = values.heartRate || '--';\n    }\n\n    if (values.cadence !== undefined && elements.cadenceValueElement) {\n        elements.cadenceValueElement.textContent = values.cadence || '--';\n    }\n}\n\n/**\n * Reset all metric displays to default values\n */\nexport function resetMetricDisplays() {\n    updatePowerValue('--');\n    if (elements.hrValueElement) elements.hrValueElement.textContent = '--';\n    if (elements.cadenceValueElement) elements.cadenceValueElement.textContent = '--';\n}\n\n/**\n * Update connect button visibility based on device connection status\n * @param {Object} connectionStates - Object containing connection states for each device type\n * @param {boolean} connectionStates.powerMeter - Power meter connection state\n * @param {boolean} connectionStates.heartRate - Heart rate monitor connection state\n * @param {boolean} connectionStates.speedCadence - Speed/cadence sensor connection state\n */\nexport function updateConnectButtonVisibility(connectionStates) {\n    // Hide/show power meter connect button\n    if (elements.powerMeterConnectButton) {\n        elements.powerMeterConnectButton.style.display = connectionStates.powerMeter ? 'none' : 'block';\n    }\n\n    // Hide/show heart rate connect button\n    if (elements.hrConnectButton) {\n        elements.hrConnectButton.style.display = connectionStates.heartRate ? 'none' : 'block';\n    }\n\n    // Hide/show speed/cadence connect button\n    if (elements.speedCadenceConnectButton) {\n        elements.speedCadenceConnectButton.style.display = connectionStates.speedCadence ? 'none' : 'block';\n    }\n}\n\n/**\n * Get current date string for file naming\n * @returns {string} Date string in YYYY-MM-DD format\n */\nexport function getCurrentDateString() {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    const day = String(now.getDate()).padStart(2, '0');\n    return `${year}-${month}-${day}`;\n}","/**\n * Bluetooth Power Meter Connection Module\n * Handles Bluetooth connections for power meters, heart rate monitors, and cadence sensors\n */\n\nimport { parseHeartRate } from './heart-rate.js';\nimport { requestWakeLock } from './wake-lock.js';\n\n// Bluetooth service UUIDs (using standard Bluetooth GATT service names)\nconst CYCLING_POWER_SERVICE_UUID = 'cycling_power';\nconst CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID = 'cycling_power_measurement';\nconst CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID = 'cycling_power_feature';\nconst CYCLING_CADENCE_SERVICE_UUID = 'cycling_speed_and_cadence';\nconst CSC_MEASUREMENT_CHARACTERISTIC_UUID = 'csc_measurement';\n\n// Constants for device identification\nconst DEVICE_ID_SUFFIX_LENGTH = 6; // Characters to show from device ID\n\n// Constants for cadence calculation\nconst CADENCE_RESET_TIMEOUT_MS = 3000; // Reset cadence after 3 seconds of no data\n\n// Device connection state\nlet powerMeterDevice = null;\nlet hrBluetoothDevice = null;\nlet speedCadenceBluetoothDevice = null;\nlet spyMeterDevice = null;\n\n// Store event listener references for proper cleanup\nlet powerMeterDisconnectHandler = null;\nlet hrDisconnectHandler = null;\nlet speedCadenceDisconnectHandler = null;\nlet spyMeterDisconnectHandler = null;\n\n// Cadence calculation variables\nlet lastCrankRevs = 0;\nlet lastCrankTime = 0;\nlet cadenceResetTimer = null;\n\n/**\n * Connect to a power meter device\n * @param {Object} callbacks - Object containing callback functions\n * @param {Function} callbacks.onPowerMeasurement - Callback for power measurements\n * @param {Function} callbacks.onDisconnected - Callback for disconnection\n * @param {Function} callbacks.onStatusUpdate - Callback for status updates\n * @param {Object} elements - UI elements object\n */\nexport async function connectPowerMeter(callbacks, elements) {\n    await requestWakeLock();\n\n    if (!navigator.bluetooth) {\n        callbacks.onStatusUpdate('Web Bluetooth API is not available.');\n        return;\n    }\n\n    try {\n        callbacks.onStatusUpdate('Scanning for power meters...');\n\n        // Scan specifically for devices advertising the Cycling Power service\n        powerMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [CYCLING_POWER_SERVICE_UUID],\n                },\n            ],\n        });\n\n        callbacks.onStatusUpdate('Connecting to device...');\n        if (elements.deviceNameElement) {\n            elements.deviceNameElement.textContent = `Device: ${powerMeterDevice.name || 'Unknown Device'}`;\n        }\n\n        powerMeterDevice.addEventListener('gattserverdisconnected', () => {\n            onPowerMeterDisconnected(callbacks, elements);\n        });\n\n        const server = await powerMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(\n            CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID\n        );\n\n        // Check for and subscribe to advanced power features if available\n        try {\n            const featureCharacteristic = await service.getCharacteristic(\n                CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID\n            );\n            // eslint-disable-next-line no-unused-vars\n            const features = await featureCharacteristic.readValue();\n            // This value can be used to determine what the power meter supports,\n            // but for now we just parse what's in the measurement characteristic.\n        } catch {\n            // Cycling Power Feature characteristic not found\n        }\n\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', (event) => {\n            handlePowerMeasurement(event, callbacks);\n        });\n\n        callbacks.onStatusUpdate('Connected and receiving data!');\n\n        return true;\n    } catch (error) {\n        callbacks.onStatusUpdate(`Error: ${error.message}`);\n        console.error('Connection failed:', error);\n        if (powerMeterDevice) {\n            powerMeterDevice.removeEventListener('gattserverdisconnected', () => {\n                onPowerMeterDisconnected(callbacks, elements);\n            });\n        }\n        return false;\n    }\n}\n\n/**\n * Connect to a heart rate monitor\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */\nexport async function connectHeartRateMonitor(callbacks, elements) {\n    await requestWakeLock();\n\n    if (!navigator.bluetooth) {\n        callbacks.onStatusUpdate('Web Bluetooth API is not available.');\n        return;\n    }\n\n    try {\n        callbacks.onStatusUpdate('Scanning for devices...');\n        if (elements.hrConnectionStatus) {\n            elements.hrConnectionStatus.textContent = 'Connecting...';\n        }\n\n        // Show device selection\n        hrBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: ['heart_rate'],\n                },\n            ],\n            optionalServices: ['device_information', 'battery_service'] // Get additional info if available\n        });\n\n        await connectToHRDevice(hrBluetoothDevice, callbacks, elements);\n        return true;\n\n    } catch (error) {\n        callbacks.onStatusUpdate(`Error: ${error.message}`);\n        if (elements.hrConnectionStatus) {\n            elements.hrConnectionStatus.textContent = 'Connection Failed';\n        }\n        console.error('Connection failed:', error);\n        return false;\n    }\n}\n\n/**\n * Connect to HR device with enhanced device information\n * @param {BluetoothDevice} device - The Bluetooth device to connect to\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */\nasync function connectToHRDevice(device, callbacks, elements) {\n    callbacks.onStatusUpdate('Connecting to device...');\n\n    // Get enhanced device information\n    const deviceInfo = await getEnhancedDeviceInfo(device);\n    if (elements.hrDeviceName) {\n        elements.hrDeviceName.textContent = `Device: ${deviceInfo}`;\n    }\n\n    // Add disconnect listener\n    hrDisconnectHandler = () => {\n        onHeartRateDisconnected(callbacks, elements);\n    };\n    device.addEventListener('gattserverdisconnected', hrDisconnectHandler);\n\n    const hrServer = await device.gatt.connect();\n    const hrService = await hrServer.getPrimaryService('heart_rate');\n    const hrCharacteristic = await hrService.getCharacteristic('heart_rate_measurement');\n\n    // Start notifications to receive heart rate data\n    await hrCharacteristic.startNotifications();\n    hrCharacteristic.addEventListener('characteristicvaluechanged', (event) => {\n        handleHeartRateChanged(event, callbacks);\n    });\n\n    callbacks.onStatusUpdate('Connected!');\n    if (elements.hrConnectionStatus) {\n        elements.hrConnectionStatus.textContent = 'Connected';\n    }\n}\n\n/**\n * Get enhanced device information for better identification\n * @param {BluetoothDevice} device - The Bluetooth device\n * @returns {Promise<string>} Enhanced device information string\n */\nasync function getEnhancedDeviceInfo(device) {\n    let deviceInfo = device.name || 'Unknown Device';\n\n    try {\n        const server = await device.gatt.connect();\n\n        // Try to get device information service for more details\n        try {\n            const deviceInfoService = await server.getPrimaryService('device_information');\n\n            // Try to get manufacturer name\n            const manufacturer = await readDeviceCharacteristic(deviceInfoService, 'manufacturer_name_string');\n            if (manufacturer) {\n                deviceInfo += ` (${manufacturer})`;\n            }\n\n            // Try to get model number\n            const model = await readDeviceCharacteristic(deviceInfoService, 'model_number_string');\n            if (model) {\n                deviceInfo += ` ${model}`;\n            }\n\n        } catch (e) { //eslint-disable-line no-unused-vars\n            // Device information service not available\n        }\n\n    } catch (e) { //eslint-disable-line no-unused-vars\n        // Connection failed or server not available, use basic info\n    }\n\n    // Add device ID as fallback identifier to distinguish identical names\n    if (device.id) {\n        deviceInfo += ` [${device.id.slice(-DEVICE_ID_SUFFIX_LENGTH)}]`;\n    }\n\n    return deviceInfo;\n}\n\n/**\n * Read a string characteristic from a Bluetooth service\n * @param {BluetoothRemoteGATTService} service - The Bluetooth GATT service\n * @param {string} characteristicName - Name of the characteristic to read\n * @returns {Promise<string|null>} Decoded string value or null if not available\n */\nasync function readDeviceCharacteristic(service, characteristicName) {\n    try {\n        const characteristic = await service.getCharacteristic(characteristicName);\n        const value = await characteristic.readValue();\n        return new TextDecoder().decode(value);\n    } catch (e) { //eslint-disable-line no-unused-vars\n        // Characteristic not available\n        return null;\n    }\n}\n\n/**\n * Connect to a speed/cadence sensor\n * @param {Object} callbacks - Object containing callback functions\n * @param {Object} elements - UI elements object\n */\nexport async function connectSpeedCadenceSensor(callbacks, elements) {\n    await requestWakeLock();\n\n    if (!navigator.bluetooth) {\n        callbacks.onStatusUpdate('Web Bluetooth API is not available.');\n        return;\n    }\n\n    try {\n        callbacks.onStatusUpdate('Scanning for sensors...');\n        if (elements.cadenceConnectionStatus) {\n            elements.cadenceConnectionStatus.textContent = 'Connecting...';\n        }\n\n        // Reset cadence variables for clean start\n        if (cadenceResetTimer) {\n            clearTimeout(cadenceResetTimer);\n            cadenceResetTimer = null;\n        }\n        lastCrankRevs = 0;\n        lastCrankTime = 0;\n\n        speedCadenceBluetoothDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [CYCLING_CADENCE_SERVICE_UUID],\n                },\n            ],\n        });\n\n        callbacks.onStatusUpdate('Connecting to device...');\n        if (elements.cadenceDeviceName) {\n            elements.cadenceDeviceName.textContent = `Device: ${speedCadenceBluetoothDevice.name}`;\n        }\n\n        speedCadenceBluetoothDevice.addEventListener('gattserverdisconnected', () => {\n            onCadenceDisconnected(callbacks, elements);\n        });\n\n        const server = await speedCadenceBluetoothDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(CSC_MEASUREMENT_CHARACTERISTIC_UUID);\n\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', (event) => {\n            handleSpeedCadenceMeasurement(event, callbacks);\n        });\n\n        callbacks.onStatusUpdate('Connected!');\n        if (elements.cadenceConnectionStatus) {\n            elements.cadenceConnectionStatus.textContent = 'Connected';\n        }\n\n        return true;\n    } catch (error) {\n        callbacks.onStatusUpdate(`Error: ${error.message}`);\n        if (elements.cadenceConnectionStatus) {\n            elements.cadenceConnectionStatus.textContent = 'Connection Failed';\n        }\n        console.error('Speed/Cadence connection failed:', error);\n        return false;\n    }\n}\n\n/**\n * Connect to a spy power meter\n * @param {Object} elements - UI elements object\n */\nexport async function connectSpyMeter(elements) {\n    if (!navigator.bluetooth) {\n        console.error('Web Bluetooth API is not available.');\n        return;\n    }\n\n    try {\n        if (elements.spyInstructionsElement) {\n            elements.spyInstructionsElement.style.display = 'none';\n        }\n        if (elements.spyStatusElement) {\n            elements.spyStatusElement.textContent = 'Scanning for spy power meter...';\n            elements.spyStatusElement.style.display = 'block';\n        }\n\n        // Scan for devices advertising the Cycling Power service\n        spyMeterDevice = await navigator.bluetooth.requestDevice({\n            filters: [\n                {\n                    services: [CYCLING_POWER_SERVICE_UUID],\n                },\n            ],\n        });\n\n        if (elements.spyStatusElement) {\n            elements.spyStatusElement.textContent = 'Connecting to spy device...';\n        }\n\n        spyMeterDevice.addEventListener('gattserverdisconnected', () => {\n            onSpyDisconnected(elements);\n        });\n\n        const server = await spyMeterDevice.gatt.connect();\n        const service = await server.getPrimaryService(CYCLING_POWER_SERVICE_UUID);\n        const characteristic = await service.getCharacteristic(\n            CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID\n        );\n\n        // Subscribe to power measurement notifications\n        await characteristic.startNotifications();\n        characteristic.addEventListener('characteristicvaluechanged', (event) => {\n            handleSpyPowerMeasurement(event, elements);\n        });\n\n        if (elements.spyStatusElement) {\n            elements.spyStatusElement.textContent = 'Spy connected!';\n            elements.spyStatusElement.style.display = 'none';\n        }\n\n        return true;\n    } catch (error) {\n        if (elements.spyStatusElement) {\n            elements.spyStatusElement.textContent = `Spy Error: ${error.message}`;\n        }\n        console.error('Spy connection failed:', error);\n        if (spyMeterDevice) {\n            spyMeterDevice.removeEventListener('gattserverdisconnected', () => {\n                onSpyDisconnected(elements);\n            });\n            spyMeterDevice = null;\n        }\n        // Show instructions again if connection failed\n        setTimeout(() => {\n            if (elements.spyStatusElement) {\n                elements.spyStatusElement.style.display = 'none';\n            }\n            if (elements.spyInstructionsElement) {\n                elements.spyInstructionsElement.style.display = 'block';\n            }\n        }, 3000);\n        return false;\n    }\n}\n\n/**\n * Disconnect spy meter\n * @param {Object} elements - UI elements object\n */\nexport function disconnectSpyMeter(elements) {\n    if (spyMeterDevice && spyMeterDevice.gatt.connected) {\n        spyMeterDevice.gatt.disconnect();\n    }\n    spyMeterDevice = null;\n    if (elements.spyValueElement) {\n        elements.spyValueElement.textContent = '--';\n    }\n    if (elements.spyStatusElement) {\n        elements.spyStatusElement.style.display = 'none';\n    }\n    if (elements.spyInstructionsElement) {\n        elements.spyInstructionsElement.style.display = 'block';\n    }\n}\n\n/**\n * Check if power meter is connected\n * @returns {boolean}\n */\nexport function isPowerMeterConnected() {\n    return powerMeterDevice && powerMeterDevice.gatt.connected;\n}\n\n/**\n * Check if spy meter is connected\n * @returns {boolean}\n */\nexport function isSpyMeterConnected() {\n    return spyMeterDevice && spyMeterDevice.gatt.connected;\n}\n\n/**\n * Check if heart rate monitor is connected\n * @returns {boolean}\n */\nexport function isHeartRateConnected() {\n    return hrBluetoothDevice && hrBluetoothDevice.gatt.connected;\n}\n\n/**\n * Check if speed/cadence sensor is connected\n * @returns {boolean}\n */\nexport function isSpeedCadenceConnected() {\n    return speedCadenceBluetoothDevice && speedCadenceBluetoothDevice.gatt.connected;\n}\n\n// Event handlers\nfunction handlePowerMeasurement(event, callbacks) {\n    const value = event.target.value;\n\n    // The data is a DataView object with a flags field and the power value.\n    // Ref: https://www.bluetooth.com/specifications/gatt/viewer?attributeXmlFile=org.bluetooth.characteristic.cycling_power_measurement.xml\n    const offset = 2;\n    const power = value.getInt16(offset, true);\n\n    callbacks.onPowerMeasurement(power);\n}\n\nfunction handleHeartRateChanged(event, callbacks) {\n    const value = event.target.value;\n    const heartRate = parseHeartRate(value);\n    callbacks.onHeartRateChange(heartRate);\n}\n\nfunction handleSpeedCadenceMeasurement(event, callbacks) {\n    const value = event.target.value;\n    const flags = value.getUint8(0);\n    let offset = 1;\n\n    const wheelRevsPresent = flags & 0x01;\n    const crankRevsPresent = flags & 0x02;\n\n    // Skip wheel revolution data since we don't need speed/distance\n    if (wheelRevsPresent) {\n        offset += 6; // Skip wheel data\n    }\n\n    if (crankRevsPresent) {\n        const cumulativeCrankRevolutions = value.getUint16(offset, true);\n        const lastCrankEventTime = value.getUint16(offset + 2, true); // 1/1024 seconds\n\n        if (lastCrankRevs > 0) {\n            const revs = cumulativeCrankRevolutions - lastCrankRevs;\n            const time = (lastCrankEventTime - lastCrankTime) / 1024; // in seconds\n            if (time > 0) {\n                const cadence = (revs / time) * 60; // RPM\n                const roundedCadence = Math.round(cadence);\n\n                callbacks.onCadenceChange(roundedCadence);\n\n                // Clear any existing reset timer\n                if (cadenceResetTimer) {\n                    clearTimeout(cadenceResetTimer);\n                }\n\n                // Set timer to reset cadence to 0 if no new data comes in\n                cadenceResetTimer = setTimeout(() => {\n                    callbacks.onCadenceChange(0);\n                    cadenceResetTimer = null;\n                }, CADENCE_RESET_TIMEOUT_MS);\n            }\n        }\n        lastCrankRevs = cumulativeCrankRevolutions;\n        lastCrankTime = lastCrankEventTime;\n    }\n}\n\nfunction handleSpyPowerMeasurement(event, elements) {\n    const value = event.target.value;\n    const data = new Uint8Array(value.buffer);\n\n    // Parse cycling power measurement data (same format as main power meter)\n    let instantaneousPower = 0;\n\n    if (data.length >= 4) {\n        // Read instantaneous power (16-bit unsigned integer, little endian)\n        instantaneousPower = data[2] + (data[3] << 8);\n    }\n\n    if (elements.spyValueElement) {\n        elements.spyValueElement.textContent = instantaneousPower;\n    }\n}\n\n// Disconnection handlers\nfunction onPowerMeterDisconnected(callbacks, elements) {\n    callbacks.onStatusUpdate('Device disconnected.');\n    if (elements.deviceNameElement) {\n        elements.deviceNameElement.textContent = '';\n    }\n    if (powerMeterDevice) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', () => {\n            onPowerMeterDisconnected(callbacks, elements);\n        });\n        powerMeterDevice = null;\n    }\n    callbacks.onDisconnected();\n}\n\nfunction onHeartRateDisconnected(callbacks, elements) {\n    callbacks.onStatusUpdate('Device disconnected.');\n    if (elements.hrConnectionStatus) {\n        elements.hrConnectionStatus.textContent = 'Disconnected';\n    }\n    if (elements.hrDeviceName) {\n        elements.hrDeviceName.textContent = '';\n    }\n    hrBluetoothDevice = null;\n    callbacks.onHeartRateChange(0);\n    if (callbacks.onDisconnected) {\n        callbacks.onDisconnected();\n    }\n}\n\nfunction onCadenceDisconnected(callbacks, elements) {\n    callbacks.onStatusUpdate('Device disconnected.');\n    if (elements.cadenceConnectionStatus) {\n        elements.cadenceConnectionStatus.textContent = 'Disconnected';\n    }\n    if (elements.cadenceDeviceName) {\n        elements.cadenceDeviceName.textContent = '';\n    }\n    speedCadenceBluetoothDevice = null;\n    callbacks.onCadenceChange(0);\n    if (callbacks.onDisconnected) {\n        callbacks.onDisconnected();\n    }\n\n    // Clear cadence reset timer and reset variables\n    if (cadenceResetTimer) {\n        clearTimeout(cadenceResetTimer);\n        cadenceResetTimer = null;\n    }\n    lastCrankRevs = 0;\n    lastCrankTime = 0;\n}\n\nfunction onSpyDisconnected(elements) {\n    spyMeterDevice = null;\n    if (elements.spyValueElement) {\n        elements.spyValueElement.textContent = '--';\n    }\n    if (elements.spyStatusElement) {\n        elements.spyStatusElement.textContent = 'Spy disconnected';\n        elements.spyStatusElement.style.display = 'block';\n    }\n    setTimeout(() => {\n        if (elements.spyStatusElement) {\n            elements.spyStatusElement.style.display = 'none';\n        }\n        if (elements.spyInstructionsElement) {\n            elements.spyInstructionsElement.style.display = 'block';\n        }\n    }, 3000);\n}\n\n/**\n * Clean up all Bluetooth event listeners\n * Call this function when the app is closing or resetting connections\n */\nexport function cleanupBluetoothEventListeners() {\n    if (powerMeterDevice && powerMeterDisconnectHandler) {\n        powerMeterDevice.removeEventListener('gattserverdisconnected', powerMeterDisconnectHandler);\n        powerMeterDisconnectHandler = null;\n    }\n\n    if (hrBluetoothDevice && hrDisconnectHandler) {\n        hrBluetoothDevice.removeEventListener('gattserverdisconnected', hrDisconnectHandler);\n        hrDisconnectHandler = null;\n    }\n\n    if (speedCadenceBluetoothDevice && speedCadenceDisconnectHandler) {\n        speedCadenceBluetoothDevice.removeEventListener('gattserverdisconnected', speedCadenceDisconnectHandler);\n        speedCadenceDisconnectHandler = null;\n    }\n\n    if (spyMeterDevice && spyMeterDisconnectHandler) {\n        spyMeterDevice.removeEventListener('gattserverdisconnected', spyMeterDisconnectHandler);\n        spyMeterDisconnectHandler = null;\n    }\n}","\n\n// Bluetooth Heart Rate Format Constants\nconst HR_VALUE_FORMAT_FLAG = 0x01; // Bit 0: Heart Rate Value Format (0 = UINT8, 1 = UINT16)\nconst HR_FLAGS_OFFSET = 0;\nconst HR_VALUE_OFFSET = 1;\n\n/**\n * Parse heart rate measurement from Bluetooth characteristic value\n * \n * The heart rate measurement is a DataView object following the Bluetooth\n * Heart Rate Measurement characteristic format (org.bluetooth.characteristic.heart_rate_measurement).\n * \n * Format:\n * - Byte 0: Flags (bit 0 indicates value format)\n * - Byte 1+: Heart rate value (UINT8 or UINT16 based on flags)\n * \n * @param {DataView} value - The Bluetooth characteristic value\n * @returns {number} Heart rate in beats per minute (BPM)\n */\nfunction parseHeartRate(value) {\n    const flags = value.getUint8(HR_FLAGS_OFFSET);\n    const isUint16Format = (flags & HR_VALUE_FORMAT_FLAG) !== 0;\n\n    if (isUint16Format) {\n        return value.getUint16(HR_VALUE_OFFSET, /* littleEndian= */ true);\n    }\n\n    return value.getUint8(HR_VALUE_OFFSET);\n}\n\nexport { parseHeartRate };","/**\n * Screen Wake Lock Management Module\n * Handles requesting and releasing screen wake locks to prevent device sleep during sessions\n */\n\nlet wakeLock = null;\n\n/**\n * Request a screen wake lock to prevent the device from sleeping\n * @returns {Promise<void>}\n */\nexport async function requestWakeLock() {\n    if ('wakeLock' in navigator) {\n        try {\n            wakeLock = await navigator.wakeLock.request('screen');\n            wakeLock.addEventListener('release', () => {\n                // Wake lock was released\n                console.log('Wake lock was released');\n            });\n        } catch (err) {\n            console.error(`${err.name}, ${err.message}`);\n        }\n    }\n}\n\n/**\n * Release the current wake lock\n * @returns {Promise<void>}\n */\nexport async function releaseWakeLock() {\n    if (wakeLock !== null) {\n        await wakeLock.release();\n        wakeLock = null;\n    }\n}\n\n/**\n * Check if wake lock is currently active\n * @returns {boolean}\n */\nexport function isWakeLockActive() {\n    return wakeLock !== null;\n}","/**\n * Export Modals Module\n * Handles modal-based export functionality with user-friendly dialogs\n */\n\n// Import required functions from data-export module\nimport {\n    exportAsJson,\n    exportAsCsv,\n    exportAsTcx,\n    exportAll\n} from './data-export.js';\n\n// Constants for modal animations\nconst MODAL_ANIMATION_DELAY_MS = 300;\n\n/**\n * Handle export error with user-friendly message\n * @param {Error} error - The error that occurred\n * @param {string} exportType - Type of export that failed\n */\nfunction handleExportError(error, exportType) {\n    const message = `Error during ${exportType} export: ${error.message}`;\n    console.error(message, error);\n    alert(message);\n}\n\n/**\n * Create and show basic export modal\n * @param {Object} dataStore - Data store object containing export data\n */\nexport function showBasicExportModal(dataStore) {\n    const modal = createExportModal('📄 Exports', 'Export your session data in various formats');\n\n    const buttons = [\n        {\n            text: '📥 Export All Files',\n            description: 'Download all export formats at once',\n            className: 'export-all primary',\n            onClick: async () => {\n                try {\n                    await exportAll({\n                        powerData: dataStore.powerData,\n                    });\n                    closeModal(modal);\n                    alert('All export files downloaded successfully!');\n                } catch (error) {\n                    handleExportError(error, 'all files');\n                }\n            }\n        },\n        {\n            text: '📊 Export JSON',\n            description: 'JavaScript Object Notation format',\n            onClick: () => {\n                try {\n                    exportAsJson(dataStore.powerData);\n                    closeModal(modal);\n                } catch (error) {\n                    handleExportError(error, 'JSON');\n                }\n            }\n        },\n        {\n            text: '📊 Export CSV',\n            description: 'Comma-Separated Values format',\n            onClick: () => {\n                try {\n                    exportAsCsv(dataStore.powerData);\n                    closeModal(modal);\n                } catch (error) {\n                    handleExportError(error, 'CSV');\n                }\n            }\n        },\n        {\n            text: '🏃 Export TCX',\n            description: 'Training Center XML format',\n            onClick: () => {\n                try {\n                    exportAsTcx(dataStore.powerData);\n                    closeModal(modal);\n                } catch (error) {\n                    handleExportError(error, 'TCX');\n                }\n            }\n        },\n    ];\n\n    addButtonsToModal(modal, buttons);\n    showModal(modal);\n}\n\n\n\n\n\n/**\n * Create and show utilities modal\n * @param {Object} dataStore - Data store object containing export data\n */\nexport function showUtilitiesModal(dataStore) {\n    const modal = createExportModal('🛠️ Utilities', 'Session management and utilities');\n\n    const buttons = [\n        {\n            text: '🗑️ Clear Session Data',\n            description: 'Clear all session data (cannot be undone)',\n            className: 'danger',\n            onClick: () => {\n                const confirmed = confirm(\n                    'Are you sure you want to clear all session data? This action cannot be undone.'\n                );\n                if (confirmed) {\n                    dataStore.resetAllSessionData();\n                    alert('Session data cleared successfully!');\n                    closeModal(modal);\n                }\n            }\n        }\n    ];\n\n    addButtonsToModal(modal, buttons);\n    showModal(modal);\n}\n\n/**\n * Create export modal with header\n * @param {string} title - Modal title\n * @param {string} description - Modal description\n * @returns {HTMLElement} Modal element\n */\nfunction createExportModal(title, description) {\n    const modal = document.createElement('div');\n    modal.className = 'export-modal';\n\n    modal.innerHTML = `\n        <div class=\"export-modal-content\">\n            <div class=\"export-modal-header\">\n                <h3 class=\"export-modal-title\">${title}</h3>\n                <button class=\"export-modal-close\" aria-label=\"Close modal\">&times;</button>\n            </div>\n            <div class=\"export-modal-description\">${description}</div>\n            <div class=\"export-modal-buttons\"></div>\n        </div>\n    `;\n\n    // Add close functionality\n    const closeBtn = modal.querySelector('.export-modal-close');\n    closeBtn.addEventListener('click', () => closeModal(modal));\n\n    modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n            closeModal(modal);\n        }\n    });\n\n    return modal;\n}\n\n/**\n * Add buttons to modal\n * @param {HTMLElement} modal - Modal element\n * @param {Array} buttons - Array of button configurations\n */\nfunction addButtonsToModal(modal, buttons) {\n    const buttonsContainer = modal.querySelector('.export-modal-buttons');\n\n    buttons.forEach((buttonConfig) => {\n        const button = document.createElement('button');\n        button.className = `export-modal-button ${buttonConfig.className || ''}`;\n        button.disabled = buttonConfig.disabled || false;\n\n        button.innerHTML = `\n            <span>${buttonConfig.text}</span>\n            ${buttonConfig.description ? `<small style=\"opacity: 0.7; font-size: 0.8em;\">${buttonConfig.description}</small>` : ''}\n        `;\n\n        button.addEventListener('click', buttonConfig.onClick);\n        buttonsContainer.appendChild(button);\n\n        // Add separator after \"Export All\" button\n        if (buttonConfig.className && buttonConfig.className.includes('export-all')) {\n            const separator = document.createElement('div');\n            separator.className = 'export-modal-separator';\n            separator.innerHTML = '<span>Individual Exports</span>';\n            buttonsContainer.appendChild(separator);\n        }\n    });\n}\n\n/**\n * Show modal with animation\n * @param {HTMLElement} modal - Modal element\n */\nfunction showModal(modal) {\n    document.body.appendChild(modal);\n    // Trigger animation\n    requestAnimationFrame(() => {\n        modal.classList.add('show');\n    });\n}\n\n/**\n * Close modal with animation\n * @param {HTMLElement} modal - Modal element\n */\nfunction closeModal(modal) {\n    modal.classList.remove('show');\n    setTimeout(() => {\n        if (modal.parentNode) {\n            document.body.removeChild(modal);\n        }\n    }, MODAL_ANIMATION_DELAY_MS);\n}\n\n/**\n * Setup export menu event listeners\n * @param {Object} dataStore - Data store object\n */\nexport function setupExportMenuListeners(dataStore) {\n    // Basic exports\n    const basicMenuItem = document.getElementById('exportMenuItem');\n    if (basicMenuItem) {\n        basicMenuItem.addEventListener('click', () => {\n            showBasicExportModal(dataStore);\n        });\n    }\n\n    // Utilities\n    const utilsMenuItem = document.getElementById('exportUtilsMenuItem');\n    if (utilsMenuItem) {\n        utilsMenuItem.addEventListener('click', () => {\n            showUtilitiesModal(dataStore);\n        });\n    }\n}","/**\n * Data Export Module\n * Handles all data export functionality including JSON, CSV, and TCX exports\n */\n\nimport { generateTcxString } from './create-tcx.js';\nimport { getCurrentDateString } from './ui-management.js';\n\n// Constants for export operations\nconst EXPORT_DELAY_MS = 100; // Delay between downloads to prevent browser blocking\nconst MIME_TYPES = {\n    JSON: 'application/json;charset=utf-8;',\n    CSV: 'text/csv;charset=utf-8;',\n    XML: 'application/xml;charset=utf-8;',\n};\n\n/**\n * Export power data as JSON\n * @param {Array} powerData - Array of power data points\n * @throws {Error} If power data is invalid or empty\n */\nexport function exportAsJson(powerData) {\n    if (!powerData || !Array.isArray(powerData) || powerData.length === 0) {\n        throw new Error('No valid power data available to export as JSON');\n    }\n\n    const jsonString = JSON.stringify(powerData, null, 2);\n    const blob = new Blob([jsonString], { type: MIME_TYPES.JSON });\n    downloadFile(blob, `power_data_${getCurrentDateString()}.json`);\n}\n\n/**\n * Export power data as CSV\n * @param {Array} powerData - Array of power data points\n * @throws {Error} If power data is invalid or empty\n */\nexport function exportAsCsv(powerData) {\n    if (!powerData || !Array.isArray(powerData) || powerData.length === 0) {\n        throw new Error('No valid power data available to export as CSV');\n    }\n\n    let csvContent = 'timestamp,power,heartRate,cadence\\n';\n    powerData.forEach((row) => {\n        // Safely handle missing properties with default empty strings\n        const timestamp = row.timestamp ?? '';\n        const power = row.power ?? '';\n        const heartRate = row.heartRate ?? '';\n        const cadence = row.cadence ?? '';\n        csvContent += `${timestamp},${power},${heartRate},${cadence}\\n`;\n    });\n\n    const blob = new Blob([csvContent], { type: MIME_TYPES.CSV });\n    downloadFile(blob, `power_data_${getCurrentDateString()}.csv`);\n}\n\n/**\n * Export power data as TCX file\n * @param {Array} powerData - Array of power data points\n * @throws {Error} If power data is invalid, empty, or TCX generation fails\n */\nexport function exportAsTcx(powerData) {\n    if (!powerData || !Array.isArray(powerData) || powerData.length === 0) {\n        throw new Error('No power data available to export as TCX');\n    }\n\n    try {\n        const tcxContent = generateTcxString(powerData);\n\n        if (!tcxContent) {\n            throw new Error('Failed to generate TCX content');\n        }\n\n        const blob = new Blob([tcxContent], { type: MIME_TYPES.XML });\n        downloadFile(blob, `power_data_${getCurrentDateString()}.tcx`);\n    } catch (error) {\n        console.error('Error generating TCX:', error);\n        throw error;\n    }\n}\n\n/**\n * Helper function to trigger file download\n * @param {Blob} blob - The blob to download\n * @param {string} filename - The filename for the download\n */\nfunction downloadFile(blob, filename) {\n    try {\n        if (!blob || !(blob instanceof Blob)) {\n            throw new Error('Invalid blob provided for download');\n        }\n\n        if (!filename || typeof filename !== 'string') {\n            throw new Error('Invalid filename provided for download');\n        }\n\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = filename;\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    } catch (error) {\n        console.error('Error during file download:', error);\n        throw error;\n    }\n}\n\n/**\n * Helper function to delay execution (used to prevent browser blocking on multiple downloads)\n * @param {number} ms - Milliseconds to delay\n * @returns {Promise<void>}\n */\nfunction delay(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n\n/**\n * Export all data formats at once\n * @param {Object} data - Object containing powerData, and powerAverages\n * @param {Array} data.powerData - Array of power data points\n * @param {Object} data.powerAverages - Power averages object\n * @throws {Error} If power data is invalid or if any exports fail\n */\nexport async function exportAll(data) {\n    const { powerData } = data;\n\n    if (!powerData || !Array.isArray(powerData) || powerData.length === 0) {\n        throw new Error('No valid power data available for export');\n    }\n\n    const errors = [];\n    const exports = [\n        { name: 'Summary JSON', fn: () => exportAsJson(powerData) },\n        { name: 'Summary CSV', fn: () => exportAsCsv(powerData) },\n        { name: 'TCX', fn: () => exportAsTcx(powerData) },\n    ];\n\n\n    // Execute exports with delays between them\n    for (const { name, fn } of exports) {\n        try {\n            fn();\n            console.log(`✓ ${name} exported`);\n        } catch (error) {\n            errors.push(`${name}: ${error.message}`);\n        }\n\n        await delay(EXPORT_DELAY_MS);\n    }\n\n    // Report any errors\n    if (errors.length > 0) {\n        const errorMessage = `Some exports failed:\\n${errors.join('\\n')}`;\n        console.warn('Export errors:', errors);\n        throw new Error(errorMessage);\n    }\n\n    console.log('✅ All exports completed successfully!');\n}","/**\n * TCX (Training Center XML) Generation Module\n * Generates Garmin Training Center Database XML files for cycling activities\n */\n\n/**\n * Check if a data point has valid power data\n * @param {Object} dataPoint - Data point to check\n * @returns {boolean} True if power is present and greater than 0\n */\nfunction hasValidPower(dataPoint) {\n  return dataPoint.power !== undefined && dataPoint.power > 0;\n}\n\n/**\n * Check if a timestamp is valid\n * @param {number} timestamp - Timestamp to validate\n * @returns {boolean} True if timestamp is valid\n */\nfunction isValidTimestamp(timestamp) {\n  return timestamp !== undefined && !isNaN(new Date(timestamp).getTime());\n}\n\n/**\n * Creates a trackpoint XML element for a single data point\n * @param {Object} dataPoint - Data point with time, power, heartRate, cadence\n * @returns {string} XML trackpoint string\n */\nfunction createTrackpoint(dataPoint) {\n  const xmlBuilders = {\n    time: (time) => `<Time>${new Date(time).toISOString()}</Time>`,\n    heartRate: (hr) => `\n<HeartRateBpm>\n  <Value>${hr}</Value>\n</HeartRateBpm>`.trim(),\n    cadence: (cad) => `<Cadence>${cad}</Cadence>`,\n    power: (pw) => `\n<Extensions>\n  <ns2:TPX>\n    <ns2:Watts>${pw}</ns2:Watts>\n  </ns2:TPX>\n</Extensions>`.trim(),\n  };\n\n  const contents = Object.keys(xmlBuilders)\n    .map((key) => {\n      if (dataPoint[key] === undefined) {\n        return '';\n      }\n      return xmlBuilders[key](dataPoint[key]);\n    })\n    .filter(Boolean) // Remove empty strings\n    .join('\\n');\n\n  return `\n<Trackpoint>\n  ${contents}\n</Trackpoint>`.trim();\n}\n\n/**\n * Normalize a data point to the format expected by TCX\n * @param {Object} item - Raw data point\n * @returns {Object} Normalized data point with time, power, heartRate, and cadence properties\n */\nfunction normalizeDataPoint(item) {\n  return {\n    time: item.timestamp,\n    ...(item.power !== undefined && { power: item.power }),\n    ...(item.heartRate !== undefined && { heartRate: item.heartRate }),\n    ...(item.cadence !== undefined && { cadence: item.cadence }),\n  };\n}\n\n/**\n * Remove leading and trailing data points without valid power data\n * @param {Array<Object>} dataPoints - Array of data points\n * @returns {Array<Object>} Trimmed array\n */\nfunction trimEmptyPowerEntries(dataPoints) {\n  const result = [...dataPoints];\n\n  // Remove leading entries without power\n  while (result.length > 0 && !hasValidPower(result[0])) {\n    result.shift();\n  }\n\n  // Remove trailing entries without power\n  while (result.length > 0 && !hasValidPower(result[result.length - 1])) {\n    result.pop();\n  }\n\n  return result;\n}\n\n/**\n * Generates TCX XML string from power data for cycling activities\n * @param {Array<Object>} powerData - Array of power measurement objects\n * @returns {string} Complete TCX XML string, or empty string if no valid data\n */\nfunction generateTcxString(powerData) {\n  // Validate input data\n  if (!Array.isArray(powerData) || powerData.length === 0) {\n    return '';\n  }\n\n  // Filter valid data points (must be objects with valid timestamps)\n  const validDataPoints = powerData.filter(\n    (dataPoint) =>\n      dataPoint &&\n      typeof dataPoint === 'object' &&\n      isValidTimestamp(dataPoint.timestamp)\n  );\n\n  if (validDataPoints.length === 0) {\n    return '';\n  }\n\n  // Normalize and sort data by time\n  const processedData = validDataPoints\n    .map(normalizeDataPoint)\n    .sort((a, b) => a.time - b.time);\n\n  // Remove entries without power at the beginning and end\n  const trimmedData = trimEmptyPowerEntries(processedData);\n\n  if (trimmedData.length === 0) {\n    return '';\n  }\n\n  // Generate trackpoints XML\n  const trackpoints = trimmedData.map(createTrackpoint).join('\\n');\n  const startTime = trimmedData[0].time;\n  const startTimeISO = new Date(startTime).toISOString();\n\n  // Build complete TCX document\n  const tcxXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<TrainingCenterDatabase\n  xmlns=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd\"\n  xmlns:ns2=\"http://www.garmin.com/xmlschemas/ActivityExtension/v2\">\n  <Activities>\n    <Activity Sport=\"Biking\">\n      <Id>${startTimeISO}</Id>\n      <Name>E Bike Indoor Cycling Trainer</Name>\n      <Lap StartTime=\"${startTimeISO}\">\n        <Track>\n        ${trackpoints}\n        </Track>\n      </Lap>\n    </Activity>\n  </Activities>\n</TrainingCenterDatabase>`;\n\n  return tcxXml;\n}\n\nexport { generateTcxString };","/**\n * Notification System Module\n * Handles displaying temporary notifications to the user\n */\n\n// Constants for notification system\nconst NOTIFICATION_DURATION_MS = 5000;\nconst ANIMATION_DURATION_MS = 300;\nconst NOTIFICATION_COLORS = {\n  success: '#4CAF50',\n  error: '#f44336',\n  warning: '#ff9800',\n  info: '#2196F3'\n};\n\n/**\n * Ensure animation styles are added to the document\n */\nfunction ensureAnimationStyles() {\n  if (!document.getElementById('notification-styles')) {\n    const style = document.createElement('style');\n    style.id = 'notification-styles';\n    style.textContent = `\n            @keyframes slideIn {\n                from { transform: translateX(100%); opacity: 0; }\n                to { transform: translateX(0); opacity: 1; }\n            }\n        `;\n    document.head.appendChild(style);\n  }\n}\n\n/**\n * Create a notification element with the specified styling\n * @param {string} message - The notification message\n * @param {string} backgroundColor - The background color for the notification\n * @returns {HTMLElement} The notification element\n */\nfunction createNotificationElement(message, backgroundColor) {\n  const notification = document.createElement('div');\n  notification.style.cssText = `\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: ${backgroundColor};\n        color: white;\n        padding: 1rem 1.5rem;\n        border-radius: 8px;\n        z-index: 1000;\n        font-size: 0.9rem;\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\n        animation: slideIn 0.3s ease-out;\n        max-width: 300px;\n        word-wrap: break-word;\n    `;\n  notification.textContent = message;\n  return notification;\n}\n\n/**\n * Remove a notification with animation\n * @param {HTMLElement} notification - The notification element to remove\n */\nfunction removeNotification(notification) {\n  notification.style.animation = 'slideIn 0.3s ease-out reverse';\n  setTimeout(() => {\n    if (notification.parentNode) {\n      notification.parentNode.removeChild(notification);\n    }\n  }, ANIMATION_DURATION_MS);\n}\n\n/**\n * Show a notification that the session was restored\n * @param {number} dataPointCount - Number of data points recovered\n */\nexport function showSessionRestoredNotification(dataPointCount) {\n  ensureAnimationStyles();\n\n  const message = `Session restored! ${dataPointCount} data points recovered.`;\n  const notification = createNotificationElement(message, NOTIFICATION_COLORS.success);\n\n  document.body.appendChild(notification);\n\n  // Remove notification after duration\n  setTimeout(() => {\n    removeNotification(notification);\n  }, NOTIFICATION_DURATION_MS);\n}\n\n/**\n * Show a generic notification with custom message and type\n * @param {string} message - The message to display\n * @param {string} type - The type of notification ('success', 'error', 'info', 'warning')\n * @param {number} duration - Duration in milliseconds to show the notification (default: 5000ms)\n */\nexport function showNotification(message, type = 'info', duration = NOTIFICATION_DURATION_MS) {\n  ensureAnimationStyles();\n\n  const backgroundColor = NOTIFICATION_COLORS[type] || NOTIFICATION_COLORS.info;\n  const notification = createNotificationElement(message, backgroundColor);\n\n  document.body.appendChild(notification);\n\n  // Remove notification after specified duration\n  setTimeout(() => {\n    removeNotification(notification);\n  }, duration);\n}","/**\n * UI Event Handlers Module\n * Handles all UI event listeners for toggles, menus, and interactions\n */\n\nimport { showAppInfo } from './app-info-modal.js';\n\n/**\n * Create a toggle handler for showing/hiding UI sections\n * @param {HTMLElement} toggleElement - The toggle button element\n * @param {HTMLElement} targetElement - The element to show/hide\n * @param {boolean} initiallyVisible - Whether the section should start visible\n * @param {Function} onChangeCallback - Optional callback to run when visibility changes\n * @returns {Function} Cleanup function to remove the event listener\n */\nfunction createToggleHandler(toggleElement, targetElement, initiallyVisible = true, onChangeCallback = null) {\n    let isVisible = initiallyVisible;\n\n    // Set initial state\n    if (initiallyVisible) {\n        toggleElement.classList.add('active');\n        targetElement.style.display = 'block';\n    } else {\n        toggleElement.classList.remove('active');\n        targetElement.style.display = 'none';\n    }\n\n    const handler = () => {\n        isVisible = !isVisible;\n\n        if (isVisible) {\n            targetElement.style.display = 'block';\n            toggleElement.classList.add('active');\n        } else {\n            targetElement.style.display = 'none';\n            toggleElement.classList.remove('active');\n        }\n\n        if (onChangeCallback) {\n            onChangeCallback();\n        }\n    };\n\n    toggleElement.addEventListener('click', handler);\n\n    // Return cleanup function\n    return () => toggleElement.removeEventListener('click', handler);\n}\n\n/**\n * Setup hamburger menu functionality\n * @param {Object} elements - UI elements object\n */\nexport function setupHamburgerMenu(elements) {\n    if (!elements.hamburgerBtn || !elements.menuDropdown) {\n        console.error('Hamburger menu elements not found:', {\n            hamburgerBtn: !!elements.hamburgerBtn,\n            menuDropdown: !!elements.menuDropdown,\n        });\n        return;\n    }\n\n    // Hamburger menu functionality\n    elements.hamburgerBtn.addEventListener('click', function () {\n        const isActive = elements.menuDropdown.classList.contains('active');\n        if (isActive) {\n            elements.menuDropdown.classList.remove('active');\n        } else {\n            elements.menuDropdown.classList.add('active');\n        }\n    });\n\n    // Close menu when clicking outside\n    document.addEventListener('click', function (event) {\n        if (!event.target.closest('.hamburger-menu')) {\n            elements.menuDropdown.classList.remove('active');\n        }\n    });\n}\n\n/**\n * Setup power averages toggle functionality\n * @param {Object} elements - UI elements object\n */\nexport function setupPowerAveragesToggle(elements) {\n    if (!elements.powerAveragesToggle || !elements.powerAveragesSection) {\n        console.error('Power averages toggle elements not found:', {\n            powerAveragesToggle: !!elements.powerAveragesToggle,\n            powerAveragesSection: !!elements.powerAveragesSection,\n        });\n        return;\n    }\n\n    createToggleHandler(\n        elements.powerAveragesToggle,\n        elements.powerAveragesSection,\n        true, // Initially visible\n        manageCollapsedSectionsLayout\n    );\n}\n\n/**\n * Setup metric toggle functionality\n * @param {Object} elements - UI elements object\n */\nexport function setupMetricToggles(elements) {\n    // Power metric toggle\n    if (elements.powerMetricToggle && elements.powerCard) {\n        createToggleHandler(elements.powerMetricToggle, elements.powerCard, true);\n    } else {\n        console.error('Power metric toggle elements not found');\n    }\n\n    // Heart rate metric toggle\n    if (elements.heartRateMetricToggle && elements.heartRateCard) {\n        createToggleHandler(elements.heartRateMetricToggle, elements.heartRateCard, true);\n    } else {\n        console.error('Heart rate metric toggle elements not found');\n    }\n\n    // Cadence metric toggle\n    if (elements.cadenceMetricToggle && elements.cadenceCard) {\n        createToggleHandler(elements.cadenceMetricToggle, elements.cadenceCard, true);\n    } else {\n        console.error('Cadence metric toggle elements not found');\n    }\n}\n\n\n\n/**\n * Setup spy mode toggle functionality\n * @param {Object} elements - UI elements object\n * @param {Function} disconnectSpyCallback - Callback to disconnect spy meter\n */\nexport function setupSpyModeToggle(elements, disconnectSpyCallback) {\n    if (!elements.spyModeToggle || !elements.spyModeSection) {\n        console.error('Spy mode toggle elements not found');\n        return;\n    }\n\n    let spyModeVisible = false; // Start hidden by default\n\n    elements.spyModeToggle.addEventListener('click', function () {\n        spyModeVisible = !spyModeVisible;\n\n        if (spyModeVisible) {\n            elements.spyModeSection.style.display = 'block';\n            elements.spyModeToggle.classList.add('active');\n            // Make sure instructions are visible when first enabling spy mode\n            if (elements.spyInstructionsElement) {\n                elements.spyInstructionsElement.style.display = 'block';\n            }\n        } else {\n            elements.spyModeSection.style.display = 'none';\n            elements.spyModeToggle.classList.remove('active');\n            // Disconnect spy device if connected\n            disconnectSpyCallback();\n            // Reset spy display elements\n            if (elements.spyValueElement) elements.spyValueElement.textContent = '--';\n            if (elements.spyStatusElement) elements.spyStatusElement.style.display = 'none';\n            if (elements.spyInstructionsElement) elements.spyInstructionsElement.style.display = 'block';\n        }\n    });\n}\n\n/**\n * Setup menu item functionality\n * @param {Object} elements - UI elements object\n */\nexport function setupMenuItems(elements) {\n    // Info functionality\n    if (elements.showInfoMenuItem) {\n        elements.showInfoMenuItem.addEventListener('click', function () {\n            showAppInfo();\n            // Close the menu after showing info\n            if (elements.menuDropdown) {\n                elements.menuDropdown.classList.remove('active');\n            }\n        });\n    } else {\n        console.error('Show info menu item not found');\n    }\n}\n\n/**\n * Function to update dashboard layout based on visible sections\n */\nfunction updateDashboardLayout() {\n    const dashboard = document.querySelector('.dashboard');\n    const powerAveragesSection = document.getElementById('powerAveragesSection');\n    const powerAveragesHidden = powerAveragesSection && powerAveragesSection.style.display === 'none';\n\n    if (dashboard) {\n        if (powerAveragesHidden) {\n            dashboard.classList.add('maximized');\n        } else {\n            dashboard.classList.remove('maximized');\n        }\n    }\n\n    // Manage horizontal layout for collapsed sections (excluding bottom controls)\n    manageCollapsedSectionsLayout();\n}\n\n/**\n * Function to manage horizontal layout of collapsed sections\n */\nfunction manageCollapsedSectionsLayout() {\n    const dashboard = document.querySelector('.dashboard');\n\n    if (!dashboard) return;\n\n    // Only manage power averages section for collapsed layout -\n    // connect and export sections are now bottom controls and stay at bottom\n    // Note: collapsedSections logic simplified since only power averages section is managed now\n\n    // Remove any existing collapsed sections row\n    const existingRow = document.querySelector('.collapsed-sections-row');\n    if (existingRow) {\n        // Move sections back to their original positions\n        const sectionsInRow = existingRow.querySelectorAll('.power-averages-section');\n        sectionsInRow.forEach((section) => {\n            // Insert sections back after the dashboard\n            dashboard.parentNode.insertBefore(section, dashboard.nextSibling);\n        });\n        existingRow.remove();\n    }\n\n    // Power averages section doesn't need horizontal grouping since it's the only\n    // section that can be managed this way now\n    dashboard.classList.remove('has-collapsed-sections');\n}\n\n/**\n * Initialize all UI sections\n * @param {Object} elements - UI elements object\n */\nexport function initializeSections(elements) {\n    // Initialize power averages section as visible by default\n    if (elements.powerAveragesSection) {\n        elements.powerAveragesSection.style.display = 'block';\n    }\n\n    updateDashboardLayout();\n}","/**\n * Show application information and usage instructions\n */\nfunction showAppInfo() {\n    const modal = document.createElement('div');\n    modal.className = 'modal-backdrop';\n    modal.style.cssText = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        background: rgba(0, 0, 0, 0.8);\n        display: flex;\n        justify-content: center;\n        align-items: center;\n        z-index: 1000;\n    `;\n\n    const modalContent = document.createElement('div');\n    modalContent.className = 'modal';\n    modalContent.style.cssText = `\n        background: #1a1a2e;\n        border-radius: 12px;\n        padding: 2rem;\n        max-width: 600px;\n        max-height: 80vh;\n        overflow-y: auto;\n        margin: 20px;\n        border: 1px solid rgba(255, 255, 255, 0.2);\n    `;\n\n    // Create QR code canvas\n    const qrCanvas = document.createElement('canvas');\n    qrCanvas.width = 200;\n    qrCanvas.height = 200;\n    qrCanvas.style.cssText = `\n        background: white;\n        border-radius: 8px;\n        margin: 1rem auto;\n        max-width: 100%;\n        height: auto;\n        display: block;\n    `;\n\n    modalContent.innerHTML = `\n        <div style=\"text-align: center; margin-bottom: 1.5rem;\">\n            <h2 style=\"color: #3498db; margin: 0 0 0.5rem 0; font-size: 1.8rem;\">🚴 Web Bluetooth Power Meter</h2>\n            <p style=\"color: #cccccc; margin: 0; font-size: 1rem;\">Real-time cycling data analysis</p>\n        </div>\n\n        <div style=\"color: #ffffff; line-height: 1.6;\">\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">📱 Share This App</h3>\n            <div style=\"text-align: center; margin-bottom: 1rem;\">\n                <div id=\"qr-container\" style=\"margin: 1rem 0;\"></div>\n                <p style=\"color: #ffffff; margin: 0.5rem 0; font-weight: 600;\">Scan to access on any device</p>\n                <a href=\"https://colscoding.github.io/power-saver/\" target=\"_blank\" style=\"\n                    color: #9b59b6; \n                    text-decoration: none; \n                    font-size: 0.9rem;\n                    word-break: break-all;\n                    line-height: 1.4;\n                \">https://colscoding.github.io/power-saver/</a>\n            </div>\n\n            <h3 style=\"color: #f39c12; margin: 1.5rem 0 1rem 0;\">📱 What is this app?</h3>\n            <p style=\"margin-bottom: 1rem;\">\n                This is a web-based power meter application that connects to Bluetooth devices:\n            </p>\n            <ul style=\"margin: 0 0 1rem 1rem; padding-left: 1rem;\">\n                <li>cycling power meter</li>\n                <li>cadence sensor</li>\n                <li>heart rate sensor</li>\n            </ul>\n        </div>\n\n        <div style=\"text-align: center; margin-top: 2rem;\">\n            <button id=\"closeInfoModal\" style=\"\n                background: linear-gradient(135deg, #3498db 0%, #2980b9 100%);\n                color: white;\n                border: none;\n                padding: 12px 24px;\n                border-radius: 8px;\n                font-size: 16px;\n                font-weight: 600;\n                cursor: pointer;\n                transition: all 0.3s ease;\n            \">Got it!</button>\n        </div>\n    `;\n\n    // Insert QR code canvas\n    const qrContainer = modalContent.querySelector('#qr-container');\n    qrContainer.appendChild(qrCanvas);\n\n    // Generate QR code\n    generateQRCode(qrCanvas);\n\n    modal.appendChild(modalContent);\n    document.body.appendChild(modal);\n\n    // Close modal event listeners\n    const closeButton = modalContent.querySelector('#closeInfoModal');\n    const closeModal = () => {\n        document.body.removeChild(modal);\n    };\n\n    closeButton.addEventListener('click', closeModal);\n    modal.addEventListener('click', (e) => {\n        if (e.target === modal) {\n            closeModal();\n        }\n    });\n\n    // Close on Escape key\n    const handleEscape = (e) => {\n        if (e.key === 'Escape') {\n            closeModal();\n            document.removeEventListener('keydown', handleEscape);\n        }\n    };\n    document.addEventListener('keydown', handleEscape);\n\n    // Add hover effect to button\n    closeButton.addEventListener('mouseenter', () => {\n        closeButton.style.transform = 'translateY(-2px)';\n        closeButton.style.boxShadow = '0 8px 24px rgba(52, 152, 219, 0.4)';\n    });\n\n    closeButton.addEventListener('mouseleave', () => {\n        closeButton.style.transform = 'translateY(0)';\n        closeButton.style.boxShadow = 'none';\n    });\n}\n\n/**\n * Generate QR code on canvas using inline base64 data\n */\nfunction generateQRCode(canvas) {\n    const ctx = canvas.getContext('2d');\n    const size = canvas.width;\n\n    // Clear canvas with white background\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(0, 0, size, size);\n\n    // Base64 encoded QR code data\n    const qrBase64 = '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';\n\n    // Load base64 encoded QR code\n    const img = new Image();\n\n    img.onload = function () {\n        ctx.drawImage(img, 0, 0, size, size);\n    };\n\n    img.onerror = function () {\n        // Fallback: draw a simple pattern if base64 data fails to load\n        drawFallbackQR(ctx, size);\n    };\n\n    img.src = 'data:image/png;base64,' + qrBase64;\n}\n\n/**\n * Fallback QR code representation when local image is unavailable\n */\nfunction drawFallbackQR(ctx, size) {\n    ctx.fillStyle = '#000000';\n    ctx.font = '12px Arial';\n    ctx.textAlign = 'center';\n\n    // Draw a simple grid pattern\n    const cellSize = size / 25;\n    for (let i = 0; i < 25; i++) {\n        for (let j = 0; j < 25; j++) {\n            if ((i + j) % 3 === 0 || i === 0 || i === 24 || j === 0 || j === 24) {\n                ctx.fillRect(i * cellSize, j * cellSize, cellSize, cellSize);\n            }\n        }\n    }\n\n    // Add text in center\n    ctx.fillStyle = '#ffffff';\n    ctx.fillRect(size * 0.2, size * 0.4, size * 0.6, size * 0.2);\n    ctx.fillStyle = '#000000';\n    ctx.fillText('QR Code', size / 2, size / 2 - 10);\n    ctx.fillText('Unavailable', size / 2, size / 2 + 10);\n}\n\nexport { showAppInfo };"],"names":["$d8d8e1ee9f4f63bb$var$avg10sCurrentElement","$d8d8e1ee9f4f63bb$var$avg10sBestElement","$d8d8e1ee9f4f63bb$var$avg20sCurrentElement","$d8d8e1ee9f4f63bb$var$avg20sBestElement","$d8d8e1ee9f4f63bb$var$avg30sCurrentElement","$d8d8e1ee9f4f63bb$var$avg30sBestElement","$d8d8e1ee9f4f63bb$var$avg40sCurrentElement","$d8d8e1ee9f4f63bb$var$avg40sBestElement","$d8d8e1ee9f4f63bb$var$avg50sCurrentElement","$d8d8e1ee9f4f63bb$var$avg50sBestElement","$d8d8e1ee9f4f63bb$var$avg1mCurrentElement","$d8d8e1ee9f4f63bb$var$avg1mBestElement","$d8d8e1ee9f4f63bb$var$avg2mCurrentElement","$d8d8e1ee9f4f63bb$var$avg2mBestElement","$d8d8e1ee9f4f63bb$var$avg3mCurrentElement","$d8d8e1ee9f4f63bb$var$avg3mBestElement","$d8d8e1ee9f4f63bb$var$avg4mCurrentElement","$d8d8e1ee9f4f63bb$var$avg4mBestElement","$d8d8e1ee9f4f63bb$var$avg5mCurrentElement","$d8d8e1ee9f4f63bb$var$avg5mBestElement","$cc35ee5c64337d79$var$SESSION_STORAGE_KEY","$cc35ee5c64337d79$export$3b97cfd23e0d13d8","dataStore","sessionData","timestamp","Date","now","powerData","lastPowerValue","lastHeartRateValue","lastCadenceValue","sessionStartTime","localStorage","setItem","JSON","stringify","error","console","warn","$cc35ee5c64337d79$export$37b6cafab9b29f47","removeItem","$d8d8e1ee9f4f63bb$var$TIME_PERIODS_MS","$d8d8e1ee9f4f63bb$var$powerReadings","$d8d8e1ee9f4f63bb$var$currentTenSecondReadings","$d8d8e1ee9f4f63bb$var$tenSecondAverages","$d8d8e1ee9f4f63bb$var$powerAverages","current","best","$d8d8e1ee9f4f63bb$export$890cc05f11700e2c","textContent","$d8d8e1ee9f4f63bb$export$153010588d52d05c","period","Object","keys","$26bf0f38c1315f82$export$7a5d735b2ab6389d","powerValueElement","hrValueElement","cadenceValueElement","deviceNameElement","hrDeviceName","cadenceDeviceName","statusText","hrStatusText","cadenceStatusText","hrConnectionStatus","cadenceConnectionStatus","powerMeterConnectButton","hrConnectButton","speedCadenceConnectButton","exportButtons","json","csv","tcx","image","clearSession","powerAveragesSection","hamburgerBtn","menuDropdown","powerAveragesToggle","powerMetricToggle","heartRateMetricToggle","cadenceMetricToggle","showInfoMenuItem","spyModeToggle","powerCard","heartRateCard","cadenceCard","spyCard","spyModeSection","spyValueElement","spyStatusElement","spyInstructionsElement","$26bf0f38c1315f82$export$38408f60e368349d","value","displayValue","setAttribute","$26bf0f38c1315f82$export$d9870def68db0ffb","$26bf0f38c1315f82$export$b5051178064abb72","year","getFullYear","month","String","getMonth","padStart","day","getDate","$ee8dba17fe5eb4b4$export$1d0d101be0e1eace","navigator","$ee8dba17fe5eb4b4$var$wakeLock","wakeLock","request","addEventListener","log","err","name","message","$305aaf8b9a43c26d$var$CYCLING_POWER_SERVICE_UUID","$305aaf8b9a43c26d$var$CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID","$305aaf8b9a43c26d$var$CYCLING_CADENCE_SERVICE_UUID","$305aaf8b9a43c26d$var$powerMeterDevice","$305aaf8b9a43c26d$var$hrBluetoothDevice","$305aaf8b9a43c26d$var$speedCadenceBluetoothDevice","$305aaf8b9a43c26d$var$spyMeterDevice","$305aaf8b9a43c26d$var$hrDisconnectHandler","$305aaf8b9a43c26d$var$lastCrankRevs","$305aaf8b9a43c26d$var$lastCrankTime","$305aaf8b9a43c26d$var$cadenceResetTimer","$305aaf8b9a43c26d$export$7cd63989f2e13954","callbacks","elements","bluetooth","onStatusUpdate","requestDevice","filters","services","$305aaf8b9a43c26d$var$onPowerMeterDisconnected","server","gatt","connect","service","getPrimaryService","characteristic","getCharacteristic","featureCharacteristic","readValue","startNotifications","event","power","target","getInt16","onPowerMeasurement","removeEventListener","$305aaf8b9a43c26d$export$830e9b592dbab083","optionalServices","$305aaf8b9a43c26d$var$connectToHRDevice","device","deviceInfo","$305aaf8b9a43c26d$var$getEnhancedDeviceInfo","onHeartRateChange","onDisconnected","hrServer","hrService","hrCharacteristic","heartRate","flags","getUint8","getUint16","deviceInfoService","manufacturer","$305aaf8b9a43c26d$var$readDeviceCharacteristic","model","e","id","slice","characteristicName","TextDecoder","decode","$305aaf8b9a43c26d$export$15696ad475844a91","clearTimeout","onCadenceChange","$305aaf8b9a43c26d$var$handleSpeedCadenceMeasurement","offset","wheelRevsPresent","cumulativeCrankRevolutions","lastCrankEventTime","revs","time","roundedCadence","Math","round","setTimeout","$305aaf8b9a43c26d$export$bee1a28fa3cc4e9a","style","display","$305aaf8b9a43c26d$var$onSpyDisconnected","data","Uint8Array","buffer","instantaneousPower","length","$305aaf8b9a43c26d$export$f8a9e6c57769fd82","connected","disconnect","$bdf94e4d5edca10a$var$hasValidPower","dataPoint","undefined","$bdf94e4d5edca10a$var$createTrackpoint","xmlBuilders","toISOString","hr","trim","cadence","cad","pw","contents","map","key","filter","Boolean","join","$bdf94e4d5edca10a$var$normalizeDataPoint","item","$8ca4b0f2a2d350fa$export$20b155984c11fcae","Array","isArray","Error","$8ca4b0f2a2d350fa$var$downloadFile","Blob","type","$8ca4b0f2a2d350fa$export$dfe05421fb7443f9","csvContent","forEach","row","$8ca4b0f2a2d350fa$export$55f444e58fd8eb49","tcxContent","validDataPoints","isNaN","getTime","trimmedData","$bdf94e4d5edca10a$var$trimEmptyPowerEntries","dataPoints","result","shift","pop","sort","a","b","trackpoints","startTimeISO","blob","filename","url","URL","createObjectURL","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","$8ca4b0f2a2d350fa$export$64da5a70f1570a50","errors","fn","push","Promise","resolve","errorMessage","$1fea2fc27e5705f2$var$handleExportError","exportType","alert","$1fea2fc27e5705f2$var$createExportModal","title","description","modal","className","innerHTML","closeBtn","querySelector","$1fea2fc27e5705f2$var$closeModal","$1fea2fc27e5705f2$var$addButtonsToModal","buttons","buttonsContainer","buttonConfig","button","disabled","text","onClick","includes","separator","$1fea2fc27e5705f2$var$showModal","requestAnimationFrame","classList","add","remove","parentNode","$d455cb11b3bc64fd$var$createToggleHandler","toggleElement","targetElement","initiallyVisible","onChangeCallback","isVisible","handler","$d455cb11b3bc64fd$var$manageCollapsedSectionsLayout","dashboard","existingRow","sectionsInRow","querySelectorAll","section","insertBefore","nextSibling","$b63be9b0371e788c$var$powerData","$b63be9b0371e788c$var$lastPowerValue","$b63be9b0371e788c$var$lastHeartRateValue","$b63be9b0371e788c$var$lastCadenceValue","$b63be9b0371e788c$var$sessionStartTime","$b63be9b0371e788c$var$dataLoggerInterval","$b63be9b0371e788c$var$dataStore","resetAllSessionData","$b63be9b0371e788c$var$powerMeterCallbacks","retentionCutoff","reading","currPowerAverage","reduce","sum","r","splice","periodKey","periodMs","entries","nWindows","ceil","average","avgWindows","total","clearInterval","$b63be9b0371e788c$var$updateAllConnectButtonVisibility","$b63be9b0371e788c$var$heartRateCallbacks","$b63be9b0371e788c$var$cadenceCallbacks","connectionStates","powerMeter","speedCadence","$b63be9b0371e788c$var$initializeApp","getElementById","powerAveragesHidden","contains","closest","disconnectSpyCallback","spyModeVisible","cssText","modalContent","qrCanvas","width","height","qrContainer","$c8a6253a3b39b109$var$generateQRCode","canvas","ctx","getContext","size","fillStyle","fillRect","img","Image","onload","drawImage","onerror","font","textAlign","cellSize","i","j","fillText","src","closeButton","closeModal","handleEscape","transform","boxShadow","setInterval","basicMenuItem","utilsMenuItem","confirm","savedData","getItem","parse","sessionAge","backdrop","dataCount","$b63be9b0371e788c$var$restoreSessionData","values","dataPointCount","head","notification","$e75b18aae82f997e$var$createNotificationElement","backgroundColor","animation","window"],"version":3,"file":"power-saver.d29494b2.js.map"}