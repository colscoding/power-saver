let wakeLock=null;async function requestWakeLock(){if("wakeLock"in navigator)try{wakeLock=await navigator.wakeLock.request("screen"),console.log("Screen Wake Lock is active."),wakeLock.addEventListener("release",()=>{console.log("Screen Wake Lock was released.")})}catch(e){console.error(`${e.name}, ${e.message}`)}}async function releaseWakeLock(){null!==wakeLock&&(await wakeLock.release(),wakeLock=null)}function formatXml(e){let t=e.replace(/(>)(<)(\/*)/g,"$1\n$2$3"),n=0;return t.split("\n").map(e=>{let t=0;e.match(/.+<\/\w[^>]*>$/)?t=0:e.match(/^<\/\w/)&&n>0?n-=1:t=+!!e.match(/^<\w[^>]*[^\/]>.*$/);let o="  ".repeat(n);return n+=t,o+e}).join("\n")}function createTrackpoint(e){let t={time:e=>`<Time>${new Date(e).toISOString()}</Time>`,heartRate:e=>`
<HeartRateBpm>
  <Value>${e}</Value>
</HeartRateBpm>
            `.trim(),cadence:e=>`<Cadence>${e}</Cadence>`,power:e=>`
<Extensions>
  <ns2:TPX>
    <ns2:Watts>${e}</ns2:Watts>
  </ns2:TPX>
</Extensions>
            `.trim()},n=Object.keys(t).map(n=>void 0===e[n]?"":t[n](e[n])).filter(e=>e).join("\n");return`
<Trackpoint>
  ${n}
</Trackpoint>
`.trim()}function generateTcxString(e){if(!Array.isArray(e)||0===e.length)throw Error("Input power data array is empty or invalid");let t=e.filter(e=>e&&"object"==typeof e&&void 0!==e.timestamp&&!isNaN(new Date(e.timestamp).getTime()));if(0===t.length)throw Error("No valid data points found");let n=t.map(e=>({time:e.timestamp,...void 0!==e.power&&{power:e.power},...void 0!==e.heartRate&&{heartRate:e.heartRate},...void 0!==e.cadence&&{cadence:e.cadence}})).sort((e,t)=>e.time-t.time),o=e=>!e.power||e.power<=0;for(;n.length>0&&o(n[0]);)n.shift();for(;n.length>0&&o(n[n.length-1]);)n.pop();if(0===n.length)throw Error("No valid power data found after processing");let a=n.map(createTrackpoint).join("\n"),r=new Date(n[0].time).toISOString();return formatXml(`<?xml version="1.0" encoding="UTF-8"?>
<TrainingCenterDatabase
  xmlns="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.garmin.com/xmlschemas/TrainingCenterDatabase/v2 http://www.garmin.com/xmlschemas/TrainingCenterDatabasev2.xsd"
  xmlns:ns2="http://www.garmin.com/xmlschemas/ActivityExtension/v2">
  <Activities>
    <Activity Sport="Biking">
      <Id>${r}</Id>
      <Name>Indoor Cycling</Name>
      <Lap StartTime="${r}">
        <Track>
        ${a}
        </Track>
      </Lap>
    </Activity>
  </Activities>
</TrainingCenterDatabase>`)}let connectButton=document.getElementById("connectButton"),statusText=document.getElementById("status"),powerValueElement=document.getElementById("power-value"),deviceNameElement=document.getElementById("device-name"),exportButtons=document.getElementById("export-buttons"),exportJsonButton=document.getElementById("exportJsonButton"),exportCsvButton=document.getElementById("exportCsvButton"),exportTcxButton=document.getElementById("exportTcxButton"),exportRawJsonButton=document.getElementById("exportRawJsonButton"),exportRawCsvButton=document.getElementById("exportRawCsvButton"),avg10sCurrentElement=document.getElementById("avg10s-current"),avg10sBestElement=document.getElementById("avg10s-best"),avg30sCurrentElement=document.getElementById("avg30s-current"),avg30sBestElement=document.getElementById("avg30s-best"),avg1mCurrentElement=document.getElementById("avg1m-current"),avg1mBestElement=document.getElementById("avg1m-best"),avg2mCurrentElement=document.getElementById("avg2m-current"),avg2mBestElement=document.getElementById("avg2m-best"),avg4mCurrentElement=document.getElementById("avg4m-current"),avg4mBestElement=document.getElementById("avg4m-best"),avg8mCurrentElement=document.getElementById("avg8m-current"),avg8mBestElement=document.getElementById("avg8m-best"),toggleConnectSection=document.getElementById("toggleConnectSection"),toggleExportSection=document.getElementById("toggleExportSection"),connectSection=document.getElementById("connectSection"),exportSection=document.getElementById("exportSection"),powerAveragesSection=document.getElementById("powerAveragesSection"),connectToggleText=document.getElementById("connectToggleText"),exportToggleText=document.getElementById("exportToggleText"),hamburgerBtn=document.getElementById("hamburgerButton"),menuDropdown=document.getElementById("menuDropdown"),powerAveragesToggle=document.getElementById("powerAveragesToggle"),powerMetricToggle=document.getElementById("powerMetricToggle"),heartRateMetricToggle=document.getElementById("heartRateMetricToggle"),cadenceMetricToggle=document.getElementById("cadenceMetricToggle"),connectSectionToggle=document.getElementById("connectSectionToggle"),exportSectionToggle=document.getElementById("exportSectionToggle"),powerCard=document.querySelector(".power-card"),heartRateCard=document.querySelector(".hr-card"),cadenceCard=document.querySelector(".cadence-card");console.log("Hamburger elements:",{hamburgerBtn:hamburgerBtn,menuDropdown:menuDropdown,powerAveragesToggle:powerAveragesToggle,powerMetricToggle:powerMetricToggle,heartRateMetricToggle:heartRateMetricToggle,cadenceMetricToggle:cadenceMetricToggle,connectSectionToggle:connectSectionToggle,exportSectionToggle:exportSectionToggle}),console.log("Metric card elements:",{powerCard:powerCard,heartRateCard:heartRateCard,cadenceCard:cadenceCard});let powerStatusIndicator=document.getElementById("power-status-indicator"),hrStatusIndicator=document.getElementById("hr-status-indicator"),cadenceStatusIndicator=document.getElementById("cadence-status-indicator");if(powerStatusIndicator.className="status-indicator",hrStatusIndicator.className="status-indicator",cadenceStatusIndicator.className="status-indicator",hamburgerBtn&&menuDropdown?(hamburgerBtn.addEventListener("click",function(){console.log("Hamburger button clicked"),menuDropdown.classList.contains("active")?(menuDropdown.classList.remove("active"),console.log("Menu dropdown hidden")):(menuDropdown.classList.add("active"),console.log("Menu dropdown shown"))}),document.addEventListener("click",function(e){e.target.closest(".hamburger-menu")||menuDropdown.classList.remove("active")})):console.error("Hamburger menu elements not found:",{hamburgerBtn:!!hamburgerBtn,menuDropdown:!!menuDropdown}),powerAveragesToggle&&powerAveragesSection){let e=!1;powerAveragesToggle.addEventListener("click",function(){console.log("Power averages toggle clicked"),(e=!e)?(powerAveragesSection.style.display="block",powerAveragesToggle.classList.add("active"),console.log("Power averages shown")):(powerAveragesSection.style.display="none",powerAveragesToggle.classList.remove("active"),console.log("Power averages hidden")),manageCollapsedSectionsLayout()})}else console.error("Power averages toggle elements not found:",{powerAveragesToggle:!!powerAveragesToggle,powerAveragesSection:!!powerAveragesSection});if(powerMetricToggle&&powerCard){let e=!0;powerMetricToggle.classList.add("active"),powerMetricToggle.addEventListener("click",function(){console.log("Power metric toggle clicked"),(e=!e)?(powerCard.style.display="block",powerMetricToggle.classList.add("active"),console.log("Power metric shown")):(powerCard.style.display="none",powerMetricToggle.classList.remove("active"),console.log("Power metric hidden"))})}else console.error("Power metric toggle elements not found:",{powerMetricToggle:!!powerMetricToggle,powerCard:!!powerCard});if(heartRateMetricToggle&&heartRateCard){let e=!0;heartRateMetricToggle.classList.add("active"),heartRateMetricToggle.addEventListener("click",function(){console.log("Heart rate metric toggle clicked"),(e=!e)?(heartRateCard.style.display="block",heartRateMetricToggle.classList.add("active"),console.log("Heart rate metric shown")):(heartRateCard.style.display="none",heartRateMetricToggle.classList.remove("active"),console.log("Heart rate metric hidden"))})}else console.error("Heart rate metric toggle elements not found:",{heartRateMetricToggle:!!heartRateMetricToggle,heartRateCard:!!heartRateCard});if(cadenceMetricToggle&&cadenceCard){let e=!0;cadenceMetricToggle.classList.add("active"),cadenceMetricToggle.addEventListener("click",function(){console.log("Cadence metric toggle clicked"),(e=!e)?(cadenceCard.style.display="block",cadenceMetricToggle.classList.add("active"),console.log("Cadence metric shown")):(cadenceCard.style.display="none",cadenceMetricToggle.classList.remove("active"),console.log("Cadence metric hidden"))})}else console.error("Cadence metric toggle elements not found:",{cadenceMetricToggle:!!cadenceMetricToggle,cadenceCard:!!cadenceCard});if(connectSectionToggle&&connectSection){let e=!0;connectSectionToggle.classList.add("active"),connectSectionToggle.addEventListener("click",function(){console.log("Connect section toggle clicked"),(e=!e)?(connectSection.style.display="block",connectSectionToggle.classList.add("active"),console.log("Connect section shown")):(connectSection.style.display="none",connectSectionToggle.classList.remove("active"),console.log("Connect section hidden"))})}else console.error("Connect section toggle elements not found:",{connectSectionToggle:!!connectSectionToggle,connectSection:!!connectSection});if(exportSectionToggle&&exportSection){let e=!1;exportSectionToggle.addEventListener("click",function(){console.log("Export section toggle clicked"),(e=!e)?(exportSection.style.display="block",exportSectionToggle.classList.add("active"),console.log("Export section shown")):(exportSection.style.display="none",exportSectionToggle.classList.remove("active"),console.log("Export section hidden"))})}else console.error("Export section toggle elements not found:",{exportSectionToggle:!!exportSectionToggle,exportSection:!!exportSection});function updateDashboardLayout(){let e=document.querySelector(".dashboard");powerAveragesSection&&"none"===powerAveragesSection.style.display?e.classList.add("maximized"):e.classList.remove("maximized"),manageCollapsedSectionsLayout()}function manageCollapsedSectionsLayout(){let e=document.querySelector(".dashboard");[powerAveragesSection.classList.contains("collapsed")?powerAveragesSection:null].filter(e=>null!==e);let t=document.querySelector(".collapsed-sections-row");t&&(t.querySelectorAll(".power-averages-section").forEach(t=>{e.parentNode.insertBefore(t,e.nextSibling)}),t.remove()),e.classList.remove("has-collapsed-sections")}toggleConnectSection.addEventListener("click",()=>{let e=connectSection.querySelectorAll("button:not(.section-toggle-button)"),t=connectSection.querySelector(".section-header");"none"===e[0].style.display?(e.forEach(e=>e.style.display="block"),connectToggleText.textContent="Hide Connect Devices",toggleConnectSection.classList.remove("collapsed"),connectSection.classList.remove("collapsed"),t.classList.remove("collapsed")):(e.forEach(e=>e.style.display="none"),connectToggleText.textContent="Show Connect Devices",toggleConnectSection.classList.add("collapsed"),connectSection.classList.add("collapsed"),t.classList.add("collapsed"))}),toggleExportSection.addEventListener("click",()=>{let e=document.getElementById("export-buttons"),t=exportSection.querySelector(".section-header");"none"===e.style.display?(exportSection.style.display="block",e.style.display="flex",exportToggleText.textContent="Hide Export Data",toggleExportSection.classList.remove("collapsed"),exportSection.classList.remove("collapsed"),t.classList.remove("collapsed")):(e.style.display="none",exportToggleText.textContent="Show Export Data",toggleExportSection.classList.add("collapsed"),exportSection.classList.add("collapsed"),t.classList.add("collapsed"))});let connectButtons=connectSection.querySelectorAll("button:not(.section-toggle-button)");connectButtons.forEach(e=>e.style.display="block");let exportButtonsContainer=document.getElementById("export-buttons");exportSection.style.display="none",powerAveragesSection.style.display="none",updateDashboardLayout();let powerData=[],rawPowerMeasurements=[],lastPowerValue=0,powerReadings=[],powerAverages={"10s":{current:0,best:0},"30s":{current:0,best:0},"1m":{current:0,best:0},"2m":{current:0,best:0},"4m":{current:0,best:0},"8m":{current:0,best:0}};function addPowerReading(e){let t=Date.now();powerReadings.push({timestamp:t,power:e});let n=t-54e4;powerReadings=powerReadings.filter(e=>e.timestamp>n),calculatePowerAverages(),updatePowerAveragesDisplay()}function calculatePowerAverages(){let e=Date.now();for(let[t,n]of Object.entries({"10s":1e4,"30s":3e4,"1m":6e4,"2m":12e4,"4m":24e4,"8m":48e4})){let o=e-n,a=powerReadings.filter(e=>e.timestamp>=o);if(a.length>0){let e=Math.round(a.reduce((e,t)=>e+t.power,0)/a.length);powerAverages[t].current=e,e>powerAverages[t].best&&(powerAverages[t].best=e)}else powerAverages[t].current=0}}function updatePowerAveragesDisplay(){avg10sCurrentElement.textContent=powerAverages["10s"].current||"--",avg10sBestElement.textContent=powerAverages["10s"].best||"--",avg30sCurrentElement.textContent=powerAverages["30s"].current||"--",avg30sBestElement.textContent=powerAverages["30s"].best||"--",avg1mCurrentElement.textContent=powerAverages["1m"].current||"--",avg1mBestElement.textContent=powerAverages["1m"].best||"--",avg2mCurrentElement.textContent=powerAverages["2m"].current||"--",avg2mBestElement.textContent=powerAverages["2m"].best||"--",avg4mCurrentElement.textContent=powerAverages["4m"].current||"--",avg4mBestElement.textContent=powerAverages["4m"].best||"--",avg8mCurrentElement.textContent=powerAverages["8m"].current||"--",avg8mBestElement.textContent=powerAverages["8m"].best||"--"}function resetPowerAverages(){for(let e of(powerReadings=[],Object.keys(powerAverages)))powerAverages[e].current=0,powerAverages[e].best=0;updatePowerAveragesDisplay()}let lastHeartRateValue=0,lastCadenceValue=0,dataLoggerInterval=null,powerMeterDevice=null,CYCLING_POWER_SERVICE_UUID="cycling_power",CYCLING_POWER_MEASUREMENT_CHARACTERISTIC_UUID="cycling_power_measurement",CYCLING_POWER_FEATURE_CHARACTERISTIC_UUID="cycling_power_feature",CYCLING_CADENCE_SERVICE_UUID="cycling_speed_and_cadence",CSC_MEASUREMENT_CHARACTERISTIC_UUID="csc_measurement";function handlePowerMeasurement(e){let t=e.target.value,n={timestamp:Date.now(),flags:t.getUint16(0,!0),rawBytes:Array.from(new Uint8Array(t.buffer)).map(e=>e.toString(16).padStart(2,"0")).join(" "),dataLength:t.byteLength};t.getUint16(0,!0);let o=t.getInt16(2,!0);n.instantaneousPower=o,powerValueElement.textContent=o,lastPowerValue=o,addPowerReading(o),rawPowerMeasurements.push(n)}function parsePowerMeasurement(e){return e.getInt16(2,!0)}function onDisconnected(){statusText.textContent="Device disconnected.",powerStatusIndicator.className="status-indicator",deviceNameElement.textContent="",powerValueElement.textContent="--",resetPowerAverages(),connectButton.disabled=!1,dataLoggerInterval&&(clearInterval(dataLoggerInterval),dataLoggerInterval=null),powerMeterDevice&&(powerMeterDevice.removeEventListener("gattserverdisconnected",onDisconnected),powerMeterDevice=null),lastPowerValue=0}connectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){statusText.textContent="Web Bluetooth API is not available.";return}powerData=[],rawPowerMeasurements=[],lastPowerValue=0,resetPowerAverages(),dataLoggerInterval&&clearInterval(dataLoggerInterval);try{statusText.textContent="Scanning for power meters...",powerStatusIndicator.className="status-indicator connecting",powerMeterDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_POWER_SERVICE_UUID]}]}),statusText.textContent="Connecting to device...",deviceNameElement.textContent=`Device: ${powerMeterDevice.name||"Unknown Device"}`,powerMeterDevice.addEventListener("gattserverdisconnected",onDisconnected);let e=await powerMeterDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_POWER_SERVICE_UUID),n=await t.getCharacteristic("cycling_power_measurement");try{let e=await t.getCharacteristic("cycling_power_feature"),n=await e.readValue();console.log(`Power Features: ${n.getUint32(0,!0)}`)}catch(e){console.log("Cycling Power Feature characteristic not found.")}await n.startNotifications(),n.addEventListener("characteristicvaluechanged",handlePowerMeasurement),statusText.textContent="Connected and receiving data!",powerStatusIndicator.className="status-indicator connected",connectButton.disabled=!0,dataLoggerInterval=setInterval(()=>{powerData.push({timestamp:Date.now(),power:lastPowerValue,heartRate:lastHeartRateValue,cadence:lastCadenceValue})},100)}catch(e){statusText.textContent=`Error: ${e.message}`,powerStatusIndicator.className="status-indicator",console.error("Connection failed:",e),powerMeterDevice&&powerMeterDevice.removeEventListener("gattserverdisconnected",onDisconnected)}}),exportJsonButton.addEventListener("click",()=>{let e=new Blob([JSON.stringify(powerData,null,2)],{type:"application/json"}),t=URL.createObjectURL(e),n=document.createElement("a");n.href=t;let o=new Date,a=o.getFullYear(),r=String(o.getMonth()+1).padStart(2,"0"),c=String(o.getDate()).padStart(2,"0"),s=`${a}-${r}-${c}`;n.download=`power_data_${s}.json`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(t)}),exportCsvButton.addEventListener("click",()=>{let e="timestamp,power,heartRate,cadence\n";powerData.forEach(t=>{e+=`${t.timestamp},${t.power},${t.heartRate},${t.cadence}
`});let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),n=URL.createObjectURL(t),o=document.createElement("a");o.href=n;let a=new Date,r=a.getFullYear(),c=String(a.getMonth()+1).padStart(2,"0"),s=String(a.getDate()).padStart(2,"0"),l=`${r}-${c}-${s}`;o.download=`power_data_${l}.csv`,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(n)}),exportRawJsonButton.addEventListener("click",()=>{let e=new Blob([JSON.stringify(rawPowerMeasurements,null,2)],{type:"application/json"}),t=URL.createObjectURL(e),n=document.createElement("a");n.href=t;let o=new Date,a=o.getFullYear(),r=String(o.getMonth()+1).padStart(2,"0"),c=String(o.getDate()).padStart(2,"0"),s=`${a}-${r}-${c}`;n.download=`raw_power_measurements_${s}.json`,document.body.appendChild(n),n.click(),document.body.removeChild(n),URL.revokeObjectURL(t)}),exportRawCsvButton.addEventListener("click",()=>{let e="timestamp,flags,dataLength,instantaneousPower,rawBytes\n";rawPowerMeasurements.forEach(t=>{e+=`${t.timestamp},${t.flags},${t.dataLength},${t.instantaneousPower},"${t.rawBytes}"
`});let t=new Blob([e],{type:"text/csv;charset=utf-8;"}),n=URL.createObjectURL(t),o=document.createElement("a");o.href=n;let a=new Date,r=a.getFullYear(),c=String(a.getMonth()+1).padStart(2,"0"),s=String(a.getDate()).padStart(2,"0"),l=`${r}-${c}-${s}`;o.download=`raw_power_measurements_${l}.csv`,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(n)}),exportTcxButton.addEventListener("click",()=>{try{if(0===powerData.length)return void alert("No power data available to export.");let e=generateTcxString(powerData),t=new Blob([e],{type:"application/xml;charset=utf-8;"}),n=URL.createObjectURL(t),o=document.createElement("a");o.href=n;let a=new Date,r=a.getFullYear(),c=String(a.getMonth()+1).padStart(2,"0"),s=String(a.getDate()).padStart(2,"0"),l=`${r}-${c}-${s}`;o.download=`power_data_${l}.tcx`,document.body.appendChild(o),o.click(),document.body.removeChild(o),URL.revokeObjectURL(n)}catch(e){console.error("Error generating TCX:",e),alert(`Error generating TCX file: ${e.message}`)}});let heartData=[],hrDataLoggerInterval=null,hrConnectButton=document.getElementById("hrConnectButton"),hrStatusText=document.getElementById("hrStatus"),hrValue=document.getElementById("hr-value"),hrDeviceName=document.getElementById("hrDeviceName"),hrBluetoothDevice=null;function handleHeartRateChanged(e){let t=parseHeartRate(e.target.value);hrValue.textContent=t,lastHeartRateValue=t}function parseHeartRate(e){return 1&e.getUint8(0)?e.getUint16(1,!0):e.getUint8(1)}function onDisconnectedHr(){hrStatusText.textContent="Device disconnected.",hrStatusIndicator.className="status-indicator",hrDeviceName.textContent="",hrValue.textContent="--",hrConnectButton.disabled=!1,hrBluetoothDevice=null,lastHeartRateValue=0}hrConnectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){hrStatusText.textContent="Web Bluetooth API is not available.";return}try{hrStatusText.textContent="Scanning for devices...",hrStatusIndicator.className="status-indicator connecting",hrBluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:["heart_rate"]}]}),hrStatusText.textContent="Connecting to device...",hrDeviceName.textContent=`Device: ${hrBluetoothDevice.name}`,hrBluetoothDevice.addEventListener("gattserverdisconnected",onDisconnectedHr);let e=await hrBluetoothDevice.gatt.connect(),t=await e.getPrimaryService("heart_rate"),n=await t.getCharacteristic("heart_rate_measurement");await n.startNotifications(),n.addEventListener("characteristicvaluechanged",handleHeartRateChanged),hrStatusText.textContent="Connected!",hrStatusIndicator.className="status-indicator connected",hrConnectButton.disabled=!0}catch(e){hrStatusText.textContent=`Error: ${e.message}`,hrStatusIndicator.className="status-indicator",console.error("Connection failed:",e)}});let speedCadenceConnectButton=document.getElementById("speedCadenceConnectButton"),cadenceValueElement=document.getElementById("cadence-value"),cadenceStatusText=document.getElementById("cadenceStatus"),cadenceDeviceName=document.getElementById("cadenceDeviceName"),speedCadenceBluetoothDevice=null;speedCadenceConnectButton.addEventListener("click",async()=>{if(await requestWakeLock(),!navigator.bluetooth){cadenceStatusText.textContent="Web Bluetooth API is not available.";return}try{cadenceStatusText.textContent="Scanning for sensors...",cadenceStatusIndicator.className="status-indicator connecting",speedCadenceBluetoothDevice=await navigator.bluetooth.requestDevice({filters:[{services:[CYCLING_CADENCE_SERVICE_UUID]}]}),cadenceStatusText.textContent="Connecting to device...",cadenceDeviceName.textContent=`Device: ${speedCadenceBluetoothDevice.name}`,speedCadenceBluetoothDevice.addEventListener("gattserverdisconnected",onDisconnectedSpeedCadence);let e=await speedCadenceBluetoothDevice.gatt.connect(),t=await e.getPrimaryService(CYCLING_CADENCE_SERVICE_UUID),n=await t.getCharacteristic("csc_measurement");await n.startNotifications(),n.addEventListener("characteristicvaluechanged",handleSpeedCadenceMeasurement),cadenceStatusText.textContent="Connected!",cadenceStatusIndicator.className="status-indicator connected",speedCadenceConnectButton.disabled=!0}catch(e){cadenceStatusText.textContent=`Error: ${e.message}`,cadenceStatusIndicator.className="status-indicator",console.error("Speed/Cadence connection failed:",e)}});let lastCrankRevs=0,lastCrankTime=0;function handleSpeedCadenceMeasurement(e){let t=e.target.value,n=t.getUint8(0),o=1;if(1&n&&(o+=6),2&n){let e=t.getUint16(o,!0),n=t.getUint16(o+2,!0);if(lastCrankRevs>0){let t=e-lastCrankRevs,o=(n-lastCrankTime)/1024;if(o>0){let e=t/o*60;cadenceValueElement.textContent=Math.round(e),lastCadenceValue=Math.round(e)}}lastCrankRevs=e,lastCrankTime=n}}function onDisconnectedSpeedCadence(){cadenceStatusText.textContent="Device disconnected.",cadenceStatusIndicator.className="status-indicator",cadenceDeviceName.textContent="",cadenceValueElement.textContent="--",speedCadenceConnectButton.disabled=!1,speedCadenceBluetoothDevice=null,lastCadenceValue=0}
//# sourceMappingURL=power-saver.8c6e8624.js.map
